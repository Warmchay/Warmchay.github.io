<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yitee</title>
  
  <subtitle>Secrets</subtitle>
  <link href="https://warmchay.github.io/atom.xml" rel="self"/>
  
  <link href="https://warmchay.github.io/"/>
  <updated>2021-03-21T12:47:00.530Z</updated>
  <id>https://warmchay.github.io/</id>
  
  <author>
    <name>Zoris Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>清清的星星球纪录-1</title>
    <link href="https://warmchay.github.io/2021/03/21/%E6%B8%85%E6%B8%85%E7%9A%84%E6%98%9F%E6%98%9F%E7%90%83%E7%BA%AA%E5%BD%95-1/"/>
    <id>https://warmchay.github.io/2021/03/21/%E6%B8%85%E6%B8%85%E7%9A%84%E6%98%9F%E6%98%9F%E7%90%83%E7%BA%AA%E5%BD%95-1/</id>
    <published>2021-03-21T11:58:12.654Z</published>
    <updated>2021-03-21T12:47:00.530Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="清清的星星球纪录-1"><a href="#清清的星星球纪录-1" class="headerlink" title="清清的星星球纪录-1"></a>清清的星星球纪录-1</h1><p>这一周挺混沌的。</p><blockquote><p>“你是一个很理性的人”，小清曾这么对清清说。</p><p>“我不是”，清清镇静地回应了他；</p><p>“不算是”</p><p>“至少我认为不是”，清清着急的补充了两句。</p></blockquote><p>踌躇了一个寒假的激动，转成了巨大的空洞；</p><p>在人来人往的街道上，再次感受那些不了解的，曾忽略过的存在。</p><img src="https://i.loli.net/2021/03/21/YSJTadIuVWDGpl4.jpg" alt="C343E95F496BF7AAAFC9C1AF77B248CA.jpg" style="zoom:50%;"><p>周三的晚上，时间滴答滴答的过了九点一刻，333路末班车启动了，隔着两个季节结束了《布达佩斯大饭店》的极致二分。</p><p>难言的心情在下午五点半的《无望》中接受了。</p><blockquote><p>“I LOVE YOU，无望。你甘是这款人“    — 「五月天 feat.茄子蛋」</p></blockquote><p>上周三到现在，每个晚上都做着梦，早上闹钟响起，正是高潮的时刻</p><p>似乎是给躺回去再睡20分钟的理由，第一次连续一周平均睡眠过了六个半小时</p><p>继续做梦。</p><img src="https://i.loli.net/2021/03/21/JQ31yrFcKpUoYzN.jpg" alt="8D88C443020608343AE61769CDC16B78.jpg" style="zoom:50%;"><blockquote><p>“梦里有青苔，有很多没再见过的朋友”</p></blockquote><p>这一周，CFA班中作为组长，策划了组内PBL1的两个CASE。</p><p>第一个休闲食品的pre，紧张中把逻辑打散重构，<code>同质化</code>这个准备着强调的切入点，就这么忘了</p><p><code>SWOT</code>分析时，看着手上拿着的空白<code>keynote</code>，恍惚间脱口的<code>Technology</code>硬着头皮分析了下去</p><p><code>weakness</code>老师表扬了把上下游议价引入讨论，我心里知道我把波特五力弄混了。</p><p>下课，背上书包；离开，戴上耳机。</p><p>红了玻璃心，动了脆弱情。</p><blockquote><p>“公元627年，玄奘离开了长安城” — 《玄奘西行》</p></blockquote><img src="https://i.loli.net/2021/03/21/iuEK92s8N6wxhAQ.jpg" alt="008E66641BCD3E4180AC58E620433FF8.jpg" style="zoom:50%;"><p>等着舍友们烫好头发，把操作系统和计组整理了一下框架</p><p>刹那间，发现自己$CPI$没有弄混，对着面前的牛奶芋头冰傻笑了一下</p><blockquote><p>“宏观上我们还可以根据CPI来分析…”</p><p>“…社会的指令数是多少？”</p></blockquote><p>夜归的烤串，杏皮茶换成豆奶的甜腻</p><p>第一次提出跟舍友们合照，有了第一次的宿舍合照。</p><img src="https://i.loli.net/2021/03/21/L6C7yHxXuMsJmSU.jpg" alt="A7B1EE65BBF4F38CF43D8E2B4C8E8E6B.jpg" style="zoom:50%;"><p>今天的投资报告<code>pre</code>，拿着找到的数据计算出需要的<code>INN</code>和<code>NPV</code></p><p>结束后，发现CASE给了设计的市场规模</p><p>突出的负净现值，坚定的说，“我们认为不适合投资”</p><p>难以忘记的这么笃定的瞬间。</p><p>似乎是想要做到没有漏洞，急促间，红色的箭头隐匿在教室沉静的氛围中。</p><p>“以上是我们组的投资分析，谢谢大家”。</p><blockquote><p>持股比例的漏洞埋在了幻想之中</p></blockquote><p>竟然又湿了眼眶，在逐渐接触经济的学科中，我对自己一开始的想法感到迷茫</p><p>大自然的统计规律是呈正态分布的，人们生活的周围潜藏的是逻辑的数学</p><p>“所以任何事情都只会有两种结果：存在与不存在”</p><blockquote><p>“因为不能给出完美的答案，所以金融才有意思啊”</p></blockquote><p>可我感到痛苦，编程成功的每一瞬间我不间断的感慨它的完美逻辑</p><p>两个<code>pre</code>的过程当中，我无数次的觉得</p><p>一个事实往下还是事实，</p><p>一个数据牵连的无数有关的无关的数据，</p><p>一个报道层层堆叠正确的答案。</p><p>在无法给出答案的此刻，我记起了每刻为找出答案而努力的所有瞬间。</p><img src="https://i.loli.net/2021/03/21/slw2ofN8cJFvZ1e.jpg" alt="0985B296F668F5989EF9CD6F5A259C4F.jpg" style="zoom:50%;"><p>图书馆的走廊身影闪烁，世界异常开阔。</p><blockquote><p>在最后的无厘头的结束，是因为不想再思考下去，想起高中偷笑过一位同学说他最害怕的是未知。</p><p>现在我最害怕最期待的也是未知。</p><p>20岁的我在想，生活没有答案，每一刻都是时间碎片的略过，羡慕源自信息的不对称，偏见来自没有感受的…。</p><p><code>...</code>是因为我不知道什么能描述</p></blockquote><p>这么结束了记录，感觉心情顺畅了，闭塞着的空白又充满了生机；</p><p>想会会那位远方的朋友，跟他郑重地说一声谢谢。</p><blockquote><p>努力进p社吧，毒鸡汤hhhh</p><p>傻白甜最好了～～～</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;清清的星星球纪录-1&quot;&gt;&lt;a href=&quot;#清清的星星球纪录-1&quot; class=&quot;headerlink&quot; title=&quot;清清的星星球纪录-1&quot;&gt;&lt;/a&gt;清清的星星球</summary>
      
    
    
    
    <category term="清清的星星球纪录" scheme="https://warmchay.github.io/categories/%E6%B8%85%E6%B8%85%E7%9A%84%E6%98%9F%E6%98%9F%E7%90%83%E7%BA%AA%E5%BD%95/"/>
    
    
    <category term="札记" scheme="https://warmchay.github.io/tags/%E6%9C%AD%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统基础 1</title>
    <link href="https://warmchay.github.io/2021/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80--NJU/%E4%B8%80%20C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E4%B8%BE%E4%BE%8B/"/>
    <id>https://warmchay.github.io/2021/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80--NJU/%E4%B8%80%20C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E4%B8%BE%E4%BE%8B/</id>
    <published>2021-03-16T01:24:27.627Z</published>
    <updated>2021-03-16T01:24:27.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-C语言程序举例"><a href="#一-C语言程序举例" class="headerlink" title="一 C语言程序举例"></a>一 C语言程序举例</h1><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><blockquote><p><strong>① ISO C90标准，32位系统的程序运行：</strong></p><ul><li>-2147483648 &lt; 2147483648  <strong>False</strong></li><li>i = -2147483648; 2147483648 &gt; i; <strong>True</strong></li><li>-2147483648-1 &lt; 2147483648 <strong>True</strong></li></ul><p><strong>Why?如何理解呢？</strong></p><ul><li><strong>编译器如何处理字面量</strong></li><li>高级语言中的运算规则</li><li>高级语言与指令之间的对应</li><li>机器指令的执行过程</li><li>机器级数据的表示和运算</li><li>…</li></ul><p><strong>② x, y都为int型，当x = 65535, y = x*x; y的值是多少？</strong></p><ul><li>y = -131071  <strong>WHY?</strong></li></ul><p><strong>③ x, y依旧为int型，对于(x&gt;y) == (-x &lt; -y)是否成立？</strong></p><ul><li><strong>False；</strong>当<code>x = -2147483648</code>时，y任意（除<code>-2147483648</code>）时都不成立  <strong>WHY？</strong></li></ul></blockquote><p><strong>以上说明计算机的世界和现实世界是有一定差距滴~</strong></p><h2 id="1-1-C举例"><a href="#1-1-C举例" class="headerlink" title="1.1 C举例"></a>1.1 C举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//----①----</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0x8000000</span>;</span><br><span class="line"><span class="keyword">int</span> b = a/<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);    </span><br><span class="line"><span class="comment">//运行结果：b = -2147483868</span></span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"><span class="comment">//----②----</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> c = a/b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"><span class="comment">//报错 ---&gt; Floating Point Exception，CPU检测到了溢出异常</span></span><br></pre></td></tr></table></figure><p><strong>Rea：</strong></p><ul><li><strong>关于①</strong>：由于$\frac{a}{-1}$中，<code>-1</code>为常数，在这个过程中程序得知除以<code>-1</code>，其被优化成<strong>取负指令<code>neg</code><strong>，因此没有发生</strong>除法溢出</strong>【检测不到】【可以使用objdump反汇编编码来检测】</li><li><strong>关于②</strong>：因为<code>a、b</code>都为变量，在进行运算时采用的是<strong>除法指令<code>IDIV</code><strong>实现，但它不生成</strong><code>OF</code>指令</strong>，那么是如何判断<strong>溢出异常</strong>的呢？</li></ul><blockquote><p>这个实际上是<strong>“除法错”异常#DE（类型0）</strong>，在Linux中，对#DE类型发<strong>SIGFPE****信号</strong></p></blockquote><h2 id="1-2-什么是计算机系统"><a href="#1-2-什么是计算机系统" class="headerlink" title="1.2 什么是计算机系统"></a>1.2 什么是计算机系统</h2><blockquote><p>将计算机系统分为两个部分，四类对象进行了解</p></blockquote><ul><li><p><strong>软件</strong></p><table><thead><tr><th align="center">使用方式</th><th align="center">操作对象</th></tr></thead><tbody><tr><td align="center">应用（问题）</td><td align="center">最终用户</td></tr><tr><td align="center">算法</td><td align="center">程序员</td></tr><tr><td align="center">编程语言【数据的机器级表示、运算，过程的机器级语句和调用】</td><td align="center">程序员</td></tr><tr><td align="center">操作系统/虚拟机【<strong>编译和链接</strong>的部分内容】</td><td align="center">程序员</td></tr></tbody></table></li><li><p><strong>软硬结合</strong></p><table><thead><tr><th align="center">使用方式</th><th align="center">操作对象</th></tr></thead><tbody><tr><td align="center">指令集体系结构（ISA）和汇编层【<strong>指令系统、机器代码、汇编语言</strong>】</td><td align="center">架构师</td></tr></tbody></table></li><li><p><strong>硬件</strong></p><table><thead><tr><th align="center">使用方式</th><th align="center">操作对象</th></tr></thead><tbody><tr><td align="center">指令集体系结构（ISA）</td><td align="center">架构师</td></tr><tr><td align="center">微体系结构【CPU的通用结构及层次结构存储系统】</td><td align="center">架构师</td></tr><tr><td align="center">功能部件</td><td align="center">架构师</td></tr><tr><td align="center">电路</td><td align="center">电子工程师</td></tr><tr><td align="center">器件</td><td align="center">电子工程师</td></tr></tbody></table></li><li><p>程序的执行结果依赖于这些所有的使用方式，要解决问题需要把所有层次连接起来</p></li></ul><h2 id="1-3-冯·诺依曼思想"><a href="#1-3-冯·诺依曼思想" class="headerlink" title="1.3 冯·诺依曼思想"></a>1.3 冯·诺依曼思想</h2><blockquote><p>第一台计算机咋来的咧~第一台存储计算机【EDSAC】</p></blockquote><p><img src="https://i.loli.net/2020/11/29/KmrEvB8qpn4Mteb.jpg" alt="冯·诺伊曼计算机结构.jpg"></p><p><strong>重要思想：存储程序（Stroed-program）</strong></p><p><strong>工作方式：</strong>将计算机要完成的工作编写成<strong>程序</strong>，然后将程序和原始数据送入<strong>主存</strong>并启动执行。一旦程序被启动，计算机能在不需操作人员的干预下，自动完成逐条取出指令和实现指令的任务</p><blockquote><p>现在基本上所有的通用计算机大都采用冯·诺伊曼结构</p></blockquote><h3 id="1-3-1-结构思想"><a href="#1-3-1-结构思想" class="headerlink" title="1.3.1 结构思想"></a>1.3.1 结构思想</h3><p>总结，冯·诺伊曼结构为：</p><ul><li>有<strong>主存</strong>，用来存放程序和数据</li><li>有<strong>自动逐条取出指令</strong>的部件</li><li>有<strong>具体执行指令（即运算）</strong>的部件</li><li><strong>程序</strong>由指令构成</li><li>指令描述如何对<strong>数据</strong>进行<strong>处理</strong></li><li><strong>输入</strong>计算机的部件应该有<strong>程序和原始数据</strong></li><li>需要有将<strong>运算结果输出</strong>计算机的部件</li></ul><p><img src="https://i.loli.net/2020/11/29/Dnb1vEWYGPZcCUX.jpg" alt="冯·诺伊曼结构应该是怎样的.jpg"></p><h3 id="1-3-2-结构主要思想"><a href="#1-3-2-结构主要思想" class="headerlink" title="1.3.2 结构主要思想"></a>1.3.2 结构主要思想</h3><ol><li><p><strong>计算机组成部分</strong></p><table><thead><tr><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th></tr></thead><tbody><tr><td align="center">运算器</td><td align="center">控制器</td><td align="center">存储器</td><td align="center">输入设备</td><td align="center">输出设备</td></tr></tbody></table></li><li><p><strong>基础部件功能</strong></p><table><thead><tr><th align="center">部件</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><strong>存储器</strong></td><td align="center">能存放<strong>数据</strong>和<strong>指令</strong>【形式上都为<code>0-1</code>序列】，且计算机能分辨出来</td></tr><tr><td align="center"><strong>控制器</strong></td><td align="center">能自动取出<strong>指令</strong>来执行</td></tr><tr><td align="center"><strong>运算器</strong></td><td align="center">应能进行四则运算，和一些逻辑运算及附加运算</td></tr><tr><td align="center"><strong>输入、输出设备</strong></td><td align="center">操作人员能通过<strong>输入、输出设备</strong>与<strong>主机</strong>通信</td></tr></tbody></table></li><li><p>内部以<strong>二进制</strong>表示指令和数据</p><p>每条指令码由<strong>操作码和地址码</strong>构成【<code>0-1</code>序列】。<strong>操作码</strong>指出操作类型，<strong>地址码</strong>指出操作数的地址。可以看出，程序由一串指令组成</p></li><li><p>采用“<strong>存储程序</strong>”的工作方式</p></li></ol><h2 id="1-4-现代计算机结构模型"><a href="#1-4-现代计算机结构模型" class="headerlink" title="1.4 现代计算机结构模型"></a>1.4 现代计算机结构模型</h2><blockquote><p>基本概念：</p><p><strong>CPU：</strong>Computer Processing Unit【算术处理单元】</p><p><strong>MAR：</strong>Memory Address Register【存储器地址寄存器】</p><p><strong>MDR：</strong>Memory Data Register【存储器数据寄存器】</p><p><strong>ALU：</strong>Arithmetic Logic Unit    【算术逻辑单元】</p><p><strong>IR：</strong>Instructor Register            【指令寄存器】</p><p><strong>PC：</strong>Program Counter             【程序计数器】【CPU中的寄存器】</p></blockquote><p><img src="https://i.loli.net/2020/11/29/vcoClrzT4maZ2Vx.jpg" alt="现代计算机结构.jpg"></p><h3 id="1-4-1-现实举例"><a href="#1-4-1-现实举例" class="headerlink" title="1.4.1 现实举例"></a>1.4.1 现实举例</h3><p><strong>可以把这个比为现实的饭店/工厂</strong>。举个栗子：妈妈做菜</p><p>关于这个过程，我们可以把各部分作为：</p><table><thead><tr><th align="center">做菜工具</th><th align="center">计算机结构</th></tr></thead><tbody><tr><td align="center">厨房</td><td align="center">CPU</td></tr><tr><td align="center">妈妈</td><td align="center">控制器【拿到菜单开始做菜】</td></tr><tr><td align="center">盘子</td><td align="center">GPRs【通用寄存器集群】</td></tr><tr><td align="center">锅灶</td><td align="center">ALU</td></tr><tr><td align="center">架子</td><td align="center">存储器</td></tr></tbody></table><p><strong>那么计算机是如何工作的呢？</strong></p><ul><li><p><strong>做菜前</strong></p><p>原材料【<strong>数据</strong>】和菜谱【<strong>指令</strong>】<strong>按序</strong>放在厨房外的架子上【<strong>存储器</strong>】，且每个架子上有编号【<strong>存储单元地址</strong>】；</p><p>菜谱上的信息有：原料位置、做法、做好的菜放在那里等</p><p>例如：将10、11号架子上的原料放在一起炒，并装入3号盘，然后，你告诉妈妈从第5个架子（<strong>起始PC=5</strong>）指定菜谱开始做</p></li><li><p><strong>开始做菜</strong></p><ul><li><strong>Step 1：</strong>从5号架上取菜谱【<strong>根据PC取指令</strong>】</li><li><strong>Step 2：</strong>看菜谱【<strong>指令译码</strong>】</li><li><strong>Step 3：</strong>从架子上或盘子上取原材料【<strong>取操作数</strong>】</li><li><strong>Step 4：</strong>洗、切、炒等具体操作【<strong>指令执行</strong>】</li><li><strong>Step 5：</strong>装盘或直接送到桌子上【<strong>回写结果</strong>】</li><li><strong>Step 6：</strong>算出下一菜谱所在的架子<code>5+1=6</code>【<strong>修改PC的值</strong>】</li></ul></li><li><p>按步继续执行指令【类似<strong>存储程序</strong>的方式】</p></li></ul><h3 id="1-4-2-计算机工作方式"><a href="#1-4-2-计算机工作方式" class="headerlink" title="1.4.2 计算机工作方式"></a>1.4.2 计算机工作方式</h3><p><strong>由妈妈做菜，我们得到计算机的工作方式：</strong></p><blockquote><p>首先，明确程序是由指令构成的【菜单由菜谱构成】</p></blockquote><ul><li><p><strong>程序在执行前</strong></p><p><strong>数据</strong>和<strong>指令</strong>事先被放在<strong>存储器</strong>中，每条指令和每个数据都有地址，指令<strong>按序</strong>排放，指令由<strong>OP</strong>和<strong>ADDR字段</strong>组成，程序起始的位置置<strong>PC</strong></p><blockquote><p>原料和菜谱都放在了架子上，每个架子有编号。妈妈从5号架子上拿到制定菜谱开始做菜。</p></blockquote></li><li><p><strong>开始执行程序</strong></p><ul><li><strong>Step 1：</strong>根据PC取指令【从5号架上拿菜谱】</li><li><strong>Step 2：</strong>指令译码【看菜谱】</li><li><strong>Step 3：</strong>取操作数【从架上或盘上取原材料】</li><li><strong>Step 4：</strong>指令执行【洗、切、炒等具体操作】</li><li><strong>Step 5：</strong>回写结果【装盘或直接送桌】</li><li><strong>Step 6：</strong>修改PC的值【算出下一菜谱所在架子号<code>5+1=6</code>】</li><li><strong>While(执行下一条指令)</strong></li></ul></li></ul><h3 id="1-4-3-指令和数据"><a href="#1-4-3-指令和数据" class="headerlink" title="1.4.3 指令和数据"></a>1.4.3 指令和数据</h3><ul><li><strong>程序启动前：</strong>指令和数据都放在<strong>存储器</strong>中，形式上没有差别，都是<code>0-1</code>序列</li><li>采用<strong>存储结构</strong>工作方式<ul><li>程序由指令组成，程序被启动后，计算机能自动取出一条又一条的指令执行，而在执行的过程中无需他人干预。</li></ul></li></ul><p><strong>指令中需给出的信息：</strong></p><ul><li><strong>操作性质</strong>【操作码】</li><li><strong>源操作数1</strong><code>或/和</code><strong>源操作数2</strong>（立即数、寄存器编号，<strong>存储地址</strong>）<ul><li>单目1个操作数，双目2个操作数</li></ul></li><li><strong>目的操作数地址</strong>【寄存器编号、存储地址】</li><li>存储地址的描述与<strong>操作数的数据结构</strong>有关</li></ul><h2 id="1-5-机器语言到高级编程语言"><a href="#1-5-机器语言到高级编程语言" class="headerlink" title="1.5 机器语言到高级编程语言"></a>1.5 机器语言到高级编程语言</h2><h3 id="1-5-1-机器语言"><a href="#1-5-1-机器语言" class="headerlink" title="1.5.1 机器语言"></a>1.5.1 机器语言</h3><blockquote><p><strong>用机器语言编写程序【0/1序列】</strong>，并记录在纸带或者卡片上</p></blockquote><p>一般为：【举例0010-jc】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0:0101 0110//前面为操作数 后面为地址数</span><br><span class="line">1:0010 0100</span><br><span class="line">2:......</span><br><span class="line">3:......</span><br><span class="line">4:0110 0111</span><br><span class="line">5:......</span><br><span class="line">6:......</span><br></pre></td></tr></table></figure><p><strong>问题：</strong></p><p>​    如果在第4条指令前加入指令，则需要<strong>重新计算地址码</strong>【如jxx的目标地址】，然后重新打孔。十分不灵活，且阅读、书写困难。</p><p>​    这样太麻烦了，怎么改进咧？</p><h3 id="1-5-2-汇编语言"><a href="#1-5-2-汇编语言" class="headerlink" title="1.5.2 汇编语言"></a>1.5.2 汇编语言</h3><blockquote><p>用<strong>符号</strong>表示跳转位置和变量位置</p></blockquote><p>举个栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add B</span><br><span class="line">jc L0</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">L0:sub C</span><br><span class="line">B:......</span><br><span class="line">C:......</span><br></pre></td></tr></table></figure><p>可以看到，<strong>在第4条指令前加指令时不用改变<code>add</code>、<code>jxx</code>和<code>sub</code>指令中的地址码</strong></p><p><strong>简单总结下汇编语言的特点：</strong></p><ul><li>用<strong>助记符</strong>来表示操作符：<code>add</code></li><li>用<strong>标号</strong>表示位置：<code>B</code></li><li>用助记符表示寄存器</li><li>….</li></ul><p><strong>汇编语言体现的优点是：</strong></p><ul><li>不用因为增减指令而去修改其他指令</li><li>不需要用记忆指令编码，编写方便</li><li>可读性比机器语言强</li></ul><p>带来的新的问题：</p><ul><li>人容易理解，机器就不一定容易理解了~</li></ul><p>因此之后还需要用到汇编程序，<strong>将汇编语言转换为机器语言</strong></p><h3 id="1-5-3-指令所描述的功能"><a href="#1-5-3-指令所描述的功能" class="headerlink" title="1.5.3 指令所描述的功能"></a>1.5.3 指令所描述的功能</h3><blockquote><p>以“妈妈做菜”为例.</p></blockquote><ul><li><pre><code class="bash">Ld M#,R# (将存储单元内容装入寄存器)【Ld == Lord  装入】St R#,M# (将寄存器内容装入存储单元)【St == Store 存储】Add R#,M#(类似的还有Sub、Mul等)Jxx M#   (若满足条件，转移到另一处执行)</code></pre><p><img src="https://i.loli.net/2020/11/29/OloWyK5mt17CNQR.jpg" alt="指令描述的功能.jpg"></p></li><li><p>汇编语言（源）程序由<strong>汇编指令</strong>构成</p></li><li><p>一句话描述<strong>什么是汇编指令</strong></p><ul><li>用<strong>助记符</strong>和<strong>标号</strong>来表示的指令（与机器指令一一对应）</li></ul></li><li><p><strong>指令</strong>又是什么呢</p><ul><li><p>包含<strong>操作数</strong>和操作数或其<strong>地址码</strong></p><blockquote><p><strong>机器指令</strong>用二进制表示，<strong>汇编指令</strong>用符号表示</p></blockquote></li><li><p>只能描述：取（或存一个数）；两个数加（或减、乘、除、与、或等）；根据运算结果判断是否转移执行</p></li></ul></li><li><p>如果用<strong>汇编语言</strong>编写复杂程序是什么样的呢？【如实现<code>sort</code>或者矩阵相乘】</p><ul><li>需要描述的细节会十分多，程序会十分长，并且在<strong>不同结构</strong>的机器上不同的汇编编写的程序是不能运行的</li></ul></li></ul><blockquote><p>因为<strong>机器语言</strong>和<strong>汇编语言</strong>都是面向机器结构的语言，故统称它们为<strong>机器级语言</strong></p></blockquote><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-C语言程序举例&quot;&gt;&lt;a href=&quot;#一-C语言程序举例&quot; class=&quot;headerlink&quot; title=&quot;一 C语言程序举例&quot;&gt;&lt;/a&gt;一 C语言程序举例&lt;/h1&gt;&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;header</summary>
      
    
    
    
    <category term="计算机基础原理" scheme="https://warmchay.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>学习记录--汉诺塔，快排与数组内逆序</title>
    <link href="https://warmchay.github.io/2021/03/16/%E6%B1%89%E8%AF%BA%E5%A1%94%EF%BC%8C%E5%BF%AB%E6%8E%92%E4%B8%8E%E6%95%B0%E7%BB%84%E5%86%85%E9%80%86%E5%BA%8F/"/>
    <id>https://warmchay.github.io/2021/03/16/%E6%B1%89%E8%AF%BA%E5%A1%94%EF%BC%8C%E5%BF%AB%E6%8E%92%E4%B8%8E%E6%95%B0%E7%BB%84%E5%86%85%E9%80%86%E5%BA%8F/</id>
    <published>2021-03-16T01:24:27.626Z</published>
    <updated>2021-03-16T01:24:27.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-汉诺塔问题"><a href="#一-汉诺塔问题" class="headerlink" title="一 汉诺塔问题"></a>一 汉诺塔问题</h1><blockquote><p>这里没有用指针，之后再更新指针部分      —11.15</p></blockquote><p>汉诺塔问题一直困扰了我比较久，总结的规律是，递归方式重点在于分为<strong>初始柱【A】、中转柱【B】及目标柱【C】</strong></p><p>那么问题其实就在于它的这个过程要怎么转了，一般过程都是最上面的一个整体（以64个圆盘为例，则把最上方的63块看为整体）<code>A-&gt;C-&gt;B</code><strong>【此时中转柱为C】</strong>而后把最后一个大圆盘<code>A-&gt;C</code><strong>【这里不需要中转柱】</strong>，再接着，以A为中转柱，将B上的圆盘全部转移到C上，即<code>B-&gt;A-&gt;C</code></p><blockquote><p>注意：以上A、B、C柱子是时刻发生变化的，因为这中间圆盘是一个一个取得，则每次这三类柱子得顺序都会发生变化。但如果从宏观上来看，就是三根柱子得大变化。所以，考场上懵的话想想宏观就能很快敲出来了。</p></blockquote><p>核心算法为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> a, <span class="keyword">char</span> b, <span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c --&gt; %c\n&quot;</span>, a, c);<span class="comment">//若只剩下一个了，直接转移就行啦</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    move(n<span class="number">-1</span>, a, c, b);<span class="comment">//此时初始柱为a（不一定是A）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c --&gt; %c\n&quot;</span>, a, c);</span><br><span class="line">    move(n<span class="number">-1</span>, b, a, c);<span class="comment">//此时初试柱为b（不一定是B）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>在输出的时候，输出的是a，c柱，是当时得初始柱和目标柱，不是A和C柱嗷嗷</p></blockquote><h1 id="二-快速排序"><a href="#二-快速排序" class="headerlink" title="二 快速排序"></a>二 快速排序</h1><blockquote><p>是一道关于分配牛奶得问题，其实用sort直接就出来了，但是因为一直不会快排，内心虚，就学习了下快排怎么写，发现这个分治法有点意思</p></blockquote><p>因为一开始看快排很容易懵，那么怎么理解会更快呢，把分治法称为<strong>“挖坑填数+分治”</strong>就快啦~</p><h2 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h2><p>总的来说就是，先找到一个基准点<code>通常为最左边s[l],或者最右边s[r]</code>，如果选取最左边<code>s[l]</code>为基准点，那么最先比较的则是最右端<code>s[r]</code>，如果比<code>s[l]</code>大，则跳到下一个<code>s[--r]</code>，若比它小，则<code>s[r]</code>填补<code>s[l]</code>的坑位，然后<code>++i</code>，将右边的坑位与左边的坑位再进行比较；知道<code>i == j</code>为止</p><h2 id="2-2-挖坑填数"><a href="#2-2-挖坑填数" class="headerlink" title="2.2 挖坑填数"></a>2.2 挖坑填数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change_loc</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = s[l], i = l, j = r;</span><br><span class="line">        <span class="comment">/*先右端*/</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; s[j] &gt;= x)&#123;          <span class="comment">//注意这个i&lt;j，容易漏，如果减过头了就麻烦了</span></span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)&#123;                          <span class="comment">//有可能i=j，所以还要加判断</span></span><br><span class="line">            s[i] = s[j];                    <span class="comment">//填数</span></span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*再左端*/</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; s[i] &lt;= x)&#123;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">            s[j] = s[i];</span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s[i] = x;                               <span class="comment">//当i=j时，填补完毕，可以退出来了</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> i;                               <span class="comment">//返回此时中间点得位置，便于i的左端和右端继续排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-分治"><a href="#2-3-分治" class="headerlink" title="2.3 分治"></a>2.3 分治</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">    <span class="keyword">int</span> i = quick_sort(s, l, r);<span class="comment">//找到中间点</span></span><br><span class="line">    quick_sort(s, l, i<span class="number">-1</span>);<span class="comment">//先左端</span></span><br><span class="line">    quick_sort(s, i+<span class="number">1</span>, r);<span class="comment">//再右端</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h2><blockquote><p>如果分两个函数来写不够简洁，将<strong>挖坑填数与分治</strong>总结写成：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = s[l], i = l, j = r;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="comment">/*先让左边与右边比较*/</span></span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; s[j] &gt;= x)&#123;</span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">                s[i++] = s[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; s[i] &lt;= x)&#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">                s[j--] = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s[i] = x;</span><br><span class="line">        quick_sort(s, l, i<span class="number">-1</span>);</span><br><span class="line">        quick_sort(s, i+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-补充说明–结构体"><a href="#2-5-补充说明–结构体" class="headerlink" title="2.5 补充说明–结构体"></a>2.5 补充说明–结构体</h2><blockquote><p>这里我是用来比较结构体的，但是遇到的问题就是怎么传结构体进去，后面发现了我的定性思维的问题</p></blockquote><p>我在定义结构体时是这么定义的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">&#125;Cow[MAX];</span><br></pre></td></tr></table></figure><p>这里问题出在我怎么把一个结构体数组传进去进行比较呢，但这样定义结构体没有普遍性，总的来说就是限制的太死了，换成这样定义就好多了</p><p><strong>改进：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">&#125;Cow;</span><br><span class="line">Cow cow[MAX];</span><br></pre></td></tr></table></figure><p>而后在比较时我传值就可以这样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(Cow c[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</span><br></pre></td></tr></table></figure><p>在进行比较时，设置中间变量进行交换时，我就可以把x定义为<code>Cow x = c[l]</code>;这样就不会限制的那么死了。</p><p>灵感来源于看别人进行sort排序时传进去的是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort(cow, cow+m, cmp);<span class="comment">//其中cow为数组首地址，m为长度，cmp为比较函数</span></span><br></pre></td></tr></table></figure><p>然后发现原版的sort可以传结构体数组的话，说明就是我的问题了，后面我就按照结构体来定义了，而不是结构体数组。</p><h1 id="三-数组内逆序"><a href="#三-数组内逆序" class="headerlink" title="三 数组内逆序"></a>三 数组内逆序</h1><p>今天卡到的竟然是数组内逆序，我卡了20多分钟，然后用了一种我从没有用过的方法orz…</p><p>具体是这样的，我还是定义为<code>l、r</code>，但是改为了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*设数组定义为ElemType a[MAX]*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change_loc</span><span class="params">(ElemType a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(l&lt;r)&#123;<span class="comment">/*这个判断容易忘记！*/</span></span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">ElemType tmp = a[l];</span><br><span class="line">    a[l] = a[r];</span><br><span class="line">    a[r] = tmp;</span><br><span class="line">    l++; r--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我觉得这样挺好orz..</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-汉诺塔问题&quot;&gt;&lt;a href=&quot;#一-汉诺塔问题&quot; class=&quot;headerlink&quot; title=&quot;一 汉诺塔问题&quot;&gt;&lt;/a&gt;一 汉诺塔问题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这里没有用指针，之后再更新指针部分      —11.15&lt;/p&gt;
&lt;/b</summary>
      
    
    
    
    <category term="学习记录仪" scheme="https://warmchay.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%BB%AA/"/>
    
    
    <category term="递归" scheme="https://warmchay.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="排序" scheme="https://warmchay.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>比特币与区块链</title>
    <link href="https://warmchay.github.io/2021/03/16/%E6%AF%94%E7%89%B9%E5%B8%81%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>https://warmchay.github.io/2021/03/16/%E6%AF%94%E7%89%B9%E5%B8%81%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2021-03-16T01:24:27.626Z</published>
    <updated>2021-03-16T01:24:27.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="比特币是什么"><a href="#比特币是什么" class="headerlink" title="比特币是什么"></a>比特币是什么</h1><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><blockquote><p> 比特币与区块链的关系十分密切，那么解释区块链前，先来介绍下比特币是什么</p></blockquote><table><thead><tr><th align="center">大纲</th></tr></thead><tbody><tr><td align="center"><strong>1.比特币简介</strong></td></tr><tr><td align="center">2.比特币与支付宝</td></tr><tr><td align="center"><strong>3.比特币的运作与发行</strong></td></tr><tr><td align="center"><strong>4.比特币的数字签名与安全问题</strong></td></tr><tr><td align="center">5.比特币的分叉与演变</td></tr></tbody></table><h2 id="一-比特币简介"><a href="#一-比特币简介" class="headerlink" title="一 比特币简介"></a>一 比特币简介</h2><h3 id="1-1-比特币是什么？"><a href="#1-1-比特币是什么？" class="headerlink" title="1.1 比特币是什么？"></a>1.1 比特币是什么？</h3><ul><li><strong>起源【2008.11.1】</strong>：中本聪【至今未知身份】发表论文—-《比特币：一种点对点的电子现金系统》（也称为比特币白皮书），此时中本聪开发出了比特币系统的程序代码并进行了开源共享</li><li><strong>第一个区块【2009.1.3】：</strong>由中本聪挖出，并延续至今</li><li><strong>涉及原理：</strong>加密技术、分布式账本、智能合约、共识机制、防伪防篡改、<strong>去中心化</strong>等技术和思想，统称为<strong>区块链技术</strong>，在金融、物联网、保险及公益等领域有十分大的应用前景</li><li><strong>白皮书介绍：</strong> <strong>比特币</strong>并不是纸币或者金币银币那样独立的个体，它是一套<strong>电子现金系统</strong>，与支付宝由一定的类似之处，比特币存在于网络上，能够不经过任何中心机构就能够完成全球转账。<strong>比特币也不是一个一个使用的，它的最小单位为“聪”，一个比特币等于一亿聪</strong>，同时比特币的发行、支付、验证，其自成一系，与法币并无联系。</li></ul><h3 id="1-2-比特币的特点"><a href="#1-2-比特币的特点" class="headerlink" title="1.2 比特币的特点"></a>1.2 比特币的特点</h3><ul><li>总量有限，无国界，无发行中心，无管理中心，遍布全球，自由流通的全新货币</li><li>更确切地说，比特币是一套在<strong>全球范围内运行的程序</strong>，是许多份<strong>遍布全球并且又完全一致的账本</strong>，是<strong>一个价值传输网络</strong>，对于货币、金融、互联网及人类组织形式都产生了颠覆性的影响。</li></ul><h3 id="1-3-比特币的影响"><a href="#1-3-比特币的影响" class="headerlink" title="1.3 比特币的影响"></a>1.3 比特币的影响</h3><ol><li>货币不再由少数人掌控的权力机构操纵发行</li><li>任何人都能够用一串符号或者单词来保存财富，抵御通胀，并且能够在全世界范围内使用</li><li>价值能够在全世界自由联通，加强了全球人民间的经济联系</li><li>第一种<strong>公正客观的超主权</strong>自由货币</li><li>做到了在<strong>无中心</strong>管理状态下行动的统一</li><li>因为没有权力中心，也没有管理中心，在比特币的系统中，法治真正代替了人治，在这个系统中，即使是最高统治者，也必须严格遵守规则，服从人民的共识。</li></ol><img src="https://pic.downk.cc/item/5fa53cf51cd1bbb86bb18b2a.png" style="zoom: 50%;" /><center>比特币生态圈</center><h2 id="二-比特币与支付宝"><a href="#二-比特币与支付宝" class="headerlink" title="二 比特币与支付宝"></a>二 比特币与支付宝</h2><p>​    想象一下使用支付宝时，我们在转账时会先扫对方的二维码，或者输入对方账号，填好付款金额后，再通过密码或者刷脸等方式来验证身份，支付宝在确认身份无误后，这笔支付就完成了。</p><p>​    但是，在这个过程中，并没有实物货币的转移，只不过是我们发出了付款信息，而后支付宝确认身份后修改了账本就完事了。并且支付宝保证了账本公正可靠，不会消失，不会被篡改，用户只能使用密码进行对应操作，确保只有用户自己确认授权，支付才能产生。</p><p>​    所以，这整个过程，仅需要满足这两点即可：</p><ol><li><p><strong>有一个公正可靠、无法篡改、记录着各个账户资金往来的账本</strong></p></li><li><p><strong>仅有用户自己授权才能支付，付款收款及往账户里存钱等（在这里看来实际上根本不需要实物货币orz）</strong></p><p>而比特币的付款与支付宝很像，用户只需要扫一下对方比特币的地址，或者输入地址，再输入比特币的数额进行转账就行。</p></li></ol><img src="https://i.loli.net/2020/11/06/OMakE1ProlKBsjm.png" alt="中心式.png" style="zoom: 67%;" /><center>集中式与分布式记账网络</center><p>​    <strong>区别在于：</strong></p><table><thead><tr><th>比特币</th><th align="center">每隔一段时间后，账单就会被某一记账者汇集到一起打包，接到之前的账本上，账本即区块</th></tr></thead><tbody><tr><td>支付宝</td><td align="center">公司运营，用户之间收付款都是由支付宝公司来记账的</td></tr></tbody></table><h2 id="三-比特币的运作与发行"><a href="#三-比特币的运作与发行" class="headerlink" title="三 比特币的运作与发行"></a>三 比特币的运作与发行</h2><h3 id="※-3-1-运作原理"><a href="#※-3-1-运作原理" class="headerlink" title="※ 3.1 运作原理"></a>※ 3.1 运作原理</h3><blockquote><p><strong>比特币是一个价值传输网络，参与比特币系统运作的人（包括用户），就是网络中的一个个节点，节点彼此等权，没有中心，相互之间连接完全自由，各自保存着完全一致的比特币账本，运行着遵循相同规则的比特币秩序。任何人都可以加入比特币网络，新加入比特币网络的节点，向原有的节点要一份比特币账本。</strong></p></blockquote><p>如果用比特币付款，使用者需要向比特币网络广播付款信息（“广播”指比特币网络中多个节点发送付款信息），而收到信息的节点验证网络会继续广播，一传十，十传百，付款信息由此会传遍全网，最后会被某一位记账着记入区块链的账本当中。</p><img src="https://i.loli.net/2020/11/06/L5kdVmXIyutSw9W.jpg" alt="Bitcoin广播.jpg" style="zoom: 67%;" /><p>问题来了，<strong>为什么会有人来记比特币的账呢？如果谁都可以记账，那么以谁记得账为主呢？并且在这个过程中如何确保账本的真实性呢及比特币又是怎么发行出来的呢？</strong></p><h3 id="3-2-谁来记账"><a href="#3-2-谁来记账" class="headerlink" title="3.2 谁来记账"></a>3.2 谁来记账</h3><p>比特币规定，记账者是有奖励的，一部分奖励是<strong>账单中用户出的手续费</strong>，手续费也是以比特币支付的，因为手续费由客户自己定，可高可低，如果给的高，记账者就倾向于先记这笔手续高的帐。而另一部分的奖励则是<strong>区块的奖励</strong>，每打包一定的区块，就会获得一定的区块奖励。</p><h4 id="3-2-1-区块奖励"><a href="#3-2-1-区块奖励" class="headerlink" title="3.2.1 区块奖励"></a>3.2.1 区块奖励</h4><p>按照比特币的规则，假设区块奖励最初为50个比特币，每出210000个区块后，奖励减半，差不多会每四年减半一次。<strong>区块奖励一方面调动了大家去记账，另一方面也完成了比特币的发行。</strong>因此，按照上述的规则，如果通过这个式子来计算比特币的总量，就是<code>210000*50*(1+1/2+1/4+...)</code>，即总共有21000000个。<strong>而区块奖励和手续费是记账者按照比特币的规则自己记给自己的。</strong></p><p>这么丰厚的奖励，大家肯定都会抢着去记账，那么在这种情况下，以谁的账本为准呢？</p><h3 id="3-3-基准账本"><a href="#3-3-基准账本" class="headerlink" title="3.3 基准账本"></a>3.3 基准账本</h3><p><strong>比特币中有个最长连原则，即谁的区块链账本最长，就会以谁的账本为准。因为制造区块需要进行大量的运算，所以最长链实际上就是凝聚着最大工作量的链。</strong></p><blockquote><p>可以说明，<strong>最长链也就是最新的账本，记录着最多的账单</strong></p></blockquote><p>记账者会把账单收集起来（记账者会先验证账单真伪，来去验证付款者有没有足够的币进行支付），而后打包成一个区块，这个区块由<strong>区块头</strong>和<strong>区块体</strong>组成，记账者换上不同的随机数，对区块头进行哈希运算，得到区块头的哈希值后。<strong>因为算出的哈希值是由随机数生成的，在比特币的规则里，谁先能试出小于难度目标的哈希值，谁就能够把其算出的哈希值所对应的区块，加在区块链上，再广播给别人。</strong>这个时候，这个记账者的链就更长了，在大家验证了他的账单没有错误后，就会以他的区块账本作为基准，并继续广播该区块至全网。</p><blockquote><p>表明以该区块为准的方式，就是将该区块头的哈希值纳入到自己要计算的下一个区块头中。</p></blockquote><img src="https://pic.downk.cc/item/5fa53da21cd1bbb86bb1adda.png" style="zoom: 50%;" /><center>区块链数据结构</center><h4 id="3-3-1-区块头与区块体的关系"><a href="#3-3-1-区块头与区块体的关系" class="headerlink" title="3.3.1 区块头与区块体的关系"></a>3.3.1 区块头与区块体的关系</h4><ul><li><p><strong>区块体：</strong>记录了具体的账单，包括记账者自己所得区块奖励和手续费的账单。</p></li><li><p><strong>区块头：</strong>相当于对应区块的身份信息，里面有版本号、上一个区块头的哈希值、时间戳、难度目标，以及随机数，同时还有一个<strong>Merkle树根哈希值</strong>，<strong>Merkle树根哈希值</strong>是由区块体里的账单经过一系列的哈希运算求出来的，其能相当于区块体里那些账单的摘要信息，<strong>只要账单稍有变化，Merkle树根的哈希值就会大不相同；同样，只要区块头稍有变化，区块头的哈希值也会大不相同</strong></p></li><li><p><strong>总结：</strong>可以看到，区块通过Merkle树根哈希值，将区块体和区块头紧密联系在了一起，账单无法篡改；而区块头的哈希值前后衔接，又能保证了区块链环环相扣，无法篡改。</p></li></ul><img src="https://pic.downk.cc/item/5fa53a6c1cd1bbb86bb0edbb.png" style="zoom: 50%;" /><h4 id="3-3-2-哈希运算与哈希值"><a href="#3-3-2-哈希运算与哈希值" class="headerlink" title="3.3.2 哈希运算与哈希值"></a>3.3.2 哈希运算与哈希值</h4><p>你可能会问到，为什么要使用哈希运算来代表这些账单呢，并且为什么账单变化后，其哈希值就会变化呢？</p><p>首先，我们先来介绍下什么是哈希算法：</p><h5 id="①-哈希算法"><a href="#①-哈希算法" class="headerlink" title="① 哈希算法"></a>① 哈希算法</h5><p>​    哈希算法又被称为摘要算法，输入任何的数据，经过哈希运算后，都会得到一个固定长度的输出值，我们将其作为该输入数据的哈希值，<strong>而特定的输入数据它的哈希值是唯一并且确定的。</strong></p><blockquote><p>为什么呢？百度搜索哈希运算了解下哈希与散列之间的关系吧~</p></blockquote><h5 id="②-哈希运算的特点"><a href="#②-哈希运算的特点" class="headerlink" title="② 哈希运算的特点"></a>② 哈希运算的特点</h5><ol><li>哈希运算的结果，效果与生成随机数差不多，但是只要你的输入数据有一点点变动，其对应的哈希值都会发生变化。</li><li>哈希运算不可逆，输入数据后能很快算出它的哈希值，但是给出哈希值，没有办法反推它的输入数据<strong>【哈希冲突】</strong>，而这在逻辑上也是行不通的，因为你输入的数据是无限的，但是哈希值是有限的，<strong>而一个哈希值却有可能对应着多个输入数据</strong>【依旧是散列函数的锅orz】</li></ol><h5 id="③-比特币中的哈希运算"><a href="#③-比特币中的哈希运算" class="headerlink" title="③ 比特币中的哈希运算"></a>③ 比特币中的哈希运算</h5><p>哈希运算和哈希值有多种类型，在争夺比特币记账权时算的哈希值是<code>256位</code>的二进制数。那么按照比特币的规则，区块头的哈希值必须小于难度目标，所以记账者在求解哈希值是要算的最大可能数为<code>2^256</code><strong>【地址值的每一位为0或1】</strong>，而平均试验的次数则为<code>2^256/(难度目标)</code>。</p><p><img src="https://pic.downk.cc/item/5fa53a6c1cd1bbb86bb0edbe.png"></p><center>哈希加密示意图</center><p>由二进制的运算我们知道，算出的哈希值如果前面的0越多，则说明数越小，那么我们在计算的时候让勤勉若干数位为0不就好了吗？道理很清晰，但是如果能这么的轻易算出来，也就不会有当下的“矿工难😐”了。</p><p>前面我们说过，算出哈希值就像是算出随机数一样，以前面100位都是0为例，一次试出前面100位都为0的概率为<code>(1/2)^100</code>，如果想增大试出来的概率就只能进行更多的哈希运算。注意，因为全世界的矿工如果想获得比特币的奖励就都会加入到挖矿的网络中，共同收集账单，打包成区块，进行哈希运算，那么全世界则总共需要计算<code>2^100</code>次才能有一次机会</p><blockquote><p>不同人打包的区块也会存在差异，而因为打包的区块中的账单不一样，会导致生成的Merkle哈希值也不同，即使不同的人输入的随机数是一样的，可是经过散列函数运算得到的哈希值也会存在差异。这样就避免了大家出现重复计算的情况，<strong>也保证全世界平均计算2^100次后，才能算出一位前100位都为0的哈希值</strong></p></blockquote><p>而谁先算出来这一个哈希值，他就会立马将该哈希值对应的区块广播出去，在全网一起接收到这个区块，确认无误后，就会继续广播这个区块，并以此为准，继续收集账单运算，去争夺下一个区块的记账权。</p><p><strong>区块链就这样在大家的齐心协力下不断延长，全网的节点都有一份相同并且实时更新的区块链账本。这其中的验证、广播、记账等过程，都是由各个节点的比特币规则自动执行的。</strong></p><h3 id="3-4-挖矿⛏"><a href="#3-4-挖矿⛏" class="headerlink" title="3.4 挖矿⛏"></a>3.4 挖矿⛏</h3><blockquote><p>前面说的关于试出哈希值并获得记账权和比特币奖励的行为，江湖上称其为<strong>挖矿</strong>，而专门进行这种计算的机器，则被称为<strong>“矿机”</strong>，如果你参与到挖矿中，你就是<strong>矿工</strong>，而在记账过程中所需的手续费，就是<strong>矿工费</strong></p></blockquote><p>那么，至于在求解相关哈希值的难度目标是多少，则是由比特币的程序在每隔2016个区块，就会自动调节一次的，其调节是根据这2016个区块的出块速度和之前的难度目标来去反推全网的算力，再根据全网算力来设置一个合适的难度目标，让全网每<strong>平均10分钟</strong>能出一个块。</p><p>这种出块方式的制定，说明了<strong>谁的算力强，谁能在单位时间内计算次数多，谁就能更大的概率试出符合要求的哈希值，获得记账权和比特币的奖励。这种共识机制被称为工作量整明（PoW）</strong>。而在工作量证明的机制下，挖矿需要耗费巨大的电力。</p><p><img src="https://pic.downk.cc/item/5fa538de1cd1bbb86bb09a16.jpg"></p><p>基于此，全世界的矿工都会去寻找便宜又大的电力，修建矿场，制造矿机，导致了全网目前的算力是十分高的。而由于全网的算力很高，挖矿的难度很大，单人行动压根不可能挖的到矿，于是大家把算力集中到一个个矿池中，矿池更容易挖到矿，最后再按照各自贡献的算力大小相应分配收益。</p><img src="https://pic.downk.cc/item/5fa53bec1cd1bbb86bb14db8.jpg" style="zoom:67%;" /><center>工作量证明机制示意图</center><p>可以看出，<strong>比特币的区块链账本是传遍全网、保存于全网的，并且都经过全网验证过的，而区块链通过Merkle树根的哈希值和区块头的哈希值环环相扣，累积了巨大的工作量，账本真实可靠，无法篡改且无法销毁。因此比特币在流通时用于转账或支付的条件下，只需要发出一条信息就可以了，不需要经过任何的中间机构，便可以在全世界流通。</strong></p><blockquote><p><strong>提示</strong>：听起来让人兴奋，但是目前能去试出正确的哈希值是十分困难的，还是以哈希值前100位为0作为例子，算出正确的哈希值需要试上2^100次才能有一次机会【所以单人矿工很难成功】。</p><p>而正是因为即使全世界的超级计算机算力往上翻许多倍，一起算上若干年，也不可能把这256位哈希值算全，由此保证了比特币的安全性。</p></blockquote><h2 id="四-比特币的数字签名与安全问题"><a href="#四-比特币的数字签名与安全问题" class="headerlink" title="四 比特币的数字签名与安全问题"></a>四 比特币的数字签名与安全问题</h2><blockquote><p>我们在使用支付宝的时候，输入密码或其他方式便能轻松转账；那么对于比特币来说，怎么才能证明支付信息是由你发出的，没有被篡改过的呢？换句话说，就是怎么能确保你的币由你一人控制，这就涉及到了数字签名的原理。</p></blockquote><h3 id="4-1-比特币账户"><a href="#4-1-比特币账户" class="headerlink" title="4.1 比特币账户"></a>4.1 比特币账户</h3><p><strong>与银行开户不同，比特币的账户不需要申请注册，是随机生成的。</strong>首先，我们可以随机生成一个私钥【也为256位二进制数】。可以假想成抛<code>256</code>次硬币，正面<code>1</code>，反面<code>0</code>，这样也能确定你的账户私钥【bushi🙃】。然后再用椭圆曲线数字签名算法<strong>【ECDSA】</strong>对私钥进行运算，生成公钥，之后再对公钥进行哈希运算，就得到了地址。私钥生成公钥的过程也是不可逆的，从公钥无法反推私钥，也可以试试，最多<code>2^256</code>次（小声）。<strong>用椭圆曲线数字签名算法生成的公钥可以配合私钥，进行非对称加密。</strong></p><img src="https://pic.downk.cc/item/5fa53a1a1cd1bbb86bb0dc38.png" style="zoom: 33%;" /><center>数字签名示意图</center><h3 id="4-2-非对称加密"><a href="#4-2-非对称加密" class="headerlink" title="4.2 非对称加密"></a>4.2 非对称加密</h3><h4 id="4-2-1-对称加密"><a href="#4-2-1-对称加密" class="headerlink" title="4.2.1 对称加密"></a>4.2.1 对称加密</h4><p>对称加密中，加密解密的密钥都是一样的，比如说有一条信息为1234567，我们用密钥9对其进行加密，<code>1234567*9 = 11111103</code>,而<code>11111103/9 = 1234567</code>就得到了密文【实际上是比这个复杂的😶】但是在非对称加密中，加密解密的密钥是互不相同的。</p><h4 id="4-2-2-非对称加密"><a href="#4-2-2-非对称加密" class="headerlink" title="4.2.2 非对称加密"></a>4.2.2 非对称加密</h4><p>比特币里，私钥用来加密信息，而公钥用来解密信息。<strong>比特币里没有人的概念，只有地址的概念，所提到的你拥有多少币实际上说的是你的地址上有多少币。</strong>而只有你的私钥才能够控制你的币，因此在比特币中，公钥和地址都可以公开，但是私钥是绝对不可以的。</p><p><img src="https://pic.downk.cc/item/5fa53b1c1cd1bbb86bb11427.png"></p><center>非对称加密RSA算法简化示意图</center><h4 id="4-2-3-举个栗子"><a href="#4-2-3-举个栗子" class="headerlink" title="4.2.3 举个栗子"></a>4.2.3 举个栗子</h4><p>小明给小强一个比特币，小明的比特币地址为A，小强的比特币地址为B，小明要将<strong>“A地址给B地址一个比特币”</strong>这条账单进行哈希运算，得到的哈希值再用A地址的私钥加密，加密后得到的<strong>“A地址给B地址一个比特币”</strong>和小明的公钥一起广播出去。而收到该信息的人会进行检查，计算公钥得到地址，判断该信息中公钥和地址是否对应，再用公钥把密文解密为哈希值，同时也对账单进行哈希运算，得到另一个哈希值。这个时候比较一下两个哈希值，如果哈希值相同，则能说明这条信息确实是地址的主人发出来的，没有经过篡改的。</p><p><strong>这咯有一个转账哈希值的图片</strong></p><p>如果有人伪造了“A地址给B地址一个比特币”的消息，首先，伪造信息里A的公钥不能变，因为公钥可以推算出地址，如果公钥变了推算出来的地址就会和A不同，别人立刻就能发现这是假的消息。其次，因为伪造者没有A地址的私钥，因此他伪造的账单的哈希值的密文肯定和真是密文是不同的，如果这个时候别人用公钥解密，解密出的哈希值也一定不同于用A账单算出来哈希值，那么这条消息就十分不真实。</p><p>还有一种情况是信息内容遭到了篡改，比如把信息篡改成了“A地址给B地址<strong>十个</strong>比特币”，这种情况下，账单发生了变化，而公钥和原账单的哈希值密文都没有变，分析一遍，也容易发现篡改的信息会导致两个哈希值存在差异。</p><p>可以看出，<strong>私钥就像地址对应的一支独一无二的签字笔，能签出独一无二的签名，来代表你是对应地址的主人，我们也把这个过程称为数字签名。</strong>只有你用私钥签名了，这个地址的付款信息才会被别人接受。而如果你丢失了私钥，尽管你的区块链账本依旧记录你的地址有多少比特币，你也不能使用它。<strong>如果别人知道了你的私钥，他就能够转走你地址上的币。</strong>比特币交易中公平点也体现在这，它只认你的地址不认你的人，所以私钥的安全性需要十分看重【历史上有位男子中了比特币大奖，开心地把他的获奖的私钥展示给直播前的大家，一刹那，这个账户有的比特币全部被转走了🤣】</p><h3 id="4-3-比特币“钱包“"><a href="#4-3-比特币“钱包“" class="headerlink" title="4.3 比特币“钱包“"></a>4.3 比特币“钱包“</h3><p>私钥不像登陆时需要输入的密码，它本身是可以完全不触网的，完全可以在离线状态下在付款信息上签名【这个数字签名就是我们说的<strong>私钥加密付款信息的哈希值</strong>】，然后再把付款信息和签名信息发送到网上广播即可，别人也没有办法从你的签名反推私钥【原理详情了解<strong>椭圆曲线数字签名算法</strong>】。</p><p><strong>比特币的“钱包”</strong>，存的不是币而是私钥，所谓的<strong>”冷钱包“</strong>就是不联网的钱包，能够有效防御黑客盗取私钥。这个过程中起到实际作用是授权调用私钥进行签名，但并非是私钥本身。</p><h3 id="4-4-地址信息的构成"><a href="#4-4-地址信息的构成" class="headerlink" title="4.4 地址信息的构成"></a>4.4 地址信息的构成</h3><p>因为地址之类的信息用二进制表示的话会非常长，因此在比特币中采用了Base58的编码方式，即将二进制数字换成58进制数表示，所以我们通常看到的地址是一串大小写字母和数字的组合。</p><img src="https://pic.downk.cc/item/5fa542ee1cd1bbb86bb2c32f.png" style="zoom:50%;" /><center>区块链运行机制</center><p>为了便于记忆及管理私钥，开发者们又设计出了助记词，助记词一般是12个单词，出自有2048个常见单词的词库，每个助记词对应这一个随机生成的种子，其能够作为种子的一种易于记忆的形式。种子能够生成一个主私钥，主私钥可以通过确定的、不可逆性的算法，再生成多个币种的子私钥，子私钥又可以继续生成孙私钥…通过这种方式，用一组助记词就能够统一管理多个币种的多个私钥，省去了很多麻烦，这样的加密货币的钱包，我们将其称之为<strong>HD钱包（分层确定性钱包）。</strong></p><blockquote><p>助记词虽然只有12个词，但是2048^12 ≈ 5.4*(10^39)，希望能随机输入助记词试出一个有币的地址，概率小到几乎不可能。</p></blockquote><h2 id="五-比特币的分叉与演变"><a href="#五-比特币的分叉与演变" class="headerlink" title="五 比特币的分叉与演变"></a>五 比特币的分叉与演变</h2><h3 id="5-1-最长链原则"><a href="#5-1-最长链原则" class="headerlink" title="5.1 最长链原则"></a>5.1 最长链原则</h3><blockquote><p><strong>在最长链原则下，比特币网络中的节点来去自由，不需要了解其他节点的状态，也不需要任何仲裁机构或者管理中心，网络出现延迟或者暂时中断也没有关系。只需要遵循最长链原则，就能够让全世界对你的账本达成共识。</strong></p><p><strong>因为最长链可以说是凝聚着全世间所有算力的巨大工作量，并且还在不断地延长，想要重新制造出一条最长链代替原链来修改信息，困难且不可能【算力≥51%当我没说】。这也就维护了区块链的不可篡改性</strong></p><p><strong>根据博弈关系，节点也会接受最长链，竞相地去延长最长链，尽力广播最长链上地区块。所以比特币系统从第一个区块挖出开始，就再以难以停止，会一直自发运行下去，每时每刻记录着全球用户的账单。</strong></p></blockquote><p>以下依旧以A、B为例</p><h3 id="5-2-AB同时挖出"><a href="#5-2-AB同时挖出" class="headerlink" title="5.2 AB同时挖出"></a>5.2 AB同时挖出</h3><p>这时A、B的区块链账本都是一样长，有人先收到A的区块就会先以A链为准，同理，先收到B的区块会先以B链为准，可以看到A、B的区块链都有人坚持，这个时候区块链就会短暂的分叉成两条一样长的链，直到有一方的队伍又挖出了新块，这个时候另一方看到对方的链更长了，就会马上转而去支持对方，以对方的账本为准继续挖矿。这样就能够保证有一条最长的链作为大家公认的账本。</p><blockquote><p>只要全网50％以上的算力是诚实的，诚实的算力就能生成一条最长链，可以放心地以这条链为准。</p></blockquote><h3 id="5-3-”双花“"><a href="#5-3-”双花“" class="headerlink" title="5.3 ”双花“"></a>5.3 ”双花“</h3><p>欸，那如果有人掌握了大于50%的算力该怎么办呢？那他不就可以独自生成最长的链，然后胡作非为了嘛？</p><p>实际上，因为区块链账本是要去接收各节点验证的，作恶者如果违反规则、作假账，他的账本就会遭到一致的拒绝，更不会被继续传播，最长链原则是建立在真实基础上的。因为作恶者没有别人的私钥、花不了别人的钱，也破坏不了比特币的规则，<strong>那么他能干的坏事，只有”双花“啦~</strong></p><p>双花是怎么进行的呢？假如说作恶者有10个比特币，他把这10个比特币给商家，买到了商品，那么这个付款信息就会被记录到区块链里。<strong>正常情况下，在同一条链上，是不可能进行双花的，因为花出去的比特币会被记录在区块链上，用过就没有了。</strong>但是，作恶者他拥有全网过半的算力，那么他在记录他付款信息的区块前面，重新开始挖矿，就能够制造出一条更长的链，而这条链他没有违反比特币规则或者做”假账“，所以大家转而会以这条链作为基准（<strong>比特币的程序会根据最长链原则自动切换账本</strong>）。但是在这条链里，作恶者略去了之前的付款记录，把刚才花掉的10个比特币又花了一次，或者转移到自己的另一个地址上，通过这种方式，他原来的付款记录就失效了，那么商家就损失了商品并且也没拿到钱。</p><p><img src="https://pic.downk.cc/item/5fa5435e1cd1bbb86bb2dce7.jpg"></p><p><strong>作恶者也能够先制造出双花攻击的长链但不广播出去，同时在原链上付款买东西，等到拿到商品之后再放出攻击链逆转原链，这样就能撤销自己的付款。</strong></p><p>双花也有可能在作恶者算力不到50％的情况下发生，作恶者运气好的话，有可能多出几个区块，在短时间内领先原链，但是这样做，一旦跑不过原链，自己挖出的区块就没有人承认，白费算力和电力。【从这里可以看出，双花大概率赔了夫人又折兵，作恶者被发现后一定会遭到一致的谴责和惩罚的⛔】</p><h4 id="5-3-1-其他人的链呢"><a href="#5-3-1-其他人的链呢" class="headerlink" title="5.3.1 其他人的链呢"></a>5.3.1 其他人的链呢</h4><p>双花只能撤销掉作恶者自己的付款，不会破坏整个比特币系统，因为如果作恶者在他制造出的最长链里，删掉了原链上其他人的账单，也只需要把这些账单重新打包进区块即可。当网络出现严重延迟或者中断时，区块可能同步不及时，通信不畅的节点各自挖矿为政，这样区块链就有可能会发生分叉。如果作恶者发出两笔相冲突的双花账单后，也有可能被不同的节点打包造成双花，当这些账单被打包进区块后，后续确认的区块越多，双花想要逆转该链就更加困难。所以当用户在进行大额交易时，收款方一般需要多等几个区块才能确认。但是，如果是小额支付（如向朋友转账），不需要等到账单被打包进区块，等上几秒让账单传遍全网就可以了。<strong>正常情况下，如果节点收到两笔相冲突的双花账单，那么节点会打包先收到的账单。</strong></p><h4 id="5-3-2-现实原则"><a href="#5-3-2-现实原则" class="headerlink" title="5.3.2 现实原则"></a>5.3.2 现实原则</h4><p>比特币允许接受与原链上账单有冲突的双花攻击链，这是因为现实环境是非常复杂的，如果网络可能出现延迟或中断，不同节点获取信息的先后顺序可能不同，比如A收到的攻击链，可能对于B来说就是原链，<strong>如果拒绝攻击链，可能造成区块链分裂而无法统一，甚至作恶者还能够利用网络延迟中断，故意发出两笔有冲突的双花账单，而一旦账单分别被不同的节点打包时，节点互不接受对方的账单，作恶者就可以恶意制造分裂。</strong></p><p>而只要以最长链为准的情况下，节点不用知道其他节点的账本情况，不需要管其他节点的工作状态，也不需要任何仲裁机构，只需要做好自己的帐，遵从最长链原则，全网账本就能够自动达成统一，网络延迟中断也只可能导致新挖出的少数区块同步不及时，而之前的账本还是会保持一致。</p><blockquote><p><strong>这也是比特币设计上的亮点，通过最长链原则，使全世界互不相识的人，在复杂的环境里齐心协力，达成了一致。</strong></p></blockquote><h3 id="5-4-BCH（比特币现金）与BTC（比特币）"><a href="#5-4-BCH（比特币现金）与BTC（比特币）" class="headerlink" title="5.4 BCH（比特币现金）与BTC（比特币）"></a>5.4 BCH（比特币现金）与BTC（比特币）</h3><p>如前面所说，<strong>如果不同的人对记账有不同做法，就会引起区块链的分叉，分叉前的账本是完全一样的，但分叉后的账本就会随着记账方式的变化而变化。</strong>如果只是因为同时出块造成分叉，在遵循最长链原则的情况下，丢弃一条链，保留一条链，这样就会产生一些难以调和的矛盾，双方无法达成共识，于是各记各的帐，这时候就会产生两条并行发展的两条链，而比特币也就会分裂成了两个版本。<strong>BHC就是这么被分出来的</strong></p><ul><li><strong>BCH</strong></li></ul><blockquote><p>致力于实现白皮书中”电子现金“的够项，推进零确认支付的发展，试图在BCH上引入更多的拓展功能</p></blockquote><ul><li><strong>BTC</strong></li></ul><blockquote><p>BTC转型为”数字黄金“，因此很多人认为BCH才是真正的比特币</p></blockquote><p><strong>但这些都不会影响比特币的核心规则，这就是共识的力量</strong></p><h3 id="5-5-Core与大区块派"><a href="#5-5-Core与大区块派" class="headerlink" title="5.5 Core与大区块派"></a>5.5 Core与大区块派</h3><blockquote><p>比特币起初区块上限为1M，随着用户增多，1M明显不够用了，那么如何扩容呢？</p></blockquote><h4 id="Core【接替中本聪继续开发】"><a href="#Core【接替中本聪继续开发】" class="headerlink" title="Core【接替中本聪继续开发】"></a><strong>Core【接替中本聪继续开发】</strong></h4><ul><li><strong>隔离见证</strong></li></ul><blockquote><p>把签名信息直接移出区块，间接扩容</p></blockquote><ul><li><strong>闪电网络</strong></li></ul><blockquote><p>相当于在主干道上架桥分流交通压力</p></blockquote><ul><li><strong>Core派坚持1M上限不能改，指责大区块派扩大区块会阻碍个人运行比特币的全节点，这样会影响比特币的去中心化，造成比特币社区分裂</strong></li></ul><blockquote><p><strong>全节点保存着比特币的完整账本，进行验证及广播，是比特币网络运行的基础，有些全节点同时也在挖矿，称为挖矿节点；与全节点相对应的是数量更多的轻节点，轻节点只保存与自己相关的信息，依靠全节点运行，普通用户用的轻量级比特币钱包就是轻节点</strong></p></blockquote><h4 id="大区块派"><a href="#大区块派" class="headerlink" title="大区块派"></a><strong>大区块派</strong></h4><ul><li><strong>扩大区块</strong></li></ul><blockquote><p>相当于直接扩宽道路</p></blockquote><ul><li><strong>大区块派指责Core派违背了中本聪隐退前提出过的直接扩大区块的扩容方案，同时也指责了隔离见证和闪电网络扩容效果差，安全性不好</strong></li></ul><p>因此，扩大了区块的BCH和BTC分道扬镳，以分叉的方式解决了分歧，而比特币现金原先称为BCC，后更名为BCH。</p><h3 id="5-6-比特币的发展"><a href="#5-6-比特币的发展" class="headerlink" title="5.6 比特币的发展"></a>5.6 比特币的发展</h3><p>之后，CSW【澳本聪】提出了一系列的激进主张，称要继续扩大BCH的区块，乃至扩展成无限区块，并且索斯BCH的底层协议，做出符合中本聪愿景的比特币，最终<strong>BSV</strong>又从<strong>BCH</strong>中发展了出来。</p><p><strong>分叉是比特币自我演变的途径。</strong>如果比特币社区成员一致改变某规则，比特币就相当于进行了一次升级；而如果大家都不更改规则，比特币就不会发生变化；相对应的如果一部分改变规则，比特币就会发生<strong>交叉</strong>。理论上，只要有算力，分叉就能够随便进行，但如果没人买没人卖，那分叉币就相当于自娱自乐，没有经济价值。<strong>市值就是衡量分叉币认可的指标。</strong></p><p><strong>现在比特币的三大分支BTC、BCH、BSV，分别代表了谨慎保守、温和渐进、激进发展三个方面，探索不同的道路，也为比特币保留了更多生命的火种。</strong></p><p>谁是对的，谁就能得到更多人的支持，就会有更大的市值，这可能就是区块链的魅力所在。</p><blockquote><p><strong>行动守规则，遇事要商量，谈不拢咱就分叉，用市值来投票。谁做得好，就能得到更多的支持，市值自然也会上涨。</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;比特币是什么&quot;&gt;&lt;a href=&quot;#比特币是什么&quot; class=&quot;headerlink&quot; title=&quot;比特币是什么&quot;&gt;&lt;/a&gt;比特币是什么&lt;/h1&gt;&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="区块链" scheme="https://warmchay.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="区块链" scheme="https://warmchay.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>学习记录--字符串+线索二叉树构建</title>
    <link href="https://warmchay.github.io/2021/03/16/%E5%AD%97%E7%AC%A6%E4%B8%B2+%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://warmchay.github.io/2021/03/16/%E5%AD%97%E7%AC%A6%E4%B8%B2+%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-03-16T01:24:27.625Z</published>
    <updated>2021-03-16T01:24:27.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-字符串"><a href="#一-字符串" class="headerlink" title="一 字符串"></a>一 字符串</h2><p>今天的上机有几道题提醒了我可能我关于高精度和字符串掌握程度不熟，所以再来回顾一遍</p><h3 id="1-1-高精度存值"><a href="#1-1-高精度存值" class="headerlink" title="1.1 高精度存值"></a>1.1 高精度存值</h3><p>这个使输入一个阶乘的值然后用数组来保存，一开始我的方法是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>, count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=str.length()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)&#123;</span><br><span class="line">    sum += (str[i]-<span class="string">&#x27;0&#x27;</span>)*count;</span><br><span class="line">    count *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum;</span><br></pre></td></tr></table></figure><blockquote><p>问题在于：依旧相当于直接输出大的值，改善的点是我能输出多位的值了，思路就是错在输出了</p></blockquote><p>所以，正确的方法应该是用数组去存它们的一个个位的值，这个时候我的问题在于怎么一位一位</p><p>地把数存进去，使用的算法是这样的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">/*n!*/</span></span><br><span class="line">    <span class="keyword">int</span> a[MAX], tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">cin</span> = <span class="number">0</span>;<span class="comment">/*每一轮重置一次进位数*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;MAX; ++j)&#123;</span><br><span class="line">            tmp = a[j]+<span class="built_in">cin</span>;<span class="comment">/*把原有的数加上进位*/</span></span><br><span class="line">            <span class="built_in">cin</span> = a[j]/<span class="number">10</span>;</span><br><span class="line">            a[j] = tmp%<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i, sum = <span class="number">0</span>, count = <span class="number">1</span>;<span class="comment">/*记录最大位在哪*/</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i<span class="number">-1</span>; j&gt;=<span class="number">0</span>; --j)&#123;</span><br><span class="line">        sum += a[j]*count;</span><br><span class="line">        count *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-字符串的一些函数操作"><a href="#1-2-字符串的一些函数操作" class="headerlink" title="1.2 字符串的一些函数操作"></a>1.2 字符串的一些函数操作</h3><h4 id="1-2-1-含有空格的字符串输入"><a href="#1-2-1-含有空格的字符串输入" class="headerlink" title="1.2.1 含有空格的字符串输入"></a>1.2.1 含有空格的字符串输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getline(<span class="built_in">cin</span>, str);</span><br></pre></td></tr></table></figure><h4 id="1-2-2-字符串的删除与拼接"><a href="#1-2-2-字符串的删除与拼接" class="headerlink" title="1.2.2 字符串的删除与拼接"></a>1.2.2 字符串的删除与拼接</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1, s2;<span class="comment">//s1原串，s2子串</span></span><br><span class="line"><span class="keyword">while</span>(s1.find(s2) &lt; s1.length())&#123;</span><br><span class="line">s1 = s.erase(s1.find(s2), s2.length());<span class="comment">/*erase函数(首地址，删除的长度)*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-3-字符串的公共前缀"><a href="#1-2-3-字符串的公共前缀" class="headerlink" title="1.2.3 字符串的公共前缀"></a>1.2.3 字符串的公共前缀</h4><p>最大问题在输入怎么输入，一般要求输入在一行内如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global glossory</span><br></pre></td></tr></table></figure><p>我是这么输入的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1, s2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1;</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s2;</span><br><span class="line"><span class="comment">/*这样也能达成上述输入的效果，然后处理的时候视为两个字符串处理就好啦~*/</span></span><br></pre></td></tr></table></figure><h2 id="二-线索二叉树"><a href="#二-线索二叉树" class="headerlink" title="二 线索二叉树"></a>二 线索二叉树</h2><blockquote><p>这个是复习的时候发现没听懂，所以记一下防止期末又忘了</p></blockquote><p>二叉树的核心在于<strong>线索化</strong>，其作用在于把一颗树转化为双向链表，这样能够判断其前缀和后缀是什么。</p><p>其结构体定义为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span>&#123;</span></span><br><span class="line">    ElemType data;<span class="comment">//结点数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span><span class="comment">//左右孩子的指针</span></span><br><span class="line">    <span class="keyword">int</span> ltag, rtag;<span class="comment">//左右孩子的标志</span></span><br><span class="line">&#125;BiThrNode, *BiThrTree;</span><br></pre></td></tr></table></figure><p>在我的理解中，难点在于ltag（rtag）是用来做什么的，因为这个我看了很多书都没能理解，在b站上找了懒猫老师的课，听了一边下来感觉大概清楚线索二叉树的线索化是怎么实现的。</p><blockquote><p>以下仅基于自己的理解，给自己复习的，如果有朋友看，可能你会看不懂qwq</p></blockquote><h3 id="①-空结点个数"><a href="#①-空结点个数" class="headerlink" title="① 空结点个数"></a>① 空结点个数</h3><p>一开始我们会按照前序、中序后者后序的组合（不能是中序+后序）建立好了一棵二叉树，但是我们在判断一个结点是否有子树时，会设置它的<code>lchild、rchild</code>为<code>NULL</code>，这样会使很多结点浪费掉了，做个计算</p><p>设这颗二叉树结点个数为<code>n</code>，它有<code>n-1</code>条边，那么空结点数一共为<br>$$<br>2*n-(n-1) = n+1<br>$$<br>怎么理解呢？一个结点能引出两条边，而树的边两端真正连有结点的一共为<code>n-1</code>条，所以拿<code>2*n-(n-1)</code>就是空结点的个数<br>从<code>n+1</code>看来这个浪费的程度有点大，那么如何利用他们呢？</p><h3 id="②-前缀、后缀"><a href="#②-前缀、后缀" class="headerlink" title="② 前缀、后缀"></a>② 前缀、后缀</h3><p>因为我们在建树的过程中，是把原有的顺序拆开的，比如说前序为<code>ABCDEF</code>,中序为<code>CBDAEF</code>,这样搭建出来的树<code>A</code>为根结点，其左孩子为<code>B</code> ，右孩子为 <code>E</code>，但是在中序遍历中，其前缀不为B，后缀为E，也就说明A两端是有子结点的，一般这种情况我们设A的<code>ltag = 0, rtag = 0</code>，表示其有左右孩子，但不一定为其前缀后者后缀形式。</p><p>相反的，我们那这棵树的<code>C</code>作为另一种表示，C没有前缀，C的后缀为B，但我们知道，它没有左孩子与右孩子，这个时候我们把它的<code>lchild、rchild</code>指向其前驱和后继。所以在这里我们设置其<code>ltag = 1, rtag = 1</code>，表示其没有左右孩子，这时它的左右孩子的地址指向的是其在某种遍历方式里的前驱和后继。</p><p>所以<code>ltag、rtag</code>可以看作是一种判断符，分为<code>1/0</code>的情况</p><h3 id="₯③-保存状态结点–pre"><a href="#₯③-保存状态结点–pre" class="headerlink" title="₯③ 保存状态结点–pre"></a>₯③ 保存状态结点–pre</h3><p>那么如何保存其左右结点呢？</p><p>我们先来看整个遍历的代码吧，这个是实现创建线索二叉树【中序遍历】的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThreading</span><span class="params">(BiThrTree p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BiThrTree pre;<span class="comment">//设置静态变量，让pre在每一次遍历中都能察觉到</span></span><br><span class="line"><span class="keyword">if</span>(p == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">InThreding(p-&gt;lchild);<span class="comment">//先递归到左子树最低点</span></span><br><span class="line"><span class="keyword">if</span>(!p-&gt;lchild)&#123;<span class="comment">//如果p没有左孩子</span></span><br><span class="line">p-&gt;ltag = <span class="number">1</span>;<span class="comment">//标志其为线索化的结点，即其左子树为其前驱，不是其真实的左孩子</span></span><br><span class="line">p-&gt;lchild = pre;<span class="comment">//pre为p上一个节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!pre-&gt;rchild)&#123;</span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">pre-&gt;rchild = p;<span class="comment">//开头在创建的过程中pre会经过两遍</span></span><br><span class="line">&#125;</span><br><span class="line">pre = p;</span><br><span class="line">InThreading(p-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式我们就创建好了一颗线索二叉树</p><p>最后，还有主要的是如果我的<code>ltag/rtag = 0</code>呢？那打印的时候我怎么保证遍历到的是其前驱呢？解决办法依旧是不断递归，假如要打印的是前驱</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(BiThrTree t)</span></span>&#123;</span><br><span class="line">BiThrTree p = t-&gt;lchild;<span class="comment">//p指向t的左子树 </span></span><br><span class="line"><span class="keyword">while</span>(p-&gt;ltag != <span class="number">0</span>)&#123;</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;rtag &amp;&amp; p-&gt;rchild != t)&#123;<span class="comment">//防止p指向右孩子出错</span></span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-字符串&quot;&gt;&lt;a href=&quot;#一-字符串&quot; class=&quot;headerlink&quot; title=&quot;一 字符串&quot;&gt;&lt;/a&gt;一 字符串&lt;/h2&gt;&lt;p&gt;今天的上机有几道题提醒了我可能我关于高精度和字符串掌握程度不熟，所以再来回顾一遍&lt;/p&gt;
&lt;h3 id=&quot;1-1-高</summary>
      
    
    
    
    <category term="学习记录仪" scheme="https://warmchay.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%BB%AA/"/>
    
    
    <category term="树" scheme="https://warmchay.github.io/tags/%E6%A0%91/"/>
    
    <category term="字符串" scheme="https://warmchay.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>一致性算法【入门级】</title>
    <link href="https://warmchay.github.io/2021/03/16/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95%E3%80%90%E5%85%A5%E9%97%A8%E7%BA%A7%E3%80%91/"/>
    <id>https://warmchay.github.io/2021/03/16/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95%E3%80%90%E5%85%A5%E9%97%A8%E7%BA%A7%E3%80%91/</id>
    <published>2021-03-16T01:24:27.623Z</published>
    <updated>2021-03-16T01:24:27.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一致性算法（Paxos、Raft、ZAB）"><a href="#一致性算法（Paxos、Raft、ZAB）" class="headerlink" title="一致性算法（Paxos、Raft、ZAB）"></a>一致性算法（Paxos、Raft、ZAB）</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table><thead><tr><th align="left">一 什么是一致性</th><th align="left">1.1 CAP theorem  1.2 一致性模型</th></tr></thead><tbody><tr><td align="left"><strong>二 强一致性算法</strong></td><td align="left"><strong>2.1 Paxos  2.2 Raft  2.3  ZAB</strong></td></tr><tr><td align="left"><strong>三 项目实践</strong></td><td align="left"><strong>3.1 Zookeeper   3.2 etcd</strong></td></tr></tbody></table><h2 id="一-什么是一致性"><a href="#一-什么是一致性" class="headerlink" title="一 什么是一致性"></a>一 什么是一致性</h2><p><img src="https://i.loli.net/2020/11/29/BJrYnVc6iFxmzRb.jpg" alt="什么是一致性.jpg"></p><h3 id="1-1-CAP-Theorem"><a href="#1-1-CAP-Theorem" class="headerlink" title="1.1 CAP Theorem"></a>1.1 CAP Theorem</h3><blockquote><p>对于一个分布式系统，不能同时满足以下三点：</p><ul><li>一致性（Consistency）</li><li>可用性（Availability）</li><li>分区容错性（Partition Tolerance）</li></ul></blockquote><p><img src="https://i.loli.net/2020/11/29/KmxAkNXEdbI2Oc3.jpg" alt="什么是一致性--CAP.jpg"></p><h3 id="1-2-一致性模型"><a href="#1-2-一致性模型" class="headerlink" title="1.2 一致性模型"></a><strong>1.2 一致性模型</strong></h3><ul><li>弱一致性<ul><li>最终一致性【最终你会读到他的】<ul><li>DNS（Domain Name System）</li><li>Gossip（Cassandra通信协议）</li></ul></li></ul></li><li><strong>强一致性【本篇重点】</strong><ul><li>同步</li><li>Paxos</li><li>Raft（multi-paxos）</li><li>ZAB（multi-paxos）</li></ul></li></ul><p>在进行下一步讲解前，咱们先需要明确下问题：</p><blockquote><p><strong>数据不能存在单点上。</strong></p></blockquote><p>分布式系统对<strong>fault tolorence</strong>的一般解决方案为<strong>state machine replication【状态机复制】</strong></p><blockquote><p>状态机复制听起来很玄学，简单理解为：</p><p>state machine可以理解为一个函数，它本身有一个初始状态，加入设置为0，此时如果有一个log（input）进来，让它加5，这个为增加状态，此时它的结束状态是5了；那么这个就是一个state machine；</p><p>而分布式系统希望往这个log上写日志，如：日志1，我加了x值；日志2，我删了x值….。而分布式系统的设计一般为把这些logs   replicate（复制）到其他节点上，保证这些log不仅仅存在单个节点上，而是分布在多个节点上的。</p></blockquote><p>其实我们今天讨论准确的说，应该是<strong>state machine replication</strong>的<strong>共识（consensus）算法</strong></p><p>而paxos其实是一个共识算法。系统的最终一致性，不仅需要达成共识，还会取决于client的行为。</p><h2 id="二-强一致性算法"><a href="#二-强一致性算法" class="headerlink" title="二 强一致性算法"></a>二 强一致性算法</h2><h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><blockquote><p>一致性算法有几个派别构建了现在的强一致性算法使用。</p></blockquote><p><strong>① 主从同步复制</strong></p><ol><li>Master【主节点】接受写请求</li><li>Master复制日志至slave【从节点】</li><li>Master等待，直到所有【所有传给子节点的logs】从库返回</li></ol><p><strong>问题：</strong>一个节点失败，Master阻塞，导致整个集群不可用，虽然保证了一致性，但是可用性却大大降低了。</p><p><strong>② 多数派【目前流行的数据库用的思想】</strong></p><p>其基本想法为：</p><p>每次写都保证写入大于$\frac{N}{2}$，每次都都保证从大于$\frac{N}{2}$个节点中读</p><p><strong>但还是不够，其问题在于：</strong>在并发环境下，多数派无法保证系统的正确性，<strong>所以顺序也是非常重要的</strong></p><p><img src="https://i.loli.net/2020/11/29/tcjIBXoib9YypeO.jpg" alt="强一致--Quorum.jpg"></p><h3 id="2-1-Paxos"><a href="#2-1-Paxos" class="headerlink" title="2.1 Paxos"></a>2.1 Paxos</h3><blockquote><p>前提：为了描述Paxos，<strong>Lamport</strong>[latex发明者]虚拟了一个叫Paxos的希腊城邦，这个岛按照议会民主制的政治模式制定法律，但是没有人愿意将自己的全部时间和精力放在这种事，所以无论是议员、议长或者传递纸条的服务员都不能保证别人需要时一定会出现，也无法承诺批准决议或者传递消息的时间。</p></blockquote><p><strong>分类：</strong></p><ul><li><strong>Basic Paxos</strong></li><li><strong>Multi Paxos</strong></li><li><strong>Fast Paxos</strong></li></ul><h4 id="2-1-1-RPC【Remote-Procedure-Call】"><a href="#2-1-1-RPC【Remote-Procedure-Call】" class="headerlink" title="2.1.1 RPC【Remote Procedure Call】"></a>2.1.1 <a href="%5Bhttps://zh.wikipedia.org/wiki/%E9%81%A0%E7%A8%8B%E9%81%8E%E7%A8%8B%E8%AA%BF%E7%94%A8%5D(https://zh.wikipedia.org/wiki/%E9%81%A0%E7%A8%8B%E9%81%8E%E7%A8%8B%E8%AA%BF%E7%94%A8)">RPC【Remote Procedure Call】</a></h4><blockquote><p>分布式计算中，RPC远程过程调用作为计算机网络通信协议，为一种服务器对客户端的模式【Server-Client】。该协议允许程序员在本地调用另一地址【通常为另一台<strong>开放空间下的</strong>计算机】的功能程序，不需要二次编写具体的函数实现。经典实现是一个通过<strong>发送请求-接受请求</strong>的交互系统。</p><p>如果涉及的软件采用<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B">面向对象编程</a>，那么远程过程调用亦可称作<strong>远程调用</strong>或<strong>远程方法调用</strong>，例：<a href="https://zh.wikipedia.org/wiki/Java_RMI">Java RMI</a>。</p><p>RPC是一种<a href="https://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1">进程间通信</a>的模式，程序分布在不同的<a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4">地址空间</a>里。如果在同一主机里，RPC可以通过不同的<strong>虚拟地址</strong>空间（即便使用相同的物理地址）进行通讯，而在不同的主机间，则通过不同的<strong>物理地址</strong>进行交互。许多技术（常常是不兼容）都是基于这种概念而实现的。</p></blockquote><h5 id="·-信息传递"><a href="#·-信息传递" class="headerlink" title="· 信息传递"></a>· 信息传递</h5><p>一般为Client向Server发出执行若干过程请求，并用Client提供的参数，将结果返回给Client。</p><h5 id="·-具体流程"><a href="#·-具体流程" class="headerlink" title="· 具体流程"></a><strong>· 具体流程</strong></h5><ol><li>客户端调用客户端stub（client stub）。这个调用是在<strong>本地</strong>，并将调用参数push到栈（stack）中。</li></ol><blockquote><p>如果数据量较少，使用寄存器就阔以了</p><p><strong>stub【桩】：<a href="%5Bhttps://zh.wikipedia.org/wiki/%E6%A1%A9_(%E8%AE%A1%E7%AE%97%E6%9C%BA)%5D(https://zh.wikipedia.org/wiki/%E6%A1%A9_(%E8%AE%A1%E7%AE%97%E6%9C%BA)">维基百科–桩</a></strong></p><p><strong>打桩：</strong></p><ol><li><strong>容易扩展的块。</strong>可以为一个宏，一个函数，或者是数个宏，数个函数的组合；起到辅助作用，与一般的代码块相比，桩在并不是固定的只是一个块在这，类似于面向方面编程的横切点，只不过为<strong>显式插入</strong></li><li><strong>√ RPC的代理点。</strong>不真正做事，而是通过PRC或者其他类似的机制由外部完成真正的工作。</li></ol></blockquote><ol start="2"><li>客户端stub（client stub）将这些参数包装，并通过系统调用发送到服务端机器。打包的过程叫 <a href="https://zh.wikipedia.org/wiki/Marshalling_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">marshalling</a>【序列化】。（常见方式：<a href="https://zh.wikipedia.org/wiki/XML">XML</a>、<a href="https://zh.wikipedia.org/wiki/JSON">JSON</a>、二进制编码）</li><li>客户端本地操作系统发送信息至服务器。（可通过自定义<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE">TCP协议</a>或<a href="https://zh.wikipedia.org/wiki/HTTP">HTTP</a>传输）</li><li>服务器系统将信息传送至服务端stub（server stub）。</li><li>服务端stub（server stub）解析信息。该过程叫 <a href="https://zh.wikipedia.org/wiki/Unmarshalling_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">unmarshalling</a>。</li><li>服务端stub（server stub）调用程序，并通过类似的方式返回给客户端。</li></ol><h4 id="2-1-2-Basic-Paxos"><a href="#2-1-2-Basic-Paxos" class="headerlink" title="2.1.2 Basic Paxos"></a>2.1.2 Basic Paxos</h4><h5 id="·-角色介绍"><a href="#·-角色介绍" class="headerlink" title="· 角色介绍"></a>· 角色介绍</h5><table><thead><tr><th>Client</th><th>系统外部角色，请求发起者。像民众</th></tr></thead><tbody><tr><td><strong>Proposer</strong></td><td>接受Client请求，向集群提起提议（propose）。并在冲突发生时，起到冲突调节的作用。像议员，替民众提出议案【判断是否达到Quorum】【服务器】</td></tr><tr><td><strong>Acceptor（Voter）</strong></td><td>提议投票和接收者，只有在形成法定人数（Quorum，即为多数派）时，提议才会最终被接受。像国会<strong>【分布式存储的独立存储点】</strong>【计算集群】【达到共识的数据库】</td></tr><tr><td><strong>Learner</strong></td><td>提议接收者，backup，备份，对集群一致性没什么影响。像记录员，对已经通过的法案做记录【由Acceptor通知】</td></tr></tbody></table><h5 id="·-步骤、阶段【phases】"><a href="#·-步骤、阶段【phases】" class="headerlink" title="· 步骤、阶段【phases】"></a>· 步骤、阶段【phases】</h5><ol><li><strong>Phase 1a：Prepare</strong></li></ol><blockquote><p><strong>proposer</strong>提出一个提案，编号为$N$,此$N$<strong>大于</strong>这个<strong>proposer</strong>之前提出的提案编号，请求<strong>acceptors</strong>的<strong>quorum</strong>接受</p></blockquote><ol start="2"><li><strong>Phase 1b：Promise</strong></li></ol><blockquote><p>如果$N$大于此acceptors之前接受的任何提案编号则接受，否则拒绝</p></blockquote><ol start="3"><li><strong>Phase 2a：Accept</strong></li></ol><blockquote><p>如果达到了quorum，proposer会发出accept的请求。这个请求包含提案编号$N$，以及提案内容</p></blockquote><ol start="4"><li><strong>Phase 2b：Accepted</strong></li></ol><blockquote><p>如果此acceptor在此期间没有收到任何编号大于$N$的提案，则接受此提案内容，否则忽略</p></blockquote><h5 id="·-潜在问题"><a href="#·-潜在问题" class="headerlink" title="· 潜在问题"></a>· 潜在问题</h5><blockquote><p><strong>活锁（liveness）</strong>或者<strong>dueling</strong></p></blockquote><p>用<code>random(timeout)</code>解决，进程冲突，一个进程先等一会。【一般等几秒钟】</p><p>其他问题：</p><ul><li>难实现、效率低（2轮RPC）、活锁</li></ul><p><img src="https://i.loli.net/2020/11/29/SC8jnlerY25sUDP.jpg" alt="basic paxos基本流程.jpg"></p><h3 id="2-2-Multi-Paxos"><a href="#2-2-Multi-Paxos" class="headerlink" title="2.2 Multi-Paxos"></a>2.2 Multi-Paxos</h3><blockquote><p>新概念【<strong>Leader</strong>】：唯一的proposer，所有请求都需要经过这个Leader。</p></blockquote><p><strong>区别</strong>：与basic paxos多proposers相比，其提案唯一确定</p><p><strong>特点：</strong>减少角色，进一步简化</p><blockquote><p>在确定了一个server作为leader后，就不需要像basic paxos每一次propose都需要promise，而是与其他服务器形成了leader-slave的关系，只要不挂机，都仅需<code>Accept!(N,I,Vn)</code>即可</p></blockquote><p><img src="https://i.loli.net/2020/11/29/C65B2y39TxYQfhL.jpg" alt="multi paxos基本流程.jpg"></p><h4 id="2-2-1-Raft【简易版本的Multi-Paxos】"><a href="#2-2-1-Raft【简易版本的Multi-Paxos】" class="headerlink" title="2.2.1 Raft【简易版本的Multi-Paxos】"></a>2.2.1 Raft【简易版本的Multi-Paxos】</h4><blockquote><p>Raft is a implementation of distributed consensus，用于解决<code>state machine replication</code>问题</p></blockquote><ul><li><p>将达到共识划分为三个子问题</p><ul><li><p><strong>Leader Election</strong></p><ul><li>Only one candidate</li></ul><blockquote><p>Raft通过timeout来控制选举，如果集群中follower没有收到heartbeat【心跳包】，说明其可以竞选leader。当某一follower成为candidate后，它会向集群中的其他followers发送请求，当投票数达到Quorum【该candidate能保证它投它自己+1 vote】，该candidate成为Leader，向集群发送heartbeat。</p><p>这个时候，集群中的所有follower在每次接受到heartbeat时，都要刷新一次timeout；并且更新一次<code>Election Term (x+1)</code></p></blockquote><ul><li>Candidates</li></ul><blockquote><p>Raft会产生随机的timeout给candidates，被分到timeout短的成为leader</p></blockquote></li><li><p><strong>Log Replication</strong></p><ul><li>两个阶段：写日志<code>Log</code>—&gt;提交<code>Commit</code></li><li>当Leader知道quorum已经将log写入了后，它就可以提交了；提交后再提醒followers提交</li><li><strong>若产生多个集群分区</strong></li></ul><blockquote><p>在这种情况下，一般为$2k+1$个结点，为保证不会出现同时的$2N$票</p><p>此时，quorum表示为除了Leaders的所有followers</p></blockquote></li><li><p><strong>Safety【如何保证容错】</strong></p><ul><li>如果出现宕机，在该机器恢复后，它的状态会与其他机器达成consensus</li></ul></li></ul></li><li><p>重定义角色：</p><ul><li>Leader【<strong>整个集群只有一个Leader</strong>】</li></ul><blockquote><p>出现leader后，所有的请求都由leader传给followers</p></blockquote><ul><li>Follower</li><li>Candidate【没有leader出现时，由follower经过<strong>timeout</strong>后成为candidate】</li></ul></li><li><p><a href="http://thesecretlivesofdata.com/raft/">原理动画解释</a></p></li><li><p><a href="https://raft.github.io/">场景测试</a></p></li></ul><p><img src="https://i.loli.net/2020/11/29/zQaAeuF3HpDLCsR.jpg" alt="强一致--主从同步.jpg"></p><h4 id="2-2-2-其他问题"><a href="#2-2-2-其他问题" class="headerlink" title="2.2.2 其他问题"></a>2.2.2 其他问题</h4><p><strong>一致性不能代表完全正确性！</strong></p><p>因为会出现三个可能的结果：<code>成功</code>,<code>失败</code>,<code>unknown(timeout)</code></p><p>举个例子<strong>【Raft 5 Nodes】</strong>：Client写请求，leader问followers同步logs，此时集群中有3个节点失败，2个节点存活，结果会是？</p><h3 id="2-3-ZAB-Multi-Paxos"><a href="#2-3-ZAB-Multi-Paxos" class="headerlink" title="2.3 ZAB(Multi-Paxos)"></a>2.3 ZAB(Multi-Paxos)</h3><blockquote><p>基本与Raft相同，有些名词在叫法上有些区别；</p><p>比如ZAB将某一个Leader的周期称为<code>epoch</code>，而Raft则称之为<code>term</code>；</p><p>实际上也有存在着一些区别：如Raft保证log的连续性，Heartbeats方向为<code>Leader --&gt; Follower</code>，ZAB则相反，为<code>Follower --&gt; Leader</code></p></blockquote><h2 id="三-项目实践"><a href="#三-项目实践" class="headerlink" title="三 项目实践"></a>三 项目实践</h2><ul><li>Zookeeper集群搭建和命令行操作</li><li>Etcd集群搭建和restful api</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一致性算法（Paxos、Raft、ZAB）&quot;&gt;&lt;a href=&quot;#一致性算法（Paxos、Raft、ZAB）&quot; class=&quot;headerlink&quot; title=&quot;一致性算法（Paxos、Raft、ZAB）&quot;&gt;&lt;/a&gt;一致性算法（Paxos、Raft、ZAB）&lt;/</summary>
      
    
    
    
    <category term="分布式数据库" scheme="https://warmchay.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="分布式数据库" scheme="https://warmchay.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--树【递归解题I】</title>
    <link href="https://warmchay.github.io/2021/03/16/LeetCode%E3%80%90%E6%A0%91%E2%85%A0%E2%85%A1%E3%80%91/"/>
    <id>https://warmchay.github.io/2021/03/16/LeetCode%E3%80%90%E6%A0%91%E2%85%A0%E2%85%A1%E3%80%91/</id>
    <published>2021-03-16T01:24:27.622Z</published>
    <updated>2021-03-16T01:24:27.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode【树Ⅰ】"><a href="#LeetCode【树Ⅰ】" class="headerlink" title="LeetCode【树Ⅰ】"></a>LeetCode【树Ⅰ】</h1><blockquote><p>贯穿在树中间的是递归的思想，在树这一块，我们主要讨论递归在解决树型问题时起的作用，解题的重点也在于<strong>分析树的每个节点在做什么，并且相信他会一直这么做下去</strong>。</p></blockquote><h2 id="P226-翻转二叉树"><a href="#P226-翻转二叉树" class="headerlink" title="P226 翻转二叉树"></a>P226 翻转二叉树</h2><p>来看一下题目：</p><img src="https://i.loli.net/2020/11/18/pmsQNlkg5erajCb.png" alt="p226.png" style="zoom:50%;" /><p>根据递归的思路，我们分析一下每个节点在做什么事，可以注意到的是，这个翻转是把每个结点的左孩子和右孩子进行了调换，因此树中每个结点所做的就是把左孩子和右孩子进行调换。</p><p><strong>注意：</strong>当结点为空时，这个时候就需要返回空的结点<code>NULL</code>，这个是特殊的条件。由这个条件，我们得到下面代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line"><span class="comment">/*前序遍历代码*/</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">   TreeNode* tmp = root-&gt;left;            <span class="comment">//通过中间变量tmp来替换</span></span><br><span class="line">    root-&gt;left = root-&gt;right;</span><br><span class="line">    root-&gt;right = tmp;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*对每个结点进行递归，相信它都会这么做*/</span></span><br><span class="line">    invertTree(root-&gt;left);               <span class="comment">//从左节点开始</span></span><br><span class="line">    invertTree(root-&gt;right);              <span class="comment">//从右节点开始</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P116-填充每个节点的下一个右侧节点指针"><a href="#P116-填充每个节点的下一个右侧节点指针" class="headerlink" title="P116 填充每个节点的下一个右侧节点指针"></a>P116 填充每个节点的下一个右侧节点指针</h2><img src="https://i.loli.net/2020/11/18/chZkdUGrJ2bayIp.png" alt="P116.png" style="zoom: 50%;" /><p>与第一题一样，我们先来分析下每个节点在做什么事。</p><p>这么一看，每个节点都指向其右节点<code>这个右指层序遍历的右</code>，而每一层最右边的节点则指向NULL，那么这么一分析，可能会架构出这样的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    root-&gt;left-&gt;next = root-&gt;right;</span><br><span class="line">    root-&gt;right-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    connect(root-&gt;left);</span><br><span class="line">    connect(root-&gt;right);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>欸，这个想法差不多了，但是还是缺一点，错在哪里呢，想一下，在<code>root-&gt;right</code>这一部分，如果发生在左子树，按照题目意思应该是<code>root-&gt;left-&gt;right-&gt;next = root-&gt;right-&gt;left</code>;但是我们没有实现这个功能。</p><p>该怎么办呢，如果按照题目传入的参数，每次只能传入一个结点，那能做的也只有一个结点的事，这样我两个在原子树没什么关系得结点就找不到联系了呀~</p><p>因此，这里我们重新构建一个参数，用来传每个结点的左孩子和右孩子，把三种指向的情况全部实现，最后我们构建的<code>build</code>函数是这样的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;   <span class="comment">//这个注意一下如果没有判断root为空，&#x27;[]&#x27;情况会出错</span></span><br><span class="line">    connect(root-&gt;left, root-&gt;right);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(Node* l, Node* r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == <span class="literal">nullptr</span> || r == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    l-&gt;next = r;</span><br><span class="line">    </span><br><span class="line">    connect(l-&gt;left, l-&gt;right);</span><br><span class="line">    connect(r-&gt;left, r-&gt;right);</span><br><span class="line">    connect(l-&gt;right, l-&gt;left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P114-二叉树展开成链表"><a href="#P114-二叉树展开成链表" class="headerlink" title="P114 二叉树展开成链表"></a>P114 二叉树展开成链表</h2><img src="https://i.loli.net/2020/11/19/EaeBjoYNH8RZKu9.png" alt="p114.png" style="zoom:50%;" /><p>同样的，我们还是来分析节点在做什么事。</p><p>分析一下，我们可以看到对某一节点，它是将左子树的节点全部转到右子树，再将原来的右子树节点补到现有的最后一个右节点后，这么说可能不详细【现在还没学会在线画图的废清】，我们举个例子</p><p>以第二层左子树节点2为例，将它所做的事分析一下，即为</p><p><code>3 &lt;- 2 -&gt; 4</code>，先转成，<code>2-&gt;3</code>，再把<code>4</code>补上，即为<code>NULL &lt;- 2-&gt;3-&gt;4</code>懂了叭~</p><p>那么我们将节点所做的事用代码表示，即为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flatten</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    flatten(root-&gt;left);</span><br><span class="line">    flatten(root-&gt;right);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*后序遍历位置，先从最下面一位的节点开始*/</span></span><br><span class="line">    Node* tmp = root-&gt;right;</span><br><span class="line">    Node* tmp1 = root-&gt;right;    <span class="comment">//先保存右孩子的状态</span></span><br><span class="line">    root-&gt;right = root-&gt;left;    <span class="comment">//右孩子指向左孩子</span></span><br><span class="line">    root-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(tmp-&gt;right != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        tmp = tmp-&gt;right;        <span class="comment">//遍历到现在右孩子的最后一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    tmp-&gt;right = tmp1;           <span class="comment">//连接上原先的右孩子</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;                 <span class="comment">//返回处理过的节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Leetcode【树Ⅱ】"><a href="#Leetcode【树Ⅱ】" class="headerlink" title="Leetcode【树Ⅱ】"></a>Leetcode【树Ⅱ】</h1><blockquote><p>这里我们主要讲递归对BST的作用</p></blockquote><p>同样的，我们在是使用递归前还是需要去分析好每个节点所做的事情是什么，然后相信他，写出递归的代码出来，话不多说，我们开始吧~</p><h2 id="P98-验证二叉搜索树"><a href="#P98-验证二叉搜索树" class="headerlink" title="P98 验证二叉搜索树"></a>P98 验证二叉搜索树</h2><img src="https://i.loli.net/2020/11/20/h8XxHJiRUkzBIvb.png" alt="p98.png" style="zoom:50%;" /><p>因为题目要求关于对应节点左子树和右子树的情况为，左孩子小于父节点，右孩子大于父结点，所以我们可以从这个条件入手往下找，那么问题来了，怎么用递归来分开比较左子树和右子树呢？</p><p>我们可以使用<code>min</code>和<code>max</code>来保存这些状态，<code>min</code>和<code>max</code>存的都是父结点的值，由此可以一直比较下去，那么怎么比的呢，我们先把整个代码写出来，为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> isValidBST(root, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root, TreeNode* min, TreeNode* max)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(min != <span class="literal">NULL</span> &amp;&amp; root-&gt;left-&gt;val &lt;= min-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(max != <span class="literal">NULL</span> &amp;&amp; root-&gt;right-&gt;val &gt;= max-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> isValidBST(root-&gt;left, min, root) &amp;&amp; isValidBST(root-&gt;right, root, max)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拆开来讲，对于最后传递的<code>isValidBST(root-&gt;left, min, root) &amp;&amp; isValid(root-&gt;right, max, root)</code>意思是，假如现在传入的<code>root2</code>为<code>root1-&gt;left</code>，此时比较的为【现在举得root为上一个递归值的root1】<code>root1-&gt;left-&gt;left</code>和<code>root1-&gt;left-&gt;right</code>，即<code>root2-&gt;left</code>与<code>root2-&gt;right</code>，这么做就是<strong>判断往下的左节点是否都比最顶级的父结点小，往下的右节点是否都比最顶级的父结点大。</strong></p><p>在这里我还是有点疑问，因为在写<code>min</code>和<code>max</code>的时候我发现我好像对于二叉搜索树不是很了解，于是百度得到关于BST的特点总结为：</p><ul><li>左子树的值一定小于右子树</li><li>查找时的处理方式接近于二分查找，时间复杂度为$O(logn)$.</li></ul><h2 id="P654-最大二叉树"><a href="#P654-最大二叉树" class="headerlink" title="P654 最大二叉树"></a>P654 最大二叉树</h2><img src="https://i.loli.net/2020/11/20/xDMjXr6qINZbWG1.png" alt="p654.png" style="zoom:50%;" /><p>锁定节点需要做的事：找到最大元素后，记录其位置<code>index</code>，后在其左边建树，再在其右边建数，然后将左子树和右子树连在一起，所以这里节点要做的事即为：</p><ol><li>找到最大节点</li><li>建立左子树</li><li>建立右子树</li></ol><p>得到代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(nums, <span class="number">0</span>, nums.size()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="literal">nullptr</span>;                      <span class="comment">//这个判断很关键</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">-1</span>, val = <span class="number">-10000</span>;                 <span class="comment">//index设为-1，保证其不影响递归的加减</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(val &lt; nums[i])&#123;</span><br><span class="line">            val = nums[i];</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">    root-&gt;left = build(nums, l, index<span class="number">-1</span>);</span><br><span class="line">    root-&gt;right = build(nums, index+<span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里出错的原因是<code>l&gt;r</code>的判定条件写成了<code>l &lt; 0|| r &gt; nums.size()-1</code>，原因是，在递归时会出现<code>l&gt;r</code>的情况，而如果不判断这个在循环的时候就会出错，过不了了~</p><h2 id="P105-前序与中序遍序构造二叉树"><a href="#P105-前序与中序遍序构造二叉树" class="headerlink" title="P105 前序与中序遍序构造二叉树"></a>P105 前序与中序遍序构造二叉树</h2><img src="https://i.loli.net/2020/11/20/4qSxJUemIYBuavl.png" alt="p105.png" style="zoom:50%;" /><p>在构造树最关键的应该是，找到三种遍历间的关系，在我做二叉树关于三种遍历时我都是这么来想的，以<code>左-中-右</code>来表示左孩子、父结点、右孩子，它们遍历的顺序为：</p><ul><li><strong>前序遍历</strong>：<code>左-中-右</code>，第一个元素为<strong>根节点</strong>，最后一个结点为右子树最后一个结点</li><li><strong>中序遍历</strong>：<code>左-中-右</code>，第一个元素为左子树的最小结点，最后一个结点为右子树最后一个节点</li><li><strong>后序遍历</strong>：<code>左-右-中</code>，第一个元素为左子树的最小结点，最后一个节点为<strong>根节点</strong></li></ul><p>对于前序和中序遍历得出的二叉树，我们可以找到以下关系</p><ul><li>前序第一个结点为根节点，记为<code>root</code></li><li>对中序顺序表遍历找到<code>root</code>对应的<code>index</code>值，然后关于<code>index</code>左边为BST的左子树，右边则为右子树，然后关于这两边建树</li></ul><p><strong>怎么建树呢？</strong></p><ul><li>同样通过递归来建树，或者也可以看成是通过前序遍历来建树的一个逆推过程，那么关键就是找到每一个小树的根节点<code>root</code>，后面递归下去找<code>root-&gt;left</code>和<code>root-&gt;right</code></li></ul><p>代码写为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> build(preorder, <span class="number">0</span>, preorder.size()<span class="number">-1</span>, inorder, <span class="number">0</span>, inorder.size()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="keyword">int</span> preStart, <span class="keyword">int</span> preEnd, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preStart &gt; preEnd) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">-1</span>, val = preorder[preStart];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = inStart; i &lt;= inEnd; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(inorder[i] == val)&#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> leftSize = index - inStart;</span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">    root-&gt;left = build(preorder, preStart+<span class="number">1</span>, preStart+leftSize, inorder, inStart, index<span class="number">-1</span>);</span><br><span class="line">    root-&gt;right = build(preorder, preStart+<span class="number">1</span>+leftSize, preEnd, inorder, index+<span class="number">1</span>, inEnd);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关键在于：找到前序和中序左子树和右子树建树的位置，即根节点，然后按照往左往右递归地深入下去建树。</p></blockquote><h2 id="P106-中序与后序遍历构造二叉树"><a href="#P106-中序与后序遍历构造二叉树" class="headerlink" title="P106 中序与后序遍历构造二叉树"></a>P106 中序与后序遍历构造二叉树</h2><img src="https://i.loli.net/2020/11/20/WuI8DT5AiNy6Q2z.png" alt="p106.png" style="zoom:50%;" /><p>与上题类似，这道题我们需要找到中序和后序的关系，分析知道：</p><ul><li>后序顺序表遍历的<strong>最后一个元素</strong>为BST的根节点<code>root</code></li><li>中序遍历找到BST的根节点<code>root</code>后，<code>root</code>左边为左子树，<code>root</code>右边为右子树</li><li>找到中序遍历<code>inorder[]</code>中<code>root</code>的<code>index</code>位置后，得到<code>leftSize = index-inStart </code>，与上一题不同，在后序遍历<code>postorder[]</code>中，其**左子树的元素在顺序表中的顺序应该为<code>[postStart, postStart+leftSize-1]</code>**，这里要注意一下，我就是在这里debug了好久</li></ul><p>通过这道题提醒自己一个知识点：</p><p><strong>只有“前序+中序”//“中序+后序”能够确定唯一一颗二叉树awa</strong></p><p>根据上述分析，我们的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; postorder)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> build(inorder, <span class="number">0</span>, inorder.size()<span class="number">-1</span>, postorder, <span class="number">0</span>, postorder.size()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; postorder, <span class="keyword">int</span> postStart, <span class="keyword">int</span> postEnd)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(postStart &gt; postEnd) <span class="keyword">return</span> <span class="literal">nullptr</span>;<span class="comment">//这里inStart&gt;inEnd也是可以滴</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">-1</span>, val = postorder[postEnd];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = inStart; i &lt;= inEnd; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(inorder[i] == val)&#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> leftSize = index - inStart; </span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">    root-&gt;left = build(inorder, inStart, index<span class="number">-1</span>, postorder, postStart, postStart+leftSize<span class="number">-1</span>);</span><br><span class="line">    root-&gt;right = build(inorder, index+<span class="number">1</span>, inEnd, postorder, postStart+leftSize, postEnd<span class="number">-1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>复盘的时候，发现自己避开了<code>postStart+leftSize-1</code>的问题，却没有避开在<code>root-&gt;right</code>中postorder[]应该停止在<code>postEnd-1</code>的位置😄【蠢死自己了】</p></blockquote><p>过完了BST的基本问题，我们要往更深的地方迈入啦，冲鸭~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode【树Ⅰ】&quot;&gt;&lt;a href=&quot;#LeetCode【树Ⅰ】&quot; class=&quot;headerlink&quot; title=&quot;LeetCode【树Ⅰ】&quot;&gt;&lt;/a&gt;LeetCode【树Ⅰ】&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;贯穿在树中间的是递归的思想，在树这</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://warmchay.github.io/categories/LeetCode/"/>
    
    
    <category term="树" scheme="https://warmchay.github.io/tags/%E6%A0%91/"/>
    
    <category term="递归" scheme="https://warmchay.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>MapReduce I</title>
    <link href="https://warmchay.github.io/2021/03/16/MapReduce%E3%80%90%E2%85%A0%E3%80%91/"/>
    <id>https://warmchay.github.io/2021/03/16/MapReduce%E3%80%90%E2%85%A0%E3%80%91/</id>
    <published>2021-03-16T01:24:27.622Z</published>
    <updated>2021-03-16T04:45:32.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MapReduce【Ⅰ】"><a href="#MapReduce【Ⅰ】" class="headerlink" title="MapReduce【Ⅰ】"></a>MapReduce【Ⅰ】</h1><blockquote><p>因为是第一次读MapReduce，并且也是第一次接触到分布式，所以不懂得地方会很多，如果有想要找到相关部分的朋友，可以点对应的索引栏查找，如果没有找到你的问题，欢迎评论，我会及时回复你~</p></blockquote><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><h3 id="lt-1-gt-什么是MapReduce"><a href="#lt-1-gt-什么是MapReduce" class="headerlink" title="&lt;1&gt;什么是MapReduce"></a>&lt;1&gt;什么是MapReduce</h3><ul><li>MapReduce为一个programming model</li><li>同时也是一个实现了处理和生成超大数据集的算法模型</li></ul><h3 id="lt-2-gt-Basic-Implemation"><a href="#lt-2-gt-Basic-Implemation" class="headerlink" title="&lt;2&gt;Basic Implemation"></a>&lt;2&gt;Basic Implemation</h3><p>用户首先创建一个<code>Map</code>函数来处理一个基于<code>key/value pair</code>的数据模型，输出中间的基于<code>key/value</code>的数据集合，然后再创建一个Reduce函数来合并所有具有相同<code>intemediate key</code>的<code>intermediate value</code>。</p><h3 id="lt-3-gt-特点"><a href="#lt-3-gt-特点" class="headerlink" title="&lt;3&gt;特点"></a>&lt;3&gt;特点</h3><ul><li>MapReduce架构的程序能够在大量的普通配置的计算机<strong>【commodity machines】</strong>上实行并行化<strong>【parallelized】</strong>处理</li></ul><p>这个<code>run-time system</code>仅关心：</p><ul><li>如何<strong>分割</strong>输入数据【<strong>partitioning the input data</strong>】</li><li>在大量计算机组成的集群上的<strong>调度</strong>【<strong>scheduling the program’s execution accross machines</strong>】</li><li>集群中计算机的错误处理<strong>【handling machines failures】</strong></li><li>管理集群中计算机之间必要的通信【<strong>managing the required communication</strong>】</li></ul><blockquote><p>一个典型的MapReduce计算往往由几千台机器组成、处理以TB计算的数据<strong>【Highly scalable】</strong></p></blockquote><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h2><h3 id="1-1-为什么提出了MapReduce"><a href="#1-1-为什么提出了MapReduce" class="headerlink" title="1.1 为什么提出了MapReduce"></a>1.1 为什么提出了MapReduce</h3><p><strong>To compute various kinds of derived data【衍生数据】</strong>，例如爬虫爬取的网面数量汇总、每天被请求的最多的查询集合等等。因为输入的数据量巨大，如果要在可接受的时间内完成运算，需要把这些<code>data</code>分布在成百上千的主机上。</p><p>而我们前面提到的如何处理并行运算、如何分发数据、如何处理错误，这些问题综合在一起，需要大量的代码处理，但是这么综合解决需要大量的代码，那么怎么简单处理呢？</p><h3 id="1-2-解决复杂问题"><a href="#1-2-解决复杂问题" class="headerlink" title="1.2 解决复杂问题"></a>1.2 解决复杂问题</h3><p>为了解决这些<code>complexity</code>，我们设计一个<code>new abstraction to express the simple computation</code><strong>【只用表述执行简单的运算】</strong>，不用去关心并行计算<strong>（parallelization）</strong>、容错<strong>（fault-tolerance）</strong>、数据分布<strong>（data distribution）</strong>、负载均衡<strong>（load balancing）</strong>等复杂的细节，而现在这些问题都被封装到了一个库里面，设计这个抽象模型的灵感来源于<code>Lisp</code>和其他函数式语言的<code>Map</code>和<code>Reduce</code>的原语。</p><p>而大多数的运算都包含着这样的操作：</p><ul><li>先在输入数据的“逻辑”记录上应用<code>Map</code>操作得出一个中间<code>key/value pair</code>集合</li><li>之后对所有具有相同<code>key</code>值的<code>value</code>值上应用<code>Reduce</code>操作，从而达到<strong>合并中间的数据</strong>，得到一个想要的结果的目的</li><li>而后使用<code>MapReduce</code>模型，结合用户实现的<code>Map</code>和<code>Reduce</code>函数，从而能较为容易地实现大规模并行化计算</li></ul><p>而通过<code>MapReduce</code>模型自带的<code>re-execution</code>【<strong>“再次执行”</strong>】功能，也提供了初级的容错【<strong>fault tolerance</strong>】实现方案</p><h3 id="1-3-Major-Contribution"><a href="#1-3-Major-Contribution" class="headerlink" title="1.3 Major Contribution"></a>1.3 Major Contribution</h3><blockquote><p>这个工作【<strong>实现一个MapReduce框架模型</strong>】的主要贡献是通过简单的接口来实现<strong>自动的并行化和大规模的分布式计算</strong>，通过使用MapReduce模型接口实现在大量普通的PC机上<strong>高性能计算</strong></p></blockquote><blockquote><p>PC机：个人计算机</p></blockquote><p>接下来几个部分将会讲述：</p><ul><li><strong>Section 2：</strong>Basic programming model and gives examples</li><li><strong>Section 3：</strong>描述了一个经过裁剪的、适合于基于集群的计算环境中的MapReduce实现</li><li><strong>Section 4：</strong>描述 一些在MapReduce编程模型中实用的技巧</li><li><strong>Section 5：</strong>Performance measurements【<strong>测量性能</strong>】 of variety of tasks’ implementation.</li><li><strong>Section 6：</strong>谷歌内部用MapReduce作为基础重写的索引系统产品，以及其他一些使用<strong>MapReduce的经验</strong></li><li><strong>Section 7：</strong>Related and future work.</li></ul><h2 id="2-Progrmming-Model-编程模型"><a href="#2-Progrmming-Model-编程模型" class="headerlink" title="2 Progrmming Model [编程模型]"></a>2 Progrmming Model [编程模型]</h2><h3 id="Intro-–-MapReduce原理"><a href="#Intro-–-MapReduce原理" class="headerlink" title="Intro – MapReduce原理"></a>Intro – MapReduce原理</h3><p>Takes a set of input <code>key/value pairs</code>，produce a set of output <code>key/value pairs</code>.MapReduce的library groups<strong>【用户】</strong>用两个函数来表达该计算：<code>Map</code>and<code>Reduce</code>。</p><p>用户自定义的<code>Map</code>函数接受一个输入的<code>key\value pairs</code>，然后产生一个中间<code>key/value</code>值的集合，<code>MapReduce</code>库把所有具有相同中间<code>key</code>值Ⅰ和相关的一个<code>value</code>值集合在一起传递给<code>reduce</code>函数；</p><p>而用户定义的<code>Reduce</code>函数接受一个中间<code>key</code>的值Ⅰ和一个相关的<code>value</code>值的集合，<code>Reduce</code>函数合并这些<code>value</code>值，形成一个较小的<code>value</code>值的集合。一般的，每个<code>Reduce</code>函数调用只产生$0$或$1$个输出<code>value</code>值。通常我们通过一个迭代器把中间<code>value</code>值提供给<code>Redece</code>函数，这样我们就能够处理无法全部放入内存中的大量<code>value</code>值的集合。</p><h3 id="2-1-例子"><a href="#2-1-例子" class="headerlink" title="2.1 例子"></a>2.1 例子</h3><p>以计算一个大的文档集合中包含每个单词出现的次数，伪代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>(String Key, String value)&#123;</span><br><span class="line">    <span class="comment">//Key---doucument name</span></span><br><span class="line">    <span class="comment">//Value---documents content</span></span><br><span class="line">    <span class="keyword">for</span> each word w in value:</span><br><span class="line">    EmitIntermediate(w, <span class="string">&quot;l&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reduce(String key, Ste=ing)&#123;</span><br><span class="line">    <span class="comment">//key: a word</span></span><br><span class="line">    <span class="comment">//values: a list of counts</span></span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>；</span><br><span class="line">    <span class="keyword">for</span> each v in values:</span><br><span class="line">    result += ParseInt(v);</span><br><span class="line">   Emit(AsString(result));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中， <code>Map</code>函数输出文档中的每个词，以及这个词的出现次数（在这个例子失踪）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MapReduce【Ⅰ】&quot;&gt;&lt;a href=&quot;#MapReduce【Ⅰ】&quot; class=&quot;headerlink&quot; title=&quot;MapReduce【Ⅰ】&quot;&gt;&lt;/a&gt;MapReduce【Ⅰ】&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;因为是第一次读MapReduce，</summary>
      
    
    
    
    <category term="分布式" scheme="https://warmchay.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="分布式" scheme="https://warmchay.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Gitee/Git 上传文件</title>
    <link href="https://warmchay.github.io/2021/03/16/GiteeGit-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>https://warmchay.github.io/2021/03/16/GiteeGit-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</id>
    <published>2021-03-16T01:24:27.621Z</published>
    <updated>2021-03-16T01:24:27.621Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>想着之后用gitee托管代码会比较方便，kexueshangwang对于懒癌来说目前除了翻墙找“学习”资源浪费学习时间外，没什么必要。</p><p>但是git怎么上传文件，我也琢磨了好久，这是在上传时的步骤和中间出现的一些问题</p></blockquote><p><strong>在建立了项目的文件夹后，点开这个文件夹，在文件夹目录这块<code>git bash</code></strong></p><ul><li><strong>Ⅰ 建立远程连接</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin <span class="string">&#x27;xxx&#x27;</span>   //这个xxx是你的仓库地址，在<span class="built_in">clone</span>(克隆/下载)那里直接复制paste在这就ok了</span><br></pre></td></tr></table></figure><ul><li><strong>Ⅱ 将文件夹连接到分支【上传文件到缓存区必做的一步】</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><ul><li><strong>Ⅲ 添加文件至缓冲区</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><ul><li><strong>Ⅳ 将缓冲区的文件上传至master分支</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>最后你就能够发现你的仓库文件已经更新啦~</p><p><strong>小问题：</strong></p><ul><li>在与远程仓库建立连接的过程中你会看到，原先仓库里的文件也会到你的文件夹中，我觉得是因为在<code>git pull</code>的时候<code>fetch</code>操作也加进来了，但因为我在上传过程中出现了几个bug，后续确认下是否是这样，<strong>欢迎指正鸭</strong></li><li><strong>注意：</strong>在<code>git push</code>过程中如果单单在项目文件加了一个空文件夹外，其他什么都没有，<code>git push</code>会报<code>error</code>的~~【我就是这么过来的orz】</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;想着之后用gitee托管代码会比较方便，kexueshangwang对于懒癌来说目前除了翻墙找“学习”资源浪费学习时间外，没什么必要。&lt;/p&gt;
&lt;p&gt;但是git怎么上传文件，我也琢磨了好久，这是在上传时的步骤和中间出现的一些问题&lt;/p&gt;
&lt;/blo</summary>
      
    
    
    
    <category term="随笔" scheme="https://warmchay.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Git" scheme="https://warmchay.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>About Me</title>
    <link href="https://warmchay.github.io/2021/03/16/About%20Me/"/>
    <id>https://warmchay.github.io/2021/03/16/About%20Me/</id>
    <published>2021-03-16T01:24:27.594Z</published>
    <updated>2021-03-16T01:24:27.595Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>平稳、健康、幸福(●ˇ∀ˇ●)</strong></p></blockquote><hr><p><strong>Name：</strong> <strong>王清 / Zoris Wang</strong></p><p><strong>Address：</strong> <strong>陕西西安，广西北海</strong></p><p><strong>邮箱：</strong><a href="mailto:&#87;&#x61;&#114;&#x6d;&#99;&#104;&#x61;&#121;&#64;&#x31;&#54;&#x33;&#46;&#x63;&#111;&#109;">&#87;&#x61;&#114;&#x6d;&#99;&#104;&#x61;&#121;&#64;&#x31;&#54;&#x33;&#46;&#x63;&#111;&#109;</a></p><p><strong>CSDN：</strong> <a href="https://blog.csdn.net/Shea111?spm=1010.2135.3001.5113">Warmchay</a></p><p><strong>博客园：</strong><a href="https://home.cnblogs.com/u/Warmchay">Warmchay</a>【已停更，懒癌日常= v =】</p><p><img src="https://i.loli.net/2020/11/06/WGPKHfjqIn4FrZx.png" alt="aboutme.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;平稳、健康、幸福(●ˇ∀ˇ●)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Name：&lt;/strong&gt; &lt;strong&gt;王清 / Zoris Wang&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL基本语法</title>
    <link href="https://warmchay.github.io/2021/02/14/MySQL%20%E5%AD%A6%E4%B9%A0/"/>
    <id>https://warmchay.github.io/2021/02/14/MySQL%20%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-14T06:25:17.191Z</published>
    <updated>2021-03-16T10:29:55.536Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-MySQL"><a href="#1-MySQL" class="headerlink" title="1 MySQL"></a>1 MySQL</h2><blockquote><p>RDBMS 关系数据库管理系统之一</p></blockquote><p>mysql语法查询：<a href="https://www.w3schools.com/sql/func_mysql_floor.asp">w3school整理</a></p><h3 id="1-1-definition"><a href="#1-1-definition" class="headerlink" title="1.1 definition"></a>1.1 definition</h3><blockquote><p>按照数据结构来组织、存储和管理数据的仓库</p></blockquote><p>每个数据库都有一个或多个api用于<strong>创建、访问、管理、搜索</strong>和<strong>复制</strong>需要保存的数据。</p><p><strong>与io流对比：</strong> 文件读写速度mysql更快</p><p><strong>RDBS数据库：</strong> 建立在关系模型基础上的数据库</p><p><strong>RDBS特点：</strong></p><ul><li>数据以表格形式出现</li><li>每行为各种记录名称</li><li>每列为记录名称所对应的数据与</li><li>表单由行和列组成</li><li>database由许多表单构成</li></ul><h3 id="1-2-RDBS"><a href="#1-2-RDBS" class="headerlink" title="1.2 RDBS"></a>1.2 RDBS</h3><img src="https://i.loli.net/2021/03/16/6ZvtElqI3FWLmD2.png" alt="image-20210210173715114.png" style="zoom:50%;" /><blockquote><p>键值具有<strong>唯一性</strong></p></blockquote><ul><li><strong>列：</strong> 一列数据包含着相同类型的数据</li><li><strong>行：</strong> 一组相关的数据，一行数据也称为元组，或记录</li><li><strong>数据表：</strong> 数据的矩阵，在数据库中像一个简单的电子表格</li><li><strong>数据库：</strong> 关联表的集合</li><li><strong>冗余：</strong> 存储两倍的数据，<strong>降低了性能</strong>，但<strong>提高了</strong>数据的<strong>安全性</strong></li><li><strong>主键：</strong> <font color=red><strong>主键唯一</strong></font>，一个数据表中只能包含一个主键，使用主键来查询数据</li><li><strong>外键：</strong> 外键用于关联两个表</li><li><strong>复合键：</strong> 又称<strong>组合键</strong>，将多个列作为一个索引键，一般用于复合索引</li><li><strong>索引：</strong> 对表中一列或多列的值进行排序的结果，类似书籍的目录，使用索引可以快速访问数据库表表中的特定信息</li><li><strong>参照完整性：</strong> 要求关系中<strong>不允许引用不存在的实体</strong>，实体完整性是关系模型中必须满足的完整性约束条件，目的是保证数据的<strong>一致性</strong></li></ul><h3 id="Appendix-use-mac-to-login-mysql"><a href="#Appendix-use-mac-to-login-mysql" class="headerlink" title="Appendix: use mac to login mysql"></a>Appendix: use mac to login mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h localhost -u root -p</span><br></pre></td></tr></table></figure><blockquote><p>当mysql运行在服务端时，需要切换到目标文件夹才能使用，不能直接在终端打开</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> \usr\<span class="built_in">local</span>\mysql</span><br></pre></td></tr></table></figure><p>后<code>mysql</code>可以直接登录（如果名字为root的话） ，正常方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h yourip -u yourmysqlname -p</span><br></pre></td></tr></table></figure><p>之后输入密码就阔以了</p><blockquote><p>如果进入mysql后输入mysql命令还是失败，下面这个方法直接解决问题</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> mysql = \usr\<span class="built_in">local</span>\mysql\bin\mysql</span><br><span class="line"><span class="built_in">alias</span> mysqladmin = \usr\<span class="built_in">local</span>\mysql\bin\mysqladmin</span><br></pre></td></tr></table></figure><blockquote><p>虽然不知道为什么，我新一轮使用mysql都要更名一次….</p></blockquote><p>选用的GUI界面为<a href="https://sequelpro.com/download#auto-start"><code>Sequal Pro</code></a></p><p><strong>参数说明</strong></p><ul><li><code>-h</code>: 指定客户端需要登陆的mysql的主机名，登陆本机（localhost或者127.0.0.1）时该参数可以忽略</li><li><code>-u</code>:登陆的用户名</li><li><code>-p</code>:告诉服务器将使用一个密码来登陆，如果无密码，缺省即可</li></ul><p>输入<code>exit</code>或者<code>quit</code>来退出</p><hr><h2 id="2-Use-Mysql"><a href="#2-Use-Mysql" class="headerlink" title="2 Use Mysql"></a>2 Use Mysql</h2><h3 id="2-1-Create-Users"><a href="#2-1-Create-Users" class="headerlink" title="2.1 Create Users"></a>2.1 Create Users</h3><p>在尝试了各种debug后，对于我的系统（MacBook Pro OSx 14.6）即使删除了bin目录中的mode，这条插入用户的语句还是用不了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into mysql.user(Host,User,Password) values(&quot;localhost&quot;,&quot;test&quot;,password(&quot;1234&quot;));</span><br></pre></td></tr></table></figure><p>查了很多资料，在05年就不提倡上述方法插入用户（虽然我觉得很直观），而是这样的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT USAGE ON *.* TO &#39;user01&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p>此时用户：<code>user01</code>, 密码为<code>123456</code>。</p><p>如果需要赋予该用户修改等操作的权利，需要对所建立的用户进行授权，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP ON tablename.* TO &#39;username&#39;@&#39;localhost&#39; INDENTIFIED BY &#39;password&#39;</span><br></pre></td></tr></table></figure><p>相关参数：</p><ul><li><code>tablename</code>: 替换为授权访问的数据表的table名</li></ul><blockquote><p>这样就为该用户授予了对某数据表的SELECT,INSERT,UPDATE,DELETE,CREATE,DROP的权限</p></blockquote><p><font color=red><strong>创建用户的最后都需要生效授权后，才算创建完毕</strong></font>, 对应指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><blockquote><p>仅限于我的系统，对于原有的指令（insert into）说不定你的系统能使用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP</span><br><span class="line">    -&gt; ON TUTORIALS.*</span><br><span class="line">    -&gt; TO &#39;username&#39;@&#39;localhost&#39;</span><br><span class="line">    -&gt; IDENTIFIED BY &#39;password&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>该指令会在mysql数据库中的user表创建一条用户信息的记录</p></blockquote><h3 id="2-2-Common-Used-Instructions"><a href="#2-2-Common-Used-Instructions" class="headerlink" title="2.2 Common Used Instructions"></a>2.2 Common Used Instructions</h3><ul><li><strong>操作指定的数据库</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use xxx;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><ul><li><strong>显示mysql中有的数据库列表</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/03/16/5ah6AWEBj2pRsIV.png" alt="image-20210214114049857.png" style="zoom:50%;" /><ul><li><strong>显示数据库中所有表</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; run mysql;</span><br><span class="line">Database changed;</span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/03/16/K2LcWyhQkMw9UX4.png" alt="image-20210214114219484.png" style="zoom:50%;" /><ul><li><strong>显示数据表的列信息</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM xxx;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/03/16/owyEaQK7VmX4r13.png" alt="image-20210214114404630.png" style="zoom:50%;" /><h3 id="2-3-MySQL-connection"><a href="#2-3-MySQL-connection" class="headerlink" title="2.3 MySQL connection"></a>2.3 MySQL connection</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~yourname$ mysql -h localhost -u root -p</span><br></pre></td></tr></table></figure><ul><li>root可以修改为任何用户</li><li>用户权限足够时，任何用户都可以在mysql命令行提示窗口中进行sql操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; exit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><p>退出mysql～</p><h3 id="2-4-Create-DB"><a href="#2-4-Create-DB" class="headerlink" title="2.4 Create DB"></a>2.4 Create DB</h3><h4 id="2-4-1-create-directly"><a href="#2-4-1-create-directly" class="headerlink" title="2.4.1 create directly"></a>2.4.1 create directly</h4><ul><li><strong>普通用户</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 数据库名</span><br></pre></td></tr></table></figure><ul><li><strong>使用mysqladmin 来创建数据库</strong></li></ul><blockquote><p>只有拥有最高权限的root用户才能够使用mysqladmin来创建数据库</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p create databaseName</span><br></pre></td></tr></table></figure><h4 id="2-4-2-definr-table’s-info"><a href="#2-4-2-definr-table’s-info" class="headerlink" title="2.4.2 definr table’s info"></a>2.4.2 definr table’s info</h4><p>创建数据表需要这些信息：</p><ul><li>表名</li><li>表字段名</li><li>定义每个表字段</li></ul><p>通用语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name(column_name column_type);</span><br></pre></td></tr></table></figure><p>实例分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;Try&#96;(</span><br><span class="line">&#96;id&#96; INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">&#96;title&#96; VARCHAR(100) NOT NULL,</span><br><span class="line">&#96;author&#96; VARCHAR(40) NOT NULL,</span><br><span class="line">&#96;date&#96; DATE,</span><br><span class="line">PRIMARY KEY (&#39;id&#39;)</span><br><span class="line">)ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><blockquote><ul><li>字段不为null时设置属性为not null，此时如果输入字段的数据为null时，会报错</li><li>AUTO_INCREMENT 定义列属性为自增，一般用于主键，数值会自动加1</li><li>PRIMARY KEY 定义列为主键，可以使用多列来定义主键，但列间需要以逗号分隔</li><li>ENGINE 设置<strong>存储引擎</strong>， CHARSET<strong>设置编码</strong></li></ul></blockquote><h4 id="2-4-3-storage-engines"><a href="#2-4-3-storage-engines" class="headerlink" title="2.4.3 storage engines"></a>2.4.3 storage engines</h4><blockquote><p>只记录了重要特点，详细的结构看看这篇<a href="https://blog.csdn.net/zgrgfr/article/details/74455547">博客</a>吧～</p></blockquote><h5 id="lt-1-gt-MyISAM"><a href="#lt-1-gt-MyISAM" class="headerlink" title="&lt;1&gt; MyISAM"></a>&lt;1&gt; MyISAM</h5><p><strong>特点：</strong> 插入、查询速度较快，但<strong>不支持事务</strong>，并且数据文件和索引文件放在不同目录下（InnoDB放于同一目录）</p><p>使用<strong>B+Tree</strong>作为索引结构，叶子节点的data域内存放的是数据记录的地址。</p><h5 id="lt-2-gt-InnoDB"><a href="#lt-2-gt-InnoDB" class="headerlink" title="&lt;2&gt; InnoDB"></a>&lt;2&gt; InnoDB</h5><p><strong>特点：</strong> 事务型数据库的首选引擎，支持事务安全表（ACID），同时支持<strong>行锁定</strong>和<strong>外键</strong>。</p><p>表数据文件按照B+Tree来组织的索引结构，同时叶节点保存了完整的数据记录，逻辑关系为：</p><blockquote><p>索引的key为数据表的主键，InnoDB表数据文件本身为主索引</p><p>（所以在InnoDB的表中必须要有主键）</p></blockquote><p>为<strong>聚集索引</strong></p><h5 id="lt-3-gt-MEMORY"><a href="#lt-3-gt-MEMORY" class="headerlink" title="&lt;3&gt; MEMORY"></a>&lt;3&gt; MEMORY</h5><blockquote><p>将表中的数据存储到内存当中，为查询和引用其他表数据能提供快速的访问</p></blockquote><h5 id="lt-4-gt-Archive"><a href="#lt-4-gt-Archive" class="headerlink" title="&lt;4&gt; Archive"></a>&lt;4&gt; Archive</h5><p>如果只有INSERT和SELECT操作，可以选择Archive，因为Archive支持高并发的插入操作，但其本身不是事务安全的，适合存储归档数据，如记录日志信息等</p><h4 id="2-5-Delete-DB"><a href="#2-5-Delete-DB" class="headerlink" title="2.5 Delete DB"></a>2.5 Delete DB</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database databaseName;</span><br></pre></td></tr></table></figure><ul><li><strong>使用mysqladmin来删除数据库</strong></li></ul><blockquote><p>不同点在于执行删除命令是，会提示是否真的要删除数据库</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; mysqladmin -u root -p drop databaseName;</span><br></pre></td></tr></table></figure><ul><li><strong>数据类型</strong></li></ul><p>支持三类：数值，日期和时间及字符串</p><h2 id="3-Begin-again"><a href="#3-Begin-again" class="headerlink" title="3 Begin again"></a>3 Begin again</h2><h3 id="3-1-import-data"><a href="#3-1-import-data" class="headerlink" title="3.1 import data"></a>3.1 import data</h3><p> <a href="../Downloads/mysqlsampledatabase.zip">mysqlsampledatabase.zip</a> </p><p>将该zip文件解压后，文件在目录不在mysql中，所以需要source xx该<code>.sql</code>文件地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source 「直接将文件拖到终端中」</span><br></pre></td></tr></table></figure><h3 id="3-2-verifing-data-table"><a href="#3-2-verifing-data-table" class="headerlink" title="3.2 verifing data table"></a>3.2 verifing data table</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use classicmodel;</span><br><span class="line">database changed</span><br><span class="line">mysql&gt; select * from customers;</span><br></pre></td></tr></table></figure><p>可以选择一个你想查看的表。</p><img src="https://i.loli.net/2021/03/16/3XKMfY7GTaJqn12.png" alt="image-20210216165605039.png" style="zoom:50%;" /><p>选择offices表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from offices;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/03/16/SDemUFtcylvduGV.png" alt="image-20210216165652086.png" style="zoom:50%;" /><h2 id="4-Basic-grammar-—-select-amp-sorting"><a href="#4-Basic-grammar-—-select-amp-sorting" class="headerlink" title="4 Basic grammar — select &amp; sorting"></a>4 Basic grammar — select &amp; sorting</h2><h3 id="4-1-Select-—-Quering-data"><a href="#4-1-Select-—-Quering-data" class="headerlink" title="4.1 Select —- Quering data"></a>4.1 Select —- Quering data</h3><h4 id="4-1-1-single-list"><a href="#4-1-1-single-list" class="headerlink" title="4.1.1 single list"></a>4.1.1 single list</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select list_name</span><br><span class="line">from table_name</span><br></pre></td></tr></table></figure><p>以demotable中的<code>employees</code>表为例，在<code>sequel pro</code>中，显示为：</p><img src="https://i.loli.net/2021/03/16/JBvVTFrO8afhL1R.png" alt="image-20210217100343106.png" style="zoom:50%;" /><p>我们取其中的firstName，为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select firstName</span><br><span class="line">from employees;</span><br></pre></td></tr></table></figure><p>可以得到：</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217100541194.png" alt="image-20210217100541194" style="zoom:38%;" /><blockquote><p>注意这里需要先<code>use classicmodel</code></p></blockquote><h4 id="4-1-2-multi-lists"><a href="#4-1-2-multi-lists" class="headerlink" title="4.1.2 multi-lists"></a>4.1.2 multi-lists</h4><p>想取表中多个列时，各列间以<code>,</code>分隔。依旧以employees表为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">lastName,</span><br><span class="line">firstName,</span><br><span class="line">email</span><br><span class="line">from employees;</span><br></pre></td></tr></table></figure><p>结果：</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217101119655.png" alt="image-20210217101119655" style="zoom:50%;" /><h4 id="4-1-3-all-columns"><a href="#4-1-3-all-columns" class="headerlink" title="4.1.3 all-columns"></a>4.1.3 all-columns</h4><p>使用asterisk($*$)，表示<code>select star</code> ,<code>select all</code>,依旧以<code>employees</code>表为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from employees;</span><br></pre></td></tr></table></figure><p>但在实际使用中会出现以下问题：</p><ul><li>当列很多时，处理器可能会爆；</li><li>如果后面有同事加入其他冗余列，查找需要列就会变得十分复杂；</li><li>给别人expose时，可能会暴露隐私信息。</li></ul><h3 id="4-2-Order-by-—-sorting-data"><a href="#4-2-Order-by-—-sorting-data" class="headerlink" title="4.2 Order by — sorting data"></a>4.2 Order by — sorting data</h3><h4 id="4-2-1-concept"><a href="#4-2-1-concept" class="headerlink" title="4.2.1 concept"></a>4.2.1 concept</h4><blockquote><p>在这里： <code>ASC</code>为ascend，表示升序sorting；<code>DESC</code>为descend，表示降序sorting</p></blockquote><p><font color=red><strong>使用<code>order by</code> 缺省时，默认为<code>ASC</code>.</strong></font></p><h4 id="4-2-2-multi-columns-op"><a href="#4-2-2-multi-columns-op" class="headerlink" title="4.2.2 multi-columns op"></a>4.2.2 multi-columns op</h4><p>举个栗子，依旧是我们可爱的<code>employees</code> table，在一开始时先选定database中的目标表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select list_name</span><br><span class="line">form table_name</span><br><span class="line">order by</span><br><span class="line">column1 [ASC|DESC],</span><br><span class="line">column2 [ASC|DESC];</span><br></pre></td></tr></table></figure><blockquote><p>here’s column_2 is permmitted by the list_name have multi-columns「即至少选择了两个列～」</p></blockquote><p>栗子中的EMPLOYEES表为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select lastName,</span><br><span class="line">employeeNumber</span><br><span class="line">from employees</span><br><span class="line">order by</span><br><span class="line">lastName DESC,</span><br><span class="line">employeeNumber desc;</span><br></pre></td></tr></table></figure><p>Demo:</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217103522004.png" alt="image-20210217103522004" style="zoom:50%;" /><blockquote><p>Demostrate: in letter, it was descended by ‘z-a’; in number, ….</p></blockquote><h4 id="4-2-3-create-specified-column-by-chosen-lists"><a href="#4-2-3-create-specified-column-by-chosen-lists" class="headerlink" title="4.2.3 create specified column by chosen lists"></a>4.2.3 create specified column by chosen lists</h4><p>使用classicmodels中的<code>orderdetails</code>进行操作：</p><p>在该表中有<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217104620898.png" alt="image-20210217104620898" style="zoom:50%;" /></p><p>为了使营业额和顾客重要程度显示的更清楚，选取<code>orderNumber</code>，<code>orderLineNumber</code> 并列后，以$quantityOrdered\ *\ priceEach\quad desc;$来排序整个表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">ordernumber,</span><br><span class="line">orderlinenumber,</span><br><span class="line">quantityordered * priceeach</span><br><span class="line">from orderdetails</span><br><span class="line">order by</span><br><span class="line">quantityordered * priceeach desc;</span><br></pre></td></tr></table></figure><p>结果：</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217105015878.png" alt="image-20210217105015878" style="zoom:50%;" /><blockquote><p>为了使数据更加visualization，可以将新增列重新命名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">ordernumber,</span><br><span class="line">orderlinenumber,</span><br><span class="line">quantityordered * priceeach as subtotal</span><br><span class="line">from orderdetails</span><br><span class="line">order by</span><br><span class="line">subtotal desc;</span><br></pre></td></tr></table></figure><p><strong>Demo</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217110105849.png" alt="image-20210217110105849" style="zoom:50%;" /><h4 id="4-2-4-identified-sorting-function"><a href="#4-2-4-identified-sorting-function" class="headerlink" title="4.2.4 identified sorting function"></a>4.2.4 identified sorting function</h4><p>使用<code>field(value, str1, str2, str3, str4)</code>在每次对比表中的数据时通过对比<code>str(x)</code>与<code>value</code>返回对应值，如果该值不存在，返回0.</p><p>以<code>orders</code>表中的<code>status</code>为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select orderNumber, status </span><br><span class="line">from orders </span><br><span class="line">order by </span><br><span class="line">field(status, &#39;In Process&#39;, &#39;On Hold&#39;, &#39;Cancelled&#39;, &#39;Resolved&#39;, &#39;Disputed&#39;, &#39;Shipped&#39;);</span><br></pre></td></tr></table></figure><blockquote><p>在这里被选取的列的排列顺序由<code>status</code>决定</p></blockquote><h2 id="5-Basic-grammar-—-filtering-data"><a href="#5-Basic-grammar-—-filtering-data" class="headerlink" title="5 Basic grammar — filtering data"></a>5 Basic grammar — filtering data</h2><h3 id="5-1-where"><a href="#5-1-where" class="headerlink" title="5.1 where"></a>5.1 where</h3><blockquote><p>使用久违的<code>employees table～～～</code></p></blockquote><p>在执行过程中的logically executing followings as expressed:<br>$$<br>where \Rightarrow from \Rightarrow select \Rightarrow order\ by<br>$$</p><h4 id="5-1-1-search-the-same-value"><a href="#5-1-1-search-the-same-value" class="headerlink" title="5.1.1 search the same value"></a>5.1.1 search the same value</h4><p>将一列中等值行提取出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">lastName, firstName, jobTitle </span><br><span class="line">from employees </span><br><span class="line">where jobTitle &#x3D; &#39;Sales Rep&#39;;</span><br></pre></td></tr></table></figure><p><strong>demo：</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217120103282.png" alt="image-20210217120103282" style="zoom:50%;" /><h4 id="5-1-2-logically-ops"><a href="#5-1-2-logically-ops" class="headerlink" title="5.1.2 logically ops"></a>5.1.2 logically ops</h4><p>在提取列的时候可以使用逻辑运算：<code>AND,OR,BETWEEN,LIKE,IN, IS NULL</code>，逻辑运算符也可以使用：<code>&gt;=,&lt;=,!= ...</code>。选几个讲一下</p><ul><li><code>between low(value) and high(value)</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select lastName, firstName, jobTitle, officeCode </span><br><span class="line">from employees </span><br><span class="line">where </span><br><span class="line">officeCode between 1 and 3;</span><br></pre></td></tr></table></figure><p>返回officecode在1～3的行</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217121117655.png" alt="image-20210217121117655" style="zoom:50%;" /><ul><li><code>LIKE &#39;str&#39;</code></li></ul><p>like通过通配符<code>%</code>,<code>_</code>来匹配特定字符串，其中<code>%</code>代表多个字母或空字符，而<code>_</code>仅代表任意一个字母</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select lastName, firstName, jobTitle, officeCode </span><br><span class="line">from employees </span><br><span class="line">where jobTitle like &#39;%ep&#39;;</span><br></pre></td></tr></table></figure><p>通配后缀为<code>ep</code>的数据：</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217121532213.png" alt="image-20210217121532213" style="zoom:50%;" /><ul><li><code>IN (VALUE1,VALUE2,VALUE3)</code></li></ul><p>between是范围查找，in是特定值查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select lastName, firstName, jobTitle, officeCode </span><br><span class="line">from employees </span><br><span class="line">where officeCode in (1,4,6)</span><br><span class="line">order by </span><br><span class="line">officecode;</span><br></pre></td></tr></table></figure><p>提取出officeCode为<code>1,4,6</code>的用户：</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217122325752.png" alt="image-20210217122325752" style="zoom:50%;" /><ul><li><code>IS NULL</code>用来查找是否有用户该值为空，为空返回1，显示出来</li></ul><blockquote><p>这个就不demo了，因为要吃饭了qwq</p></blockquote><p><strong>特殊的是：</strong> 在逻辑运算符中<code>!=</code>与<code>&lt;&gt;</code>同样表示不等关系</p><h3 id="5-2-distinct"><a href="#5-2-distinct" class="headerlink" title="5.2 distinct"></a>5.2 distinct</h3><blockquote><p>operating table : <code>employees</code></p></blockquote><p>在filter类的操作中，distinct用来消除duplicate rows，使table更加整洁</p><h4 id="5-2-1-basic-usage"><a href="#5-2-1-basic-usage" class="headerlink" title="5.2.1 basic usage"></a>5.2.1 basic usage</h4><p>先来看看表的数据是否重复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select lastName </span><br><span class="line">from employees </span><br><span class="line">order by lastName;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217123041888.png" alt="image-20210217123041888" style="zoom:38%;" /><p>有多个值重复，用<code>distinct</code>消灭它们～</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">distinct lastName </span><br><span class="line">from employees </span><br><span class="line">order by lastName;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217123215931.png" alt="image-20210217123215931" style="zoom:38%;" /><blockquote><p>如果表中有空值，会被消除到只剩一个，因为处理器将<code>NULL</code>值视为same value。因此在每次操作时，最好使用where来避免null值的出现</p></blockquote><ul><li><strong>多列消除重复值</strong></li></ul><blockquote><p>using table: customers</p></blockquote><p>先取出要消除的列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select </span><br><span class="line">    -&gt; state, city</span><br><span class="line">    -&gt; from customers</span><br><span class="line">    -&gt; where state is not NULL</span><br><span class="line">    -&gt; ordered by state;</span><br></pre></td></tr></table></figure><p>得到相关子表：</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217124707836.png" alt="image-20210217124707836" style="zoom:50%;" /><p>来保留不同的state-city，加个<code>distinct</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">distinct state, city </span><br><span class="line">from customers </span><br><span class="line">where state is not NULL </span><br><span class="line">order by state;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-distinct-vs-group-by"><a href="#5-2-2-distinct-vs-group-by" class="headerlink" title="5.2.2 distinct $vs$ group by"></a>5.2.2 distinct $vs$ group by</h4><p>消除效果相同，呈现效果的差异体现在：</p><ol><li>加的位置不同；</li><li>group by最后呈现的结果是<code>ASC</code>的</li></ol><ul><li><code>distinct</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">distinct state</span><br><span class="line">from customers;</span><br></pre></td></tr></table></figure><ul><li><code>group by</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">state</span><br><span class="line">from customers </span><br><span class="line">group by state;</span><br></pre></td></tr></table></figure><h4 id="5-2-3-relevant-aggregate-functions"><a href="#5-2-3-relevant-aggregate-functions" class="headerlink" title="5.2.3 relevant aggregate functions"></a>5.2.3 relevant aggregate functions</h4><h5 id="lt-1-gt-sum-类"><a href="#lt-1-gt-sum-类" class="headerlink" title="&lt;1&gt; sum 类"></a>&lt;1&gt; sum 类</h5><p>将不重复值统计的函数有：<code>SUM</code>, <code>AVG</code>及<code>COUNT</code></p><p>举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">COUNT(state) </span><br><span class="line">from customers </span><br><span class="line">WHERE state&#x3D;&#39;NV&#39;;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217130837321.png" alt="image-20210217130837321" style="zoom:50%;" /><h5 id="lt-2-gt-limit"><a href="#lt-2-gt-limit" class="headerlink" title="&lt;2&gt; limit"></a>&lt;2&gt; limit</h5><p>显示表limit value的前value列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">distinct state </span><br><span class="line">from customers </span><br><span class="line">where state is not null </span><br><span class="line">limit 5;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210217131111534.png" alt="image-20210217131111534" style="zoom:50%;" /><h2 id="6-Joining-tables"><a href="#6-Joining-tables" class="headerlink" title="6  Joining tables"></a>6  Joining tables</h2><h3 id="6-1-Columns-alias"><a href="#6-1-Columns-alias" class="headerlink" title="6.1 Columns alias"></a>6.1 Columns alias</h3><p>通过选取列，选择合并的函数<code>expression</code>来重新alias列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">[column_1 | expression] as &#39;change_name&#39;</span><br><span class="line">from </span><br><span class="line">table_name;</span><br></pre></td></tr></table></figure><p>选我们熟悉的<code>employees</code>作为演示吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">concat_ws(&#39;,&#39;, lastName, firstName) as &#39;Full name&#39; </span><br><span class="line">from employees </span><br><span class="line">order by &#39;Full name&#39;;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210218144331517.png" alt="image-20210218144331517" style="zoom:50%;" /><ul><li><code>concat_ws()</code>作为<code>concatenate</code>函数，连接列</li><li><code>as</code>可省去，但略过了会缺少可读性</li><li><code>group by</code>, <code>having</code>, <code>order by</code>都能够使用</li><li><code>where</code>在这里不能使用，mysql在这种情况下处理where语句时会忽略<code>select</code>中的列</li><li><code>having</code>的用于筛选出specified column中符合having <code>range</code>中于<code>range</code>的值</li></ul><p><strong>summary：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">orderNumber &#96;order no.&#96;, </span><br><span class="line">sum(quantityOrdered * priceEach) total </span><br><span class="line">from orderdetails </span><br><span class="line">group by &#96;order no.&#96; </span><br><span class="line">having total &gt; 60000;</span><br></pre></td></tr></table></figure><ul><li><code>having</code>需要和<code>group by</code>联合使用</li></ul><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210218150119595.png" alt="image-20210218150119595" style="zoom:50%;" /><h3 id="6-2-Table-alias-–-Join"><a href="#6-2-Table-alias-–-Join" class="headerlink" title="6.2 Table alias – Join"></a>6.2 Table alias – Join</h3><blockquote><p>table 的一般alias使用的方法为：<code>inner join</code>, <code>left join</code>, <code>right join</code> , <code>cross join</code>and in <code>subqueries</code>.</p><p>目前mysql还不支持<code>full outer join</code>方法</p><p>join方法一般用于处理事务关系型数据库，避免出现<code>ambiguous error</code>的问题</p></blockquote><h4 id="6-2-1-simple-alias"><a href="#6-2-1-simple-alias" class="headerlink" title="6.2.1 simple alias"></a>6.2.1 simple alias</h4><p>将table别名后，使用<code>.</code>调用即可，通用格式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from table_name (as) alias_name</span><br></pre></td></tr></table></figure><p>依旧是可爱的<code>employees</code>表～</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select  </span><br><span class="line">concat_ws(&#39;,&#39;, e.lastName, e.firstName) &#39;Full name&#39; </span><br><span class="line">from employees e </span><br><span class="line">order by &#39;Full name&#39;;</span><br></pre></td></tr></table></figure><p>结果跟之前列合并的demo没区别～</p><h4 id="6-2-2-Setting-up-sample-table"><a href="#6-2-2-Setting-up-sample-table" class="headerlink" title="6.2.2 Setting up sample table"></a>6.2.2 Setting up sample table</h4><p>为了更好的展现功能，先创建个可以乱用的表格吧～</p><p>这里直接开始创建了，后面会详细解释各个属性的创建流程</p><ol><li><strong>Creating two tables</strong></li></ol><blockquote><p>members &amp; commitees</p><p>ovo, committee 拼错了，但我不想改了qwq</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table members(</span><br><span class="line">    -&gt; member_id INT AUTO_INCREMENT,</span><br><span class="line">    -&gt; name VARCHAR(100),</span><br><span class="line">    -&gt; PRIMARY KEY(&#39;member_id&#39;)</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table commitees(</span><br><span class="line">    -&gt; commitee_id INT AUTO_INCREMENT,</span><br><span class="line">    -&gt; name VARCHAR(100),</span><br><span class="line">    -&gt; PRIMARY KEY(commitee_id)</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure><ul><li><code>AUTO_INCREMENT</code>为表中<code>id</code>自动自增的定义</li></ul><blockquote><p>文章中2.4.2 提到过一点点</p></blockquote><ol start="2"><li><strong>Insert datas</strong></li></ol><p>采用格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into </span><br><span class="line">table_name(create_column_name)</span><br><span class="line">values(&#39;&#39;)(&#39;&#39;)...(&#39;&#39;)</span><br></pre></td></tr></table></figure><ul><li>在同一列中创建的<code>values</code>值依序排列</li><li><font color=red><strong>注意values与<code>table_name(...)</code>间没有分隔符</strong></font></li></ul><p><strong>demo：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into </span><br><span class="line">members(name)</span><br><span class="line">values(&#39;joe&#39;),(&#39;jane&#39;),(&#39;mary&#39;),(&#39;selina&#39;),(&#39;haha&#39;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into </span><br><span class="line">    -&gt; commitees(name)</span><br><span class="line">    -&gt; values(&#39;qwq&#39;),(&#39;ovo&#39;),(&#39;mary&#39;),(&#39;selina&#39;),(&#39;qaq&#39;);</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>Quering datas</strong></li></ol><ul><li><code>members</code>:</li></ul><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210218154502490.png" alt="image-20210218154502490" style="zoom:50%;" /><ul><li><code>commitees</code>:</li></ul><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210218154528060.png" alt="image-20210218154528060" style="zoom:45%;" /><h4 id="6-2-3-inner-join"><a href="#6-2-3-inner-join" class="headerlink" title="6.2.3 inner join"></a>6.2.3 inner join</h4><p>内部的排布，可以看作是集合中的交集，<code>inner join</code>会新开列来存储两张表中存在符合<code>join_condition</code>的数据，一般使用格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select column_list</span><br><span class="line">from table1_name</span><br><span class="line">inner join table2_name on join_condition</span><br></pre></td></tr></table></figure><ul><li>为了方便表示，<code>column_list</code>包含多个<code>column</code>，而<code>column_name</code>仅表示specified column.</li></ul><p>当这两个表格的需要<code>join</code>的列名相同时，可以使用<code>using(column_name)</code>来合并，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select column_list</span><br><span class="line">from table1_name</span><br><span class="line">inner join table2_name using (column_name)</span><br></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select </span><br><span class="line">    -&gt; m.member_id,</span><br><span class="line">    -&gt; m.name as member,</span><br><span class="line">    -&gt; c.commitee_id,</span><br><span class="line">    -&gt; c.name as commitee</span><br><span class="line">    -&gt; from members m</span><br><span class="line">    -&gt; inner join commitees c on m.name&#x3D;c.name;</span><br></pre></td></tr></table></figure><blockquote><p><code>join_condition</code>决定了产生的列是什么</p></blockquote><ul><li>在<code>column_list</code>中要把需要合并的两列都表示出来，如果列同名但没有表示的话，会出现<code>ambigous error</code></li></ul><p><strong>Demo:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210218160531098.png" alt="image-20210218160531098" style="zoom:50%;" /><blockquote><p>显示交集对象</p></blockquote><p>使用<code>using(...)</code>得到的结果相同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select </span><br><span class="line">    -&gt; m.member_id,</span><br><span class="line">    -&gt; m.name as member,</span><br><span class="line">    -&gt; c.commitee_id,</span><br><span class="line">    -&gt; c.name as commitee</span><br><span class="line">    -&gt; from members m</span><br><span class="line">    -&gt; inner join commitees c using(name);</span><br></pre></td></tr></table></figure><h4 id="6-2-4-left-join"><a href="#6-2-4-left-join" class="headerlink" title="6.2.4 left join"></a>6.2.4 left join</h4><p>$$<br>Left \ join(A, B) = A<br>$$</p><p>对于B中的元素，若有$b\notin A$，将$b$所对应的所有属性设为<code>null</code>.</p><p><strong>Venn图表示为：</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210218165153861.png" alt="image-20210218165153861" style="zoom:50%;" /><p>举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select </span><br><span class="line">    -&gt; m.member_id,</span><br><span class="line">    -&gt; m.name as member,</span><br><span class="line">    -&gt; c.commitee_id,</span><br><span class="line">    -&gt; c.name as commitee</span><br><span class="line">    -&gt; from members as m</span><br><span class="line">    -&gt; left join commitees as c using(name);</span><br></pre></td></tr></table></figure><p><strong>Demo：</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210218165303052.png" alt="image-20210218165303052" style="zoom:50%;" /><p>如果只想保留$A\overline{B}$，通过<code>where</code>来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">m.member_id, </span><br><span class="line">m.name as member, </span><br><span class="line">c.commitee_id, </span><br><span class="line">c.name as commitee </span><br><span class="line">from members as m left </span><br><span class="line">join commitees as c using(name) </span><br><span class="line">where c.name is null;</span><br></pre></td></tr></table></figure><p><strong>Demo：</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210218165657012.png" alt="image-20210218165657012" style="zoom:50%;" /><p>简化版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">m.member_id, </span><br><span class="line">m.name as member, </span><br><span class="line">from members as m left </span><br><span class="line">join commitees as c using(name) </span><br><span class="line">where c.name is null;</span><br></pre></td></tr></table></figure><p><strong>Demo:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210218165749727.png" alt="image-20210218165749727" style="zoom:50%;" /><blockquote><p>RIGHT JOIN 就是把B跟A的关系换了一下，不再赘述了</p></blockquote><h4 id="6-2-5-cross-join"><a href="#6-2-5-cross-join" class="headerlink" title="6.2.5 cross join"></a>6.2.5 cross join</h4><p>与之前提过的<code>join</code>方法不同的是，<code>cross join</code>没有<code>join_condition</code></p><p><code>cross join</code>可以表示为集合<code>A</code>中每个元素都与集合<code>B</code>中每个元素产生映射关系，假设集合<code>A</code>中有<code>m</code>个元素，集合<code>B</code>中有<code>n</code>个元素，建立的映射关系一共会产生$n\times m$ 行。</p><p>举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">m.member_id, </span><br><span class="line">m.name as member, </span><br><span class="line">c.commitee_id,  </span><br><span class="line">c.name as commitee </span><br><span class="line">from members as m </span><br><span class="line">cross join commitees c;</span><br></pre></td></tr></table></figure><p><strong>Demo：</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210219102652885.png" alt="image-20210219102652885" style="zoom:40%;" /><blockquote><p>可以看到，对于members中每一位对象都会与commitee对象进行一对一的映射</p></blockquote><h3 id="6-3-self-join-table"><a href="#6-3-self-join-table" class="headerlink" title="6.3 self-join table"></a>6.3 self-join table</h3><blockquote><p>一般用于处理表中的hierarchical data，即将上下级关系直观表述出</p></blockquote><p>对<code>employees</code>表中的<code>employeeNumber</code>与<code>reportsTo</code>展示上下属关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select  </span><br><span class="line">concat_ws(&#39;,&#39;,e.lastName,e.firstName) as manager, concat_ws(&#39;,&#39;,r.lastName,r.firstName) as engineer </span><br><span class="line">from employees e </span><br><span class="line">inner join employees r on e.employeeNumber&#x3D;r.reportsTo;</span><br></pre></td></tr></table></figure><p><strong>Demo:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210219104253044.png" alt="image-20210219104253044" style="zoom:50%;" /><p>通过这个方法体现上下属关系，但问题来了，最高级领导怎么办呢？</p><blockquote><p>最高级领导因为reportsTo为<code>NULL</code>显示不出</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    IFNULL(CONCAT(m.lastname, &#39;, &#39;, m.firstname),</span><br><span class="line">            &#39;Top Manager&#39;) AS &#39;Manager&#39;,</span><br><span class="line">    CONCAT(e.lastname, &#39;, &#39;, e.firstname) AS &#39;Direct report&#39;</span><br><span class="line">FROM</span><br><span class="line">    employees e</span><br><span class="line">LEFT JOIN employees m ON </span><br><span class="line">    m.employeeNumber &#x3D; e.reportsto</span><br><span class="line">ORDER BY </span><br><span class="line">    manager DESC;</span><br></pre></td></tr></table></figure><p><strong>Demo:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210219112746638.png" alt="image-20210219112746638" style="zoom:50%;" /><p>这样能显示出最高级。</p><ul><li><code>concat_ws(&#39;signal&#39;, str1, str2, ...)</code>,将各个<code>str</code>用<code>signal</code>连接起来，而<code>concat(str1,&#39;signal&#39;,str2,&#39;signal&#39;,...)</code>则是将各个<code>str</code>以特定的<code>signal</code>连接起来</li><li><code>ifnull(expression | judgeValue)</code>对于符合条件的<code>expression</code>返回<code>expression</code>,否则返回<code>judgeValue</code></li></ul><h2 id="7-Grouping-Data"><a href="#7-Grouping-Data" class="headerlink" title="7 Grouping Data"></a>7 Grouping Data</h2><blockquote><p>MySQL 在执行过程中按照一定顺序对数据处理，不能改变流程执行的顺序</p></blockquote><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210219114012596.png" alt="image-20210219114012596" style="zoom:50%;" /><p>因此group by注意放在<code>from, where, select</code>后面</p><p>使用group by的场景下一般使用集合合并的函数<code>sum, count, avg, max, min etc.</code></p><h3 id="7-1-simple-group"><a href="#7-1-simple-group" class="headerlink" title="7.1 simple group"></a>7.1 simple group</h3><blockquote><p>group by 将同一类的总和在一起，显示某个column中一共有多少不同的类别</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select status</span><br><span class="line">    -&gt; from orders</span><br><span class="line">    -&gt; group by status;</span><br></pre></td></tr></table></figure><p><strong>Demo:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210219115743895.png" alt="image-20210219115743895" style="zoom:50%;" /><p>group by的简单实现与<code>distinct</code>实现方式相同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select distinct status</span><br><span class="line">    -&gt; from orders</span><br></pre></td></tr></table></figure><h3 id="7-2-use-aggregate-function"><a href="#7-2-use-aggregate-function" class="headerlink" title="7.2 use aggregate function"></a>7.2 use aggregate function</h3><h4 id="7-2-1-statistics-of-a-group"><a href="#7-2-1-statistics-of-a-group" class="headerlink" title="7.2.1 statistics of a group"></a>7.2.1 statistics of a group</h4><blockquote><p>使用<code>count(*)</code>来进行统计</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select</span><br><span class="line">    -&gt; status, count(*)</span><br><span class="line">    -&gt; from orders</span><br><span class="line">    -&gt; group by status;</span><br></pre></td></tr></table></figure><p><strong>Demo:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210219120342983.png" alt="image-20210219120342983" style="zoom:50%;" /><p>由此，统计出各类别的所包含的对象数量</p><h4 id="7-2-2-statistics-of-some-groups"><a href="#7-2-2-statistics-of-some-groups" class="headerlink" title="7.2.2 statistics of some groups"></a>7.2.2 statistics of some groups</h4><p>在统计多个数据时，将有关联的两张表数据通过<code>join</code>的方式呈现</p><p>举个栗子：对于所给的database中的<code>orders</code>及<code>orderdetails</code>中相关联的是<code>orderNumber</code>的细节数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select </span><br><span class="line">    -&gt; status, sum(quantityOrdered * priceEach) as counting</span><br><span class="line">    -&gt; from orders</span><br><span class="line">    -&gt; inner join orderdetails using(orderNumber)</span><br><span class="line">    -&gt; group by status;</span><br></pre></td></tr></table></figure><p>由此得到每个类别的经营总额：</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210219121910618.png" alt="image-20210219121910618" style="zoom:50%;" /><p>同样的，可以使用相同方法对单个<code>orderNumber</code>进行操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select</span><br><span class="line">    -&gt; orderNumber, sum(quantityOrdered * priceEach) as &#39;total sum&#39;</span><br><span class="line">    -&gt; from orderdetails</span><br><span class="line">    -&gt; group by orderNumber;</span><br></pre></td></tr></table></figure><ul><li><code>group by</code>限定了是以<code>orderNumber asc</code>的顺序呈现，这个时候加了<code>order by</code>也没有用，体现了这两个命令的优先级别；</li><li><code>sum</code>统计的是前一个属性下的对应值总和。在这里计算得为<code>orderNumber</code>的总额</li></ul><h4 id="7-2-3-other-functions-to-deploy"><a href="#7-2-3-other-functions-to-deploy" class="headerlink" title="7.2.3 other functions to deploy"></a>7.2.3 other functions to deploy</h4><blockquote><p>使用Year()来集合同一年份的营业数量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select</span><br><span class="line">    -&gt; year(orderDate) year,</span><br><span class="line">    -&gt; sum(quantityOrdered * priceEach) as &#39;total&#39;,</span><br><span class="line">    -&gt; status</span><br><span class="line">    -&gt; from orders</span><br><span class="line">    -&gt; inner join orderdetails using(orderNumber)</span><br><span class="line">    -&gt; where status&#x3D;&#39;Shipped&#39;</span><br><span class="line">    -&gt; group by year;</span><br></pre></td></tr></table></figure><ul><li><code>year()</code>统计年份的标准函数</li></ul><p><strong>Demo：</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210219124012330.png" alt="image-20210219124012330" style="zoom:50%;" /><p>进一步筛选2003年以后的营业额，在group by后添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt; having year&gt;2003;</span><br></pre></td></tr></table></figure><h3 id="7-3-roll-up"><a href="#7-3-roll-up" class="headerlink" title="7.3 roll up"></a>7.3 roll up</h3><blockquote><p>选定已有表的数据复制到新表中</p></blockquote><h3 id="7-3-1-create-sales-table"><a href="#7-3-1-create-sales-table" class="headerlink" title="7.3.1 create sales table"></a>7.3.1 create sales table</h3><p>从<code>orders</code>, <code>orderdetails</code>, <code>products</code>三个表中得到相关数据，获取各个<code>productline</code>在不同年份的经营总额</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table sales</span><br><span class="line">    -&gt; select</span><br><span class="line">    -&gt; productline,</span><br><span class="line">    -&gt; year(orderdate) year,</span><br><span class="line">    -&gt; sum(quantityordered * priceeach) as &#39;orderTotal&#39;</span><br><span class="line">    -&gt; from orderdetails</span><br><span class="line">    -&gt; inner join orders using(orderNumber)</span><br><span class="line">    -&gt; inner join products using(productcode)</span><br><span class="line">    -&gt; group by productline,year;</span><br></pre></td></tr></table></figure><ul><li><code>inner join</code>使用两次中间不需要用分隔符来分开</li><li><code>group by</code>的排列依据的是第一个项</li><li><font color=red><strong>合并表间关系时先找出中间联系表</strong></font></li></ul><p><strong>Demo:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210220105213622.png" alt="image-20210220105213622" style="zoom:50%;" /><p>将这几个年份车间的总额统计，直接使用<code>group by</code>来统计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">productline,</span><br><span class="line">sum(orderTotal) as &#39;total&#39;</span><br><span class="line">from sales</span><br><span class="line">group by productline;</span><br></pre></td></tr></table></figure><blockquote><p>上面的demo图是第一次尝试使用命名的列<code>priceTotal</code>，但在下一次建立新表时使用的是<code>orderTotal</code>，因此后面的数据都用<code>orderTotal</code>来表示，数值上与<code>priceTotal</code>相等</p></blockquote><p><strong>Demo:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210220105445591.png" alt="image-20210220105445591" style="zoom:50%;" /><p><strong>做个三年营业总额统计！</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">sum(orderTotal) as &#39;totalSum&#39;</span><br><span class="line">from sales;</span><br></pre></td></tr></table></figure><p><strong>Demo:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210220110059750.png" alt="image-20210220110059750" style="zoom:40%;" /><h3 id="7-3-2-roll-up-ops"><a href="#7-3-2-roll-up-ops" class="headerlink" title="7.3.2 roll up ops"></a>7.3.2 roll up ops</h3><blockquote><p><code>roll up</code>具体为在最后一行设<code>primary key = null</code>，其余属性为数值总和</p></blockquote><ul><li><code>rollup</code>用于统计相关数据，在<code>select</code>时要注意对<code>rollup</code>需要总和的数据进行<code>sum</code>操作</li><li><code>rollup</code>根据元组$(c_1,c_2,…,c_n)$对子集拆分操作为：$(),(c_1),(c_1,c_2)….$</li></ul><h4 id="lt-1-gt-different-hierachy-table"><a href="#lt-1-gt-different-hierachy-table" class="headerlink" title="&lt;1&gt; different hierachy table"></a>&lt;1&gt; different hierachy table</h4><ul><li><code>group by productline, year with rollup</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select productline,</span><br><span class="line">    -&gt; year,</span><br><span class="line">    -&gt; sum(ordertotal) as &#39;total&#39;</span><br><span class="line">    -&gt; from sales</span><br><span class="line">    -&gt; group by productline, year with rollup;</span><br></pre></td></tr></table></figure><p><strong>Demo：</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210220113247898.png" alt="image-20210220113247898" style="zoom:40%;" /><blockquote><p>在展示了<code>productline</code>不同年份下的营业额后，加入<code>rollup</code>作用的一行<code>null</code> 加总额<code>totalSum</code></p></blockquote><p><strong>此时的排列关系为：</strong> $productLine &gt; year$</p><ul><li><code>group by year, productline with rollup</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select</span><br><span class="line">    -&gt; productline,</span><br><span class="line">    -&gt; year, </span><br><span class="line">    -&gt; sum(ordertotal) as &#39;total&#39;</span><br><span class="line">    -&gt; from sales</span><br><span class="line">    -&gt; group by </span><br><span class="line">    -&gt; year, productline with rollup;</span><br></pre></td></tr></table></figure><p><strong>Demo:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210220113611776.png" alt="image-20210220113611776" style="zoom:40%;" /><blockquote><p>hierarchy 关系改变顺序后，展示的是不同年份下所有车间的经营总额</p></blockquote><p><strong>此时的继承关系为：</strong> $year &gt; productLine$</p><h4 id="lt-2-gt-grouping-function"><a href="#lt-2-gt-grouping-function" class="headerlink" title="&lt;2&gt; grouping function"></a>&lt;2&gt; grouping function</h4><blockquote><p>用于识别<code>null</code>是<code>subtotal</code>还是<code>grand total</code></p></blockquote><ul><li><code>grouping()</code>用于检测某一行是否为子<code>null</code>，当为<code>grand total</code>时返回1，反之返回<code>0</code>。用于<code>select</code>中</li><li>使用<code>grouping()</code>会新开关于<code>grouping()</code>的结果列</li></ul><blockquote><p>想举个栗子，但是发现mysql 5.x版本还不支持这个功能，仅支持<code>8.x</code>版本</p></blockquote><p>一般这么使用就阔以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select </span><br><span class="line">    -&gt; productline,</span><br><span class="line">    -&gt; year,</span><br><span class="line">    -&gt; sum(ordertotal) as &#39;total&#39;,</span><br><span class="line">    -&gt; grouping(productline),</span><br><span class="line">    -&gt; grouping(year)</span><br><span class="line">    -&gt; from sales</span><br><span class="line">    -&gt; group by</span><br><span class="line">    -&gt; productline, year</span><br><span class="line">    -&gt; with rollup;</span><br></pre></td></tr></table></figure><p>自己试试吧，orz</p><p>如果想让总额更加美观，不是只显示<code>null</code>的话，使用<code>if</code>来实现</p><h4 id="lt-3-gt-IF-FUNCTION"><a href="#lt-3-gt-IF-FUNCTION" class="headerlink" title="&lt;3&gt; IF FUNCTION"></a>&lt;3&gt; IF FUNCTION</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(grouping(productline),&#39;all productline&#39;, productline)</span><br></pre></td></tr></table></figure><p>同样用在<code>select</code>中，<code>if</code>在mysql的作用等同于<code>c</code>中的；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> flag = grouping(productline)?<span class="number">1</span>:<span class="number">0</span>; <span class="comment">// c中当然没有grouping函数orz</span></span><br><span class="line"><span class="keyword">return</span> (flag==<span class="number">1</span>)?<span class="string">&quot;all product line&quot;</span>:productline;</span><br></pre></td></tr></table></figure><h2 id="8-Subquery"><a href="#8-Subquery" class="headerlink" title="8 Subquery"></a>8 Subquery</h2><blockquote><p>即在选择的列中再进行一次子集的查询。</p><p>集合中表示即query为父集合，subquery为其中的子集</p><p>通常通过where来调用</p></blockquote><p>关系上表示为：<code>outer query&#123;inner query/subquery&#125;</code></p><h3 id="8-1-concept"><a href="#8-1-concept" class="headerlink" title="8.1 concept"></a>8.1 concept</h3><p>假设要选取在usa工作的职员：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">concat_ws(&#39;,&#39;,lastname,firstname) </span><br><span class="line">from employees </span><br><span class="line">where officecode in( </span><br><span class="line">select officecode  </span><br><span class="line">from offices where country&#x3D;&#39;USA&#39;);</span><br></pre></td></tr></table></figure><ul><li><strong>注意在in的后面为小括号：</strong><code>(</code></li></ul><p><strong>DEMO：</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210222145641070.png" alt="image-20210222145641070" style="zoom:50%;" /><p>这个的关系为：</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210222145722645.png" alt="image-20210222145722645" style="zoom:50%;" /><p><strong>注意到因为选取的subquery，因此在in的部分select的行应于query的where相等</strong></p><h3 id="8-2-with-comparison-operators"><a href="#8-2-with-comparison-operators" class="headerlink" title="8.2 with comparison operators"></a>8.2 with comparison operators</h3><h4 id="lt-1-gt-choose-the-max-expenditure"><a href="#lt-1-gt-choose-the-max-expenditure" class="headerlink" title="&lt;1&gt; choose the max expenditure"></a>&lt;1&gt; choose the max expenditure</h4><blockquote><p>以<code>payments</code>作为demo的表表～</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">customerNumber, checkNUmber, amount </span><br><span class="line">from payments </span><br><span class="line">where amount &#x3D; (select max(amount) from payments);</span><br></pre></td></tr></table></figure><p>得到最大消费的客户：</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210222150534594.png" alt="image-20210222150534594" style="zoom:50%;" /><h4 id="lt-2-gt-choose-customers-whose-cost-over-avg"><a href="#lt-2-gt-choose-customers-whose-cost-over-avg" class="headerlink" title="&lt;2&gt; choose customers whose cost over avg"></a>&lt;2&gt; choose customers whose cost over avg</h4><blockquote><p>在这里把程序变得更实用一些，餐馆一般会重点关注消费大于平均的顾客</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select</span><br><span class="line">    -&gt; customernumber,</span><br><span class="line">    -&gt; paymentdate as date,</span><br><span class="line">    -&gt; amount</span><br><span class="line">    -&gt; from payments</span><br><span class="line">    -&gt; where </span><br><span class="line">    -&gt; amount &gt; (select avg(amount) from payments);</span><br></pre></td></tr></table></figure><p>在这里<code>avg</code>会自动计算出该列所有数的平均数:(节选)</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210222151115502.png" alt="image-20210222151115502" style="zoom:50%;" /><h3 id="8-3-in-amp-not-in"><a href="#8-3-in-amp-not-in" class="headerlink" title="8.3 in &amp; not in"></a>8.3 in &amp; not in</h3><blockquote><p>举个栗子：餐馆可以用来检验会员名单中该会员有没有消费</p></blockquote><p>在给出的示例数据库中<code>customers</code>为会员名单，<code>orders</code>记录了详细的消费记录，查阅<code>orders</code>来查看会员是否消费</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select</span><br><span class="line">    -&gt; customernumber,</span><br><span class="line">    -&gt; customername</span><br><span class="line">    -&gt; from customers</span><br><span class="line">    -&gt; where customername in (</span><br><span class="line">    -&gt; select customername from orders);</span><br></pre></td></tr></table></figure><blockquote><p><code>in</code>后半部分可以看作customername的子集，选取出的为这两个集合的交集部分</p></blockquote><p>同样的，<code>not in</code>则是选取集合$A\overline{B}$</p><p>试试<code>not in</code>，会发现只要是会员都消费过hhh，所以not in得到的为空集</p><h3 id="8-4-subquery-in-from-clause"><a href="#8-4-subquery-in-from-clause" class="headerlink" title="8.4 subquery in from clause"></a>8.4 subquery in from clause</h3><blockquote><p>from 里面就是我们合并的表</p></blockquote><p>在筛选数据时，也常用<code>floor()</code>来处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; floor(27.75);</span><br><span class="line">mysql&gt; floor(27);</span><br></pre></td></tr></table></figure><p>第一个用来筛选数据小于等于<code>27.75</code>的整数，第二个用来筛选数据小于等于<code>27</code>的整数</p><p>关于<code>subquery in from clause</code>，我们来举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select </span><br><span class="line">    -&gt; max(items),</span><br><span class="line">    -&gt; min(items),</span><br><span class="line">    -&gt; floor(avg(items))</span><br><span class="line">    -&gt; from (select ordernumber,</span><br><span class="line">    -&gt; count(ordernumber) as items</span><br><span class="line">    -&gt; from orderdetails</span><br><span class="line">    -&gt; group by ordernumber) </span><br><span class="line">    -&gt; as chosenOrder;</span><br></pre></td></tr></table></figure><p><font color=red><strong>⚠️ATTENTIONS:</strong></font></p><blockquote><p>都是关于<code>subquery from</code>的～</p></blockquote><ul><li>这里<code>select ordernumber</code>是作为<code>group by</code>的顺序的，因为在一个表格中数据的排布需要按照一定的规律，所以一定需要有个<code>group by</code>用来帮助排序表</li><li>在这里的<code>subquery from clause</code>中，我们在合并表以后还需要重新命名<code>as chosenOrder</code>，原因是你想啊，我们在原来的<code>from</code>中是对特定表的，这里的<code>as ...</code>就是让这个合并表作为特定表出现哒</li></ul><blockquote><p>专业称为：<code>derived table</code></p></blockquote><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210222155707274.png" alt="image-20210222155707274" style="zoom:50%;" /><p><strong>规范示例：</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210222170049391.png" alt="image-20210222170049391" style="zoom:40%;" /><h3 id="8-5-correlated-subquery"><a href="#8-5-correlated-subquery" class="headerlink" title="8.5 correlated subquery"></a>8.5 correlated subquery</h3><blockquote><p>Correlated: 相关联的</p></blockquote><p>可以注意到之前的subquery都是可以作为独立表来操作的，即单独使用也可以。而<code>outer query</code> 表择取了<code>subquery</code>中的数据。</p><p>而<code>correlated subquery</code>则是取<code>outer query</code>的数据来选取其中的值</p><blockquote><p>示例用来选取在一个生产线上的明星产品（即buyprice高于同车间其余产品）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select</span><br><span class="line">    -&gt; productname,</span><br><span class="line">    -&gt; buyprice</span><br><span class="line">    -&gt; from products p</span><br><span class="line">    -&gt; where buyprice &gt; (select avg(buyprice)</span><br><span class="line">    -&gt; from products where productline &#x3D; p.productline);</span><br></pre></td></tr></table></figure><ul><li>因此在比较的时候选取了where：<code>productline = p.productline</code></li></ul><p><strong>DEMO:(A LITTLE PART)</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210222163017512.png" alt="image-20210222163017512" style="zoom:50%;" /><h3 id="8-6-exists-amp-not-exists"><a href="#8-6-exists-amp-not-exists" class="headerlink" title="8.6 exists &amp; not exists"></a>8.6 exists &amp; not exists</h3><blockquote><p>类似于having,这里使用orders&amp;orderdetails</p></blockquote><p>假如我们检验的为哪一个ordernumber的总额大于60k「使用having」</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select ordernumber,</span><br><span class="line">    -&gt; sum(quantityordered * priceeach) as total</span><br><span class="line">    -&gt; from orderdetails </span><br><span class="line">    -&gt; inner join orders using(ordernumber)</span><br><span class="line">    -&gt; group by ordernumber</span><br><span class="line">    -&gt; having total&gt;60000;</span><br></pre></td></tr></table></figure><p><strong>DEMO:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210222163951483.png" alt="image-20210222163951483" style="zoom:50%;" /><p><font color=red><strong>在alias后可以直接使用aliasName</strong></font></p><ul><li>using exists to find rich man ovo</li></ul><blockquote><p>通过subquery来找到消费过60k的顾客</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">customernumber, customername from customers c </span><br><span class="line">where Exists( select ordernumber, </span><br><span class="line">sum(quantityordered * priceeach) as total </span><br><span class="line">from orderdetails </span><br><span class="line">inner join orders using(ordernumber) </span><br><span class="line">where customernumber&#x3D;c.customernumber </span><br><span class="line">group by ordernumber</span><br><span class="line">having total &gt; 60000);</span><br></pre></td></tr></table></figure><p>表间关系为：<br>$$<br>orderdetails \Longleftrightarrow orders \Longrightarrow customers<br>$$<br><strong>DEMO:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210222165750632.png" alt="image-20210222165750632" style="zoom:50%;" /><ul><li>当使用了<code>join</code>后，意味着该表也参与了建表中，可以使用引用表内的参数的～</li></ul><h3 id="8-7-complex-derived-subquery"><a href="#8-7-complex-derived-subquery" class="headerlink" title="8.7 complex derived subquery"></a>8.7 complex derived subquery</h3><blockquote><p>Round(numeric value, INTEGER): 表示将数值规范到小数点后<code>INTEGER</code>位</p></blockquote><ul><li>case的用法：</li></ul><blockquote><p>跟switch的分类效果相同</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE</span><br><span class="line">    WHEN condition1 THEN result1</span><br><span class="line">    WHEN condition2 THEN result2</span><br><span class="line">    WHEN conditionN THEN resultN</span><br><span class="line">    ELSE result</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p>示例：2003年不同产业的营业额的分类，通过customer的orderdetail判断customer的产业</p><p>分类为：<br>$$<br>\left{<br>\begin{aligned}<br>&amp;Platinum,  &amp;&gt;100K \<br>&amp;Gold, &amp;(10K,100K) \<br>&amp;Sliver, &amp;&lt;10K</p><p>\end{aligned}<br>\right.<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">customernumber, </span><br><span class="line">round(sum(priceeach * quantityordered)) as sales, </span><br><span class="line">(case </span><br><span class="line">when sum(priceeach * quantityordered) &gt; 100000 then &#39;platinum&#39; </span><br><span class="line">when sum(priceeach * quantityordered) between 10000 and 100000 then &#39;gold&#39; </span><br><span class="line">when sum(priceeach * quantityordered) &lt; 10000 then &#39;sliver&#39; </span><br><span class="line">end) salesgroup </span><br><span class="line">from orderdetails </span><br><span class="line">inner join orders using(ordernumber) </span><br><span class="line">where year(orderdate)&#x3D;2003 </span><br><span class="line">group by customernumber;</span><br></pre></td></tr></table></figure><ul><li>在select中进行分类时需要用<code>(case ... end)</code>包括起来</li><li>使用sum时注意不要留空格</li></ul><p>之后我们能够通过这个分类的子表来获取各个行业的个数～</p><blockquote><p>这块就不展示了，懒癌晚期</p></blockquote><blockquote><p>作为第二天的复习，我又写了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select </span><br><span class="line">    -&gt; customerGroup,</span><br><span class="line">    -&gt; count(cg.customerGroup) as groupCount</span><br><span class="line">    -&gt; from (select </span><br><span class="line">    -&gt; customernumber,</span><br><span class="line">    -&gt; round(sum(quantityordered * priceeach)) as sales,</span><br><span class="line">    -&gt; (case </span><br><span class="line">    -&gt; when sum(quantityordered * priceeach)&gt;100000 the &#39;platinum&#39;</span><br><span class="line">    -&gt; when sum(quantityordered * priceeach) between 10000 and 100000 then &#39;gold&#39;;</span><br><span class="line">    -&gt; when sum(quantityordered * priceeach)&lt;10000 then &#39;sliver&#39;</span><br><span class="line">    -&gt; end) customerGroup</span><br><span class="line">    -&gt; from orders inner join orderdetails using(ordernumber)</span><br><span class="line">    -&gt; where year(shippeddate)&#x3D;2003</span><br><span class="line">    -&gt; group by customernumber) as cg</span><br><span class="line">    -&gt; group by cg.customerGroup;</span><br></pre></td></tr></table></figure><ul><li>注意：既然使用了<code>cg.customergroup</code>就需要在<code>subquery</code>中为<code>customerGroup</code>别名</li></ul><p><strong>Final Demo:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210223133502097.png" alt="image-20210223133502097" style="zoom:50%;" /><p><font color=green><strong>mysql 8.0+ 有新添的功能为：<code>mysql CTE</code></strong></font>,但是因为我的还没有更新到<code>8.0+</code>在这里就没有讨论这一块了，我后面会补上的，不咕咕！</p><h2 id="9-Union"><a href="#9-Union" class="headerlink" title="9 Union"></a>9 Union</h2><blockquote><p>union将两列及以上的多列合并成一列</p></blockquote><p>在使用<code>union</code>时一定要遵循两个规定：</p><ul><li>在<code>select</code>中出现的列的列数和列顺序一定要相同</li><li><code>union</code>的列中的数据类型必须相同</li></ul><blockquote><p><code>union</code>默认去除相同的行，保留不同的属性，省去了<code>distinct</code>的要求</p></blockquote><h3 id="9-1-simple-use"><a href="#9-1-simple-use" class="headerlink" title="9.1 simple use"></a>9.1 simple use</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists t1;</span><br><span class="line">drop table if exists t2;</span><br><span class="line"></span><br><span class="line">create table t1(</span><br><span class="line">id int primary key</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table t2(</span><br><span class="line">id int primary key</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into t1 values (1),(3),(4);</span><br><span class="line">insert into t2 values (1),(2),(3),(4);</span><br></pre></td></tr></table></figure><p>合并<code>t1</code>和<code>t2</code>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select id</span><br><span class="line">from t1</span><br><span class="line">union</span><br><span class="line">select id</span><br><span class="line">from t2;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210223140510814.png" alt="image-20210223140510814" style="zoom:50%;" /><blockquote><p>由<code>t1</code>的<code>1，3，4</code>都存在，到之后的<code>t2</code>只能加入<code>2</code>，后得到<code>union</code>的表格</p></blockquote><p>如果希望得到两个集合合并的全部元素：</p><p>将<code>union</code>修改为<code>union all</code>:</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210223140853055.png" alt="image-20210223140853055" style="zoom:50%;" /><p>可能出错的地方：</p><ul><li><code>insert into</code> 的为<code>values</code>，并且后面的<code>values</code>需要用<code>()</code>包含并以<code>,</code>分割开来</li><li>建表时注意规定<code>primary key</code></li></ul><h3 id="9-2-comparison-with-join"><a href="#9-2-comparison-with-join" class="headerlink" title="9.2 comparison with join"></a>9.2 comparison with join</h3><blockquote><p>会发现union和join一样都有集合合并的意味，那么他们的区别是什么呢？</p></blockquote><p>无论是<code>inner join</code>还是<code>right/left join</code>，都会以一个原表的结构呈现出来，对于<code>join</code>，它的表是水平扩展的；而对于<code>union</code>，则是垂直扩展的，举个栗子：</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210223141827968.png" alt="image-20210223141827968" style="zoom:50%;" /><h3 id="9-3-applications"><a href="#9-3-applications" class="headerlink" title="9.3 applications"></a>9.3 applications</h3><p>实际应用于：假如在销售时希望查找客户的明星经理，可以通过union来筛选人气最高的经理</p><blockquote><p>选取<code>employees</code>表和<code>customers</code>表来完成</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select lastName,firstName</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; union</span><br><span class="line">    -&gt; select contactlastname,contactfirstname</span><br><span class="line">    -&gt; from customers;</span><br></pre></td></tr></table></figure><p><strong>Demo：A LITTLE PART</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210223143032404.png" alt="image-20210223143032404" style="zoom:50%;" /><h3 id="9-4-Additonal-part"><a href="#9-4-Additonal-part" class="headerlink" title="9.4 Additonal part"></a>9.4 Additonal part</h3><ul><li>加入新列<code>contactPerson</code>来表示<code>contactPerson</code>为<code>Employees</code>or<code>Customers</code></li><li>将全名表示出来，使用<code>employees</code>中<code>lastname</code>及·<code>customers</code>中<code>contactlastname</code></li></ul><blockquote><p>union后需要排列的话需要通过<code>order by</code>（我一直以为<code>group by</code>能排序来着，事实是它是用来合并相同<code>row</code>的orz…）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat_ws(&#39;,&#39;, lastname, firstname) as name,</span><br><span class="line">    -&gt; &#39;Employee&#39; as contactPerson</span><br><span class="line">    -&gt; from employees </span><br><span class="line">    -&gt; union select concat_ws(&#39;,&#39;, contactlastname, contactfirstname) as name, </span><br><span class="line">    -&gt; &#39;Customer&#39; as contactPerson</span><br><span class="line">    -&gt; from customers</span><br><span class="line">    -&gt; order by name;</span><br></pre></td></tr></table></figure><p><strong>Demo: SUBPART</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210223145224744.png" alt="image-20210223145224744" style="zoom:50%;" /><blockquote><p>在sql的union中还有还有<code>minus</code>和<code>intersect</code>两种语法，在mysql中没有这两种特性，但是可以通过已有的mysql语法，如<code>join</code>,<code>distinct</code>,<code>in</code>等方法来模仿这两个功能。（这个坑之后再补qwq）</p></blockquote><h2 id="10-Modifing-data"><a href="#10-Modifing-data" class="headerlink" title="10 Modifing data"></a>10 Modifing data</h2><h3 id="10-1-insert"><a href="#10-1-insert" class="headerlink" title="10.1 insert"></a>10.1 insert</h3><p><strong>通用模型：</strong></p><ul><li><code>single row</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into table_name(c1, c2,..., cn)</span><br><span class="line">values(v1, v2, v3)</span><br></pre></td></tr></table></figure><ul><li><code>multiple rows</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">insert into table_name(c1, c2, ...)</span><br><span class="line">values (v1, v2, v3),</span><br><span class="line">(v1, v2, v3),</span><br><span class="line">...,</span><br><span class="line">(v1, v2, v3);</span><br></pre></td></tr></table></figure><p>建一个表作为例子来说明</p><h4 id="10-1-1-insert-example"><a href="#10-1-1-insert-example" class="headerlink" title="10.1.1 insert example"></a>10.1.1 insert example</h4><ol><li><strong>建表</strong></li></ol><p>建立关于<code>tasks</code>的表格：</p><table><thead><tr><th>Name</th><th>Data structure</th></tr></thead><tbody><tr><td>Task_id</td><td>Int「auto_increment」</td></tr><tr><td>title</td><td>varchar(255) not null</td></tr><tr><td>Start_date</td><td>Date</td></tr><tr><td>End_date</td><td>date</td></tr><tr><td>Priority</td><td>Tinyint</td></tr><tr><td>description</td><td>Text</td></tr><tr><td>Primary key</td><td>Task_id</td></tr></tbody></table><blockquote><p>基于上述关系建立表格：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table if not exists tasks(</span><br><span class="line">    -&gt; task_id int auto_increment,</span><br><span class="line">    -&gt; title varchar(255) not null,</span><br><span class="line">    -&gt; start_date date,</span><br><span class="line">    -&gt; end_date date,</span><br><span class="line">    -&gt; priority tinyint not null default 3,</span><br><span class="line">    -&gt; description text,</span><br><span class="line">    -&gt; primary key(task_id));</span><br></pre></td></tr></table></figure><h4 id="10-1-2-simple-example"><a href="#10-1-2-simple-example" class="headerlink" title="10.1.2 simple example"></a>10.1.2 simple example</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into tasks(title, task_id)</span><br><span class="line">values(&#39;this is the 1st example&#39;, 1);</span><br></pre></td></tr></table></figure><ul><li>当在insert语句中没有定义数据类型时，默认为null</li><li><code>not null</code>意味着如果你没有输入相应数据，会返回错误信息</li><li>对于<code>primary key</code>的属性，如果是有序列表，一般在数据类型后加<code>auto_increment</code>来达到自增效果</li></ul><p><strong>DEMO:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210224151755390.png" alt="image-20210224151755390" style="zoom:50%;" /><h4 id="10-1-2-LET-IT-BE-COMPLEX"><a href="#10-1-2-LET-IT-BE-COMPLEX" class="headerlink" title="10.1.2 LET IT BE COMPLEX!"></a>10.1.2 LET IT BE COMPLEX!</h4><h5 id="lt-1-gt-use-default-value"><a href="#lt-1-gt-use-default-value" class="headerlink" title="&lt;1&gt; use default value"></a>&lt;1&gt; use default value</h5><p>使用默认值一般有两种方式：</p><ul><li>在一开始建表时，使用insert中定义了该默认值后，insert into时不用为该属性赋值</li><li>在insert into中对于插入的列使用关键字<code>default</code>来插入默认值</li></ul><blockquote><p>以priority的default值为例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into tasks(title, priority)</span><br><span class="line">    -&gt; values(&#39;this is the 2nd example&#39;, default);</span><br></pre></td></tr></table></figure><p><strong>Demo:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210224152425137.png" alt="image-20210224152425137" style="zoom:50%;" /><blockquote><p>如果之后需要确认什么值没有修改时，可以规定default为常用纠错值</p></blockquote><hr><h5 id="lt-2-gt-insert-specified-date"><a href="#lt-2-gt-insert-specified-date" class="headerlink" title="&lt;2&gt; insert specified date"></a>&lt;2&gt; insert specified date</h5><blockquote><p>插入具体的时间时，一般采用国际标准格式：</p><p>‘YYYY-MM-DD’: 2021-02-24</p></blockquote><p>又到了举例子的时候了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into tasks(title, start_date, end_date)</span><br><span class="line">    -&gt; values(&#39;this is the 3rd example&#39;, &#39;2021-02-24&#39;, &#39;2021-03-06&#39;);</span><br></pre></td></tr></table></figure><p>同时，在sql语句中还有许多关于时间的具有返回值的函数，也是可以调用过来使用的</p><p>相关的时间函数在这里面有：<a href="https://www.w3schools.com/sql/func_mysql_current_date.asp">w3school SQL语法</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% 这里我只用current_date来举例了</span><br><span class="line">mysql&gt; insert into tasks(title, start_date, end_date)</span><br><span class="line">    -&gt; values(&#39;this is the 4th example&#39;, current_date(), current_date());</span><br></pre></td></tr></table></figure><p><strong>DEMO: two parts</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210224153357716.png" alt="image-20210224153357716" style="zoom:50%;" /><hr><h5 id="lt-3-gt-insert-mutiple-rows"><a href="#lt-3-gt-insert-mutiple-rows" class="headerlink" title="&lt;3&gt; insert mutiple rows"></a>&lt;3&gt; insert mutiple rows</h5><blockquote><p>多次处理，一次到位hhh</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into tasks(title, priority)</span><br><span class="line">    -&gt; values </span><br><span class="line">    -&gt; (&#39;multi 1st&#39;, 1),</span><br><span class="line">    -&gt; (&#39;multi 2nd&#39;, 2),</span><br><span class="line">    -&gt; (&#39;multi 3rd&#39;, 3);</span><br></pre></td></tr></table></figure><ul><li><strong>注意：</strong>即使插入了多行，<code>values</code>也只需要在一开始的时候说明即可</li><li><code>row</code>间以<code>,</code>分割开来</li></ul><h4 id="10-1-3-use-remained-db-to-insert"><a href="#10-1-3-use-remained-db-to-insert" class="headerlink" title="10.1.3 use remained db to insert"></a>10.1.3 use remained db to insert</h4><p><strong>General usage:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into table_name(column_list)</span><br><span class="line">select column_list_add</span><br><span class="line">from table_name</span><br><span class="line">where add_condition;</span><br></pre></td></tr></table></figure><p>这种用法称为<code>insert into insert</code>，一般用于抽取特定的数据</p><p>假设我们现在抽取关于<code>customers</code>在<code>NY NYC</code>的全部顾客，使用原有数据库中的<code>customers</code>表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">% 建立表格</span><br><span class="line">mysql&gt; create table if not exists primeCustomers(</span><br><span class="line">    -&gt; customernumber int,</span><br><span class="line">    -&gt; customername varchar(255),</span><br><span class="line">    -&gt; contactlastname varchar(255),</span><br><span class="line">    -&gt; contactfirstname varchar(255),</span><br><span class="line">    -&gt; phone varchar(255),</span><br><span class="line">    -&gt; addressline1 varchar(255),</span><br><span class="line">    -&gt; addressline2 varchar(255),</span><br><span class="line">    -&gt; city varchar(55),</span><br><span class="line">    -&gt; state varchar(55));</span><br></pre></td></tr></table></figure><p>现在<code>copy data</code>粘贴到这个表中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into primeCustomers select customernumber, customername, contactlastname, contactfirstname, phone, addressline1,</span><br><span class="line">    -&gt; addressline2,</span><br><span class="line">    -&gt; city,</span><br><span class="line">    -&gt; state</span><br><span class="line">    -&gt; from customers</span><br><span class="line">    -&gt; where city&#x3D;&#39;NYC&#39; and state&#x3D;&#39;NY&#39;;</span><br></pre></td></tr></table></figure><p><strong>DEMO:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210224155946187.png" alt="image-20210224155946187" style="zoom:50%;" /><hr><p> <font color=green><center>进化版！</center></font></p><p>假设现在建立关于统计数据表格，需要统计的数据为：<code>totalproduct</code>,<code>totalcustomer</code>,<code>totalorder</code>.</p><p>从这三个表中获取数据：<code>products</code>, <code>customers</code>, <code>orders</code>放到<code>statistics</code>表中</p><ol><li><strong>create statistics table</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table if not exists statistics(</span><br><span class="line">    -&gt; totalproduct int,</span><br><span class="line">    -&gt; totalcustomer int,</span><br><span class="line">    -&gt; totalorder int);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>insert relative datas</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into statistics </span><br><span class="line">    -&gt; values(</span><br><span class="line">    -&gt; (select count(*) from products),</span><br><span class="line">    -&gt; (select count(*) from customers),</span><br><span class="line">    -&gt; (select count(*) from orders));</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>Final result</strong></li></ol><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210224161249474.png" alt="image-20210224161249474" style="zoom:50%;" /><h4 id="10-1-4-insert-「on-duplicate-keys-update」"><a href="#10-1-4-insert-「on-duplicate-keys-update」" class="headerlink" title="10.1.4 insert 「on duplicate keys update」"></a>10.1.4 insert 「on duplicate keys update」</h4><blockquote><p>这是mysql在sql上的扩展，sql在insert into duplicate rows会返回错误消息</p></blockquote><p>错误消息在mysql中可以通过insert on duplicate keys update来进行更正或更新</p><p><strong>general structure</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into table(c1)</span><br><span class="line">values(c1) </span><br><span class="line">on duplicate keys update c1 &#x3D; values(c1)+1;</span><br></pre></td></tr></table></figure><hr><center>全流程</center><ol><li><strong>create demo table devices</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table if not exists devices(</span><br><span class="line">    -&gt; id int auto_increment key,</span><br><span class="line">    -&gt; name varchar(255));</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>insert initial values</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into devices(name) values(&#39;haha&#39;),(&#39;gugu&#39;),(&#39;mumu&#39;);</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>try to change duplicated value if it does</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your MySQL server version for the right syntax to use near &#39;keys update name&#x3D;&#39;kiki&#39;&#39; at line 1</span><br><span class="line">mysql&gt; insert into devices(name)</span><br><span class="line">    -&gt; values(&#39;kuku&#39;)</span><br><span class="line">    -&gt; on duplicate key update name&#x3D;&#39;kuku&#39;;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>the changed「1st」 condition</strong></li></ol><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210224164718151.png" alt="image-20210224164718151" style="zoom:50%;" /><ol start="5"><li>Add specified value by using duplicate demand</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into devices(name)</span><br><span class="line">    -&gt; values(&#39;this is changed name&#39;) </span><br><span class="line">    -&gt; on duplicate key update name&#x3D;&#39;kuku&#39;;</span><br></pre></td></tr></table></figure><p><strong>final result:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210224165015640.png" alt="image-20210224165015640" style="zoom:50%;" /><ul><li><font color=red><strong>注意更新值时的指令顺序：是对重复值，因此为：</strong></font> <code>on duplicate key update</code></li><li>对于<code>duplicate values</code>， <code>mysql</code>采取的方式抽象理解为：打不过就改个名字加入他们</li></ul><hr><h4 id="10-1-5-insert-ignore"><a href="#10-1-5-insert-ignore" class="headerlink" title="10.1.5 insert ignore"></a>10.1.5 insert ignore</h4><blockquote><p>同样为mysql关于sql的扩展</p></blockquote><p>这个方法用于处理当在一个process中，即使插入了$invalid\ value$，进程也不受影响，继续执行insert $valid\ value$.</p><p><strong>general structure</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert ignore table_name(c1, c2, ...)</span><br><span class="line">values</span><br><span class="line">(c1, c2, ...),</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>举个栗子：「当没有使用<code>on duplicate ...</code>时，插入<code>duplicate key</code>是会返回错误消息的」</p><blockquote><p>秉承不浪费的原则，在devices表上进行修改</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into devices(id) </span><br><span class="line">    -&gt; values(1);</span><br></pre></td></tr></table></figure><ul><li>不能重复的在表中仅有<code>key</code>值「毕竟<code>key</code>值唯一鸭」</li></ul><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210224170612984.png" alt="image-20210224170612984" style="zoom:50%;" /><p>出现duplicate value，错误</p><ul><li><strong>忽略该错误</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert ignore into devices(id) values(1);</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210224170807541.png" alt="image-20210224170807541" style="zoom:50%;" /><p>只有warning啦</p><h5 id="appendix：-ignore-v-s-strict-mode"><a href="#appendix：-ignore-v-s-strict-mode" class="headerlink" title="appendix： ignore v.s strict mode"></a>appendix： ignore v.s strict mode</h5><p>在一般情况下，如果insert出错，毫无疑问的返回<code>error</code>;但是如果选用<code>ignore</code>，插入虽然失败，但还是会在原本要插入的属性当中，插入的为正确的部分。继续举🌰：</p><hr><ol><li><strong>再次create新表</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table if not exists strictTry( name varchar(5) key);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>试图插入invalid value</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into strictTry(name)</span><br><span class="line">    -&gt; values(&#39;hahahahaha&#39;);</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210224171905449.png" alt="image-20210224171905449" style="zoom:50%;" /><ol start="3"><li><strong>试试ignore</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert ignore into strictTry(name)</span><br><span class="line">    -&gt; values(&#39;hahahahaha&#39;);</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210224171954842.png" alt="image-20210224171954842" style="zoom:50%;" /><hr><h3 id="10-2-Update"><a href="#10-2-Update" class="headerlink" title="10.2 Update"></a>10.2 Update</h3><blockquote><p>在mysql中，更新数据是十分重要滴！</p></blockquote><h4 id="10-2-1-simple-update"><a href="#10-2-1-simple-update" class="headerlink" title="10.2.1 simple update"></a>10.2.1 simple update</h4><p><code>Update</code>语句允许操作一列或多列。</p><p><strong>general structure:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">update [low_priority][ignore] table_name</span><br><span class="line">set</span><br><span class="line">column_name &#x3D; expr1,</span><br><span class="line">column_name &#x3D; expr2,</span><br><span class="line">...</span><br><span class="line">[where</span><br><span class="line">condition]</span><br></pre></td></tr></table></figure><ul><li>注意<code>where</code>的条件，如果不限定修改行，会对选取列的值全部修改</li></ul><p>在<code>update</code>中支持两类<strong>modifiers</strong>「修饰语」</p><ul><li><code>LOW_PRIORITY:</code> 在这类情况下，表将会延迟update直到其他表停止从该表读取数据</li><li><code>ignore:</code> 跟上述的<code>ignore</code>的作用相同，即表在update的过程中即使遇到小的错误也能继续完成操作</li></ul><p>假设我们现在要修改<code>employees</code>表内关于顾客<code>mary patterson</code>的预留邮箱为：<code>mary.patterso@classicmodelcars.com</code></p><p>先查看她原先的邮箱：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select </span><br><span class="line">    -&gt; lastname, firstname, email</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where employeenumber&#x3D;1056;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210225154326872.png" alt="image-20210225154326872" style="zoom:50%;" /><p><strong>update it！</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update employees</span><br><span class="line">    -&gt; set email &#x3D; &#39;mary.patterso@classicmodelcars.com&#39;</span><br><span class="line">    -&gt; where employeenumber&#x3D;1056;</span><br></pre></td></tr></table></figure><p><strong>修改后：</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210225154601813.png" alt="image-20210225154601813" style="zoom:50%;" /><p>同时修改一行中多个信息，在<code>set</code>当中设置即可，但是记得用<code>where</code>来标记特殊</p><h4 id="10-2-2-use-replace-to-change-info"><a href="#10-2-2-use-replace-to-change-info" class="headerlink" title="10.2.2 use replace to change info"></a>10.2.2 use replace to change info</h4><hr><center><b>REPLACE()</b></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replace(src, sub_src, change_src)</span><br></pre></td></tr></table></figure><ul><li><strong><code>src:</code></strong> 源字符串</li><li>**<code>subsrc:</code>**源字符串的子串</li><li><strong><code>change_src:</code></strong> 修改后的子串</li></ul><hr><p>假如现在6号办公室的所有<code>sales rep</code>搬到了<code>@mysqlexample.com</code>的公司页面，将他们进行全部修改有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update employees</span><br><span class="line">    -&gt; set email&#x3D;replace(email, &#39;classicmodelcars&#39;, &#39;mysqlexample&#39;)</span><br><span class="line">    -&gt; where jobtitle&#x3D;&#39;sales rep&#39; and officecode&#x3D;6;</span><br></pre></td></tr></table></figure><p><strong>修改后：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select officecode,</span><br><span class="line">    -&gt; jobtitle,</span><br><span class="line">    -&gt; email</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where jobtitle&#x3D;&#39;sales rep&#39; and officecode&#x3D;6;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210225160514245.png" alt="image-20210225160514245" style="zoom:50%;" /><h4 id="10-2-3-combine-subquery-with-update-value"><a href="#10-2-3-combine-subquery-with-update-value" class="headerlink" title="10.2.3 combine subquery with update value"></a>10.2.3 combine subquery with update value</h4><p>挑选<code>customers</code>中<code>salesemployeenumber=null</code>的顾客：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select customernumber,</span><br><span class="line">    -&gt; customername,</span><br><span class="line">    -&gt; salesrepemployeenumber</span><br><span class="line">    -&gt; from customers</span><br><span class="line">    -&gt; where salesrepemployeenumber is null;</span><br></pre></td></tr></table></figure><ul><li>在挑选值为null的时候，不能直接<code>=</code>，而是应该用<code>is</code>来判断<strong>「debug了好久qwq」</strong></li></ul><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210225161535548.png" alt="image-20210225161535548" style="zoom:50%;" /><p><strong>update them！</strong></p><p>为了使赋值具有随机抽样的特性，我们引入rand函数，修改方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update customers</span><br><span class="line">    -&gt; set salesrepemployeenumber&#x3D;(select</span><br><span class="line">    -&gt; employeenumber</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where jobtitle&#x3D;&#39;sales rep&#39;</span><br><span class="line">    -&gt; order by rand()</span><br><span class="line">    -&gt; limit 1)</span><br><span class="line">    -&gt; where salesrepemployeenumber is null;</span><br></pre></td></tr></table></figure><p>这个时候再查找为null的rows，则会返回<code>empty set</code>：</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210225162222737.png" alt="image-20210225162222737" style="zoom:50%;" /><h4 id="10-2-4-update-with-join"><a href="#10-2-4-update-with-join" class="headerlink" title="10.2.4 update with join"></a>10.2.4 update with join</h4><p>在我们希望能将另外一张表的属性迁移到另一张表时，可以找到两张表的公共属性后，再修改不同的属性。</p><p>以表<code>T1,T2</code>为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">update t1, t2</span><br><span class="line">[inner join| left join] t1 on t1.c1&#x3D;t2.c1</span><br><span class="line">set t1.c2 &#x3D; t2.c2</span><br><span class="line">t2.c3 &#x3D; expr</span><br><span class="line">where condition</span><br></pre></td></tr></table></figure><p><strong>Details：</strong></p><ul><li>确定主表，即在join时需要保留的数据主要源于何表</li><li>通过where限定修改的rows</li></ul><hr><p><strong>Goal：</strong> 建立<code>empdb</code>数据库来计算该年份雇员的薪资，其中<code>employees</code>表记录<code>emp_id</code>,<code>name</code>,<code>performance</code> and <code>salary</code>；而<code>merits</code>记录<code>performance</code> and <code>percentage</code></p><p><strong>New Usage:</strong></p><ol><li><code>database</code><ul><li><strong><code>foreign key</code></strong>: 作为连接两个表的<code>key</code>，其中有着<code>foreign key</code>的称为子表，其父表称为<code>parent table</code>或<code>referenced table</code>，<code>foreign key</code>的值由其父表<code>parent table</code>中的<code>primary key</code>决定</li><li><strong><code>constraints:</code></strong> 用于限定表中的数据类型，一般有<code>foreign key</code>,<code>unique</code>等约束关系</li></ul></li></ol><p>开始建立数据库吧！</p><hr><center><b>merits employees 数据库建立</b></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table merits(</span><br><span class="line">    -&gt; performance int(11),</span><br><span class="line">    -&gt; percentage float not null,</span><br><span class="line">    -&gt; primary key (performance)</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; cretae table employees(</span><br><span class="line">    -&gt; emp_id int(11) not null auto_increment,</span><br><span class="line">    -&gt; emp_name varchar(255),</span><br><span class="line">    -&gt; performance int(11),</span><br><span class="line">    -&gt; salary float not null,</span><br><span class="line">    -&gt; primary key (emp_id),</span><br><span class="line">    -&gt; constraint fk_performance foreign key(perfoemance) </span><br><span class="line">    -&gt; references merits(performance);</span><br></pre></td></tr></table></figure><hr><center><b>插入数据</b></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into merits(performance, percentage)</span><br><span class="line">    -&gt; values(1,0), (2, 0.01),</span><br><span class="line">    -&gt; (3, 0.03), (4, 0.05), (5, 0.08);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into employees(emp_name, performance, salary)</span><br><span class="line">    -&gt; values(&#39;gugu&#39;, 1, 10000),</span><br><span class="line">    -&gt; (&#39;tutu&#39;, 3, 3500),</span><br><span class="line">    -&gt; (&#39;bubu&#39;, 5, 8700);</span><br></pre></td></tr></table></figure><hr><center><b>计算年终</b></center><p>$$<br>salary  = salary+salary\times percentage<br>$$</p><ul><li>原工资：</li></ul><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210226095142647.png" alt="image-20210226095142647" style="zoom:50%;" /><ul><li><strong>修改后的工资：</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update employees inner join merits</span><br><span class="line">-&gt; on employees.performance&#x3D;merits.performance</span><br><span class="line">-&gt; set salary &#x3D; salary+salary*percentage;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210226095342535.png" alt="image-20210226095342535" style="zoom:50%;" /><hr><blockquote><p>上面的<code>inner join</code>部分，使用<code>left join</code>试试</p></blockquote><p>这个情景可以描述为：新员工入工作室，此时的绩效表现为null，但是年终默认给新人的利率为<code>0.015</code>，则有：</p><ul><li><strong>加入新员工</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into employees(emp_name, performance, salary)</span><br><span class="line">    -&gt; values (&#39;new_colleague1&#39;, null, 3000),</span><br><span class="line">    -&gt; (&#39;new_colleague2&#39;, null, 12000);</span><br></pre></td></tr></table></figure><ul><li>更新工资</li></ul><blockquote><p>这里使用<code>left join</code>的目的是，当使用<code>merits</code>和<code>employees</code>时，避免因为<code>employees</code>的<code>performance</code>为<code>null</code>，而忽略了处理<code>null</code>值</p></blockquote><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210226100812326.png" alt="image-20210226100812326" style="zoom:50%;" /><p>在<code>update</code>的条件下，可以使用的join方式仅有<code>inner join</code>及<code>left join</code>，根据需求来更新表</p><hr><h3 id="10-3-Delete"><a href="#10-3-Delete" class="headerlink" title="10.3 Delete"></a>10.3 Delete</h3><p><strong>general sturcture</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from table_name</span><br><span class="line">where condition</span><br></pre></td></tr></table></figure><p><strong>TIPS:</strong></p><ul><li><code>where</code> 【optional】：当不规定情况的时候，默认删除所有数据</li><li>删除多表间数据时，有<code>delete join</code>来处理</li><li>在不清楚想要删除多少列时，使用<code>truncate table</code>来处理</li><li>对于<code>foreign key</code>，如果<code>parent table</code>删除数据后，关于子表有[optional]<code>on  delete cascade</code>的处理方式</li></ul><h4 id="10-3-1-simple-example"><a href="#10-3-1-simple-example" class="headerlink" title="10.3.1 simple example"></a>10.3.1 simple example</h4><blockquote><p>选用的依旧是可爱的<code>employees</code>表ovo</p></blockquote><p>删除所有<code>officecode=4</code>的雇员吧～</p><ul><li>原职员</li></ul><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210226102058328.png" alt="image-20210226102058328" style="zoom:50%;" /><ul><li>残忍的删除后</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from employees</span><br><span class="line">    -&gt; where officecode&#x3D;4;</span><br></pre></td></tr></table></figure><blockquote><p>失败了，因为<code>officecode</code>是某个<code>foreign table</code>的<code>foreign key</code></p></blockquote><p>如果不小心删除了数据，可以通过之后提到的<code>truncate</code>方式来恢复</p><hr><p>或者试着删除一下居住在法国的信用卡额度最低的前十位顾客~</p><ul><li><strong>看一下有哪些顾客</strong></li></ul><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210226102945886.png" alt="image-20210226102945886" style="zoom:50%;" /><ul><li><strong>删除前十位</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delete from customers</span><br><span class="line">where country&#x3D;&#39;france&#39;</span><br><span class="line">orderby creditlimit</span><br><span class="line">limit 10;</span><br></pre></td></tr></table></figure><blockquote><p>删除当然不成功啦hhh，因为会删除<code>parent row</code>对表格造成影响，至于怎么删除，后面会谈</p></blockquote><hr><h4 id="10-3-2-delete-multi-table"><a href="#10-3-2-delete-multi-table" class="headerlink" title="10.3.2 delete multi table"></a>10.3.2 delete multi table</h4><blockquote><p>通过<code>delete join</code>的方式删除相关表的共同部分</p></blockquote><p><strong>general structure:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete t1, t2</span><br><span class="line">-&gt; from t1</span><br><span class="line">-&gt; inner join t2 on t1.key&#x3D;t2.key</span><br><span class="line">-&gt; where condition</span><br></pre></td></tr></table></figure><p><strong>TIPS</strong></p><ul><li>当仅删除t1时，即<code>delete t1</code>，结果是删除的为t2所有的相关行；反之亦然</li><li>而<code>delete t1, t2</code>则删除的是<code>t1, t2</code>的公共部分</li></ul><blockquote><p>因为classicmodels中的父子表关系比较复杂，因此在empdb里面建表来示例一下吧～</p></blockquote><hr><center><b>建表t1, t2</b></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists t1, t2;</span><br><span class="line">mysql&gt; create table t1(</span><br><span class="line">    -&gt; id int auto_increment,</span><br><span class="line">    -&gt; primary key (id));</span><br><span class="line"></span><br><span class="line">mysql&gt; create table t2(</span><br><span class="line">    -&gt; id varchar(5),</span><br><span class="line">    -&gt; ref int not null,</span><br><span class="line">    -&gt; primary key (id));</span><br></pre></td></tr></table></figure><center><b>插入数据</b></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into t1(id)</span><br><span class="line">    -&gt; values (1),(3),(4);</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t2(id, ref)</span><br><span class="line">    -&gt; values (1,&#39;A&#39;), (2, &#39;B&#39;), (4, &#39;D&#39;);</span><br></pre></td></tr></table></figure><center><b>删除相同索引</b></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete t1,t2</span><br><span class="line">    -&gt; from t1</span><br><span class="line">    -&gt; inner join t2 on t1.id&#x3D;t2.ref</span><br><span class="line">    -&gt; where t1.id&#x3D;1;</span><br></pre></td></tr></table></figure><ul><li>可以发现在<code>inner join</code>建立起需要删除的关系，删除什么由<code>where</code>决定</li><li>需要删除表的关系由<code>delete t1,t2</code> 的表数量决定</li></ul><hr><h4 id="10-3-3-cascade-with-child-table"><a href="#10-3-3-cascade-with-child-table" class="headerlink" title="10.3.3 cascade with child table"></a>10.3.3 cascade with child table</h4><blockquote><p>通过<code>foreign key</code>建立父表子表的关系，当删除父表时，cascade的使用会使子表的相关数据自动删除</p></blockquote><ol><li><strong>建立子表rooms， 父表buildings</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table buildings(</span><br><span class="line">    -&gt; building_no int primary key auto_increment,</span><br><span class="line">    -&gt; building_name varchar(255),</span><br><span class="line">    -&gt; address varchar(255));</span><br><span class="line">   </span><br><span class="line">mysql&gt; create table rooms(</span><br><span class="line">    -&gt; room_no int primary key auto_increment,</span><br><span class="line">    -&gt; room_name varchar(255),</span><br><span class="line">    -&gt; building_no int,</span><br><span class="line">    -&gt; foreign key (building_no)</span><br><span class="line">    -&gt; references buildings(building_no)</span><br><span class="line">    -&gt; on delete cascade);   </span><br></pre></td></tr></table></figure><ol start="2"><li><strong>插入试验数据</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into buildings(building_no, building_name, address)</span><br><span class="line">    -&gt; values(1, &#39;the 1st building&#39;, &#39;1st road&#39;)</span><br><span class="line">    -&gt; ,(2, &#39;the 2nd building&#39;, &#39;2nd road&#39;)</span><br><span class="line">    -&gt; ,(3, &#39;the 3rd building&#39;, &#39;3rd road&#39;);</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210226113726353.png" alt="image-20210226113726353" style="zoom:50%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into rooms(room_no, room_name, building_no)</span><br><span class="line">    -&gt; values(3, &#39;room1&#39;, 2),</span><br><span class="line">    -&gt; (5, &#39;room3&#39;, 1);</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210226113807154.png" alt="image-20210226113807154" style="zoom:50%;" /><ul><li>注意⚠️：在限制了<code>foreign key</code>后，<font color=red><b>子表的数据需要控制在父表的数据范围内</b></font>.换个角度也知道，分析器会分析是否有父表存在，建立父子关系前需要确保父表存在。</li></ul><ol start="3"><li><strong>删除父表的1号楼</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from buildings</span><br><span class="line">-&gt; where building_no&#x3D;1;</span><br></pre></td></tr></table></figure><p>在这里只会提示<code>1 row affected</code>，但实际上子表的相关数据也被删除了：</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210226114328752.png" alt="image-20210226114328752" style="zoom:50%;" /><hr><p><strong>Summary</strong></p><ul><li>关于<code>cascade</code>父子表的删除操作仅有存储引擎「storage engine」可以完成，如<code>InnoDB</code></li><li>而一些表引擎是不支持<code>foreign key</code>，如<code>MyISAM</code>,因此建表前需要分析是否需要<code>cascade</code>的操作</li></ul><blockquote><p>mysql当中提供了可以查找父子表关系的处理方式：</p></blockquote><p>这其中要调用最底层的<code>information_schema</code>数据库</p><p>以<code>empdb</code>中的<code>buidings</code>和<code>rooms</code>为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use information_schema</span><br><span class="line"></span><br><span class="line">mysql&gt; select table_name</span><br><span class="line">    -&gt; from referential_constraints</span><br><span class="line">    -&gt; where constraints_schema&#x3D;&#39;empdb&#39;</span><br><span class="line">    -&gt; and referenced_table_name&#x3D;&#39;buildings&#39;</span><br><span class="line">    -&gt; and delete_rule&#x3D;&#39;cascade&#39;;</span><br></pre></td></tr></table></figure><p>在底层数据库中，参数配置已经规定，直接使用即可</p><p><strong>general structure</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select table_name</span><br><span class="line">    -&gt; from referential_constraints</span><br><span class="line">    -&gt; where constraints_schema&#x3D;&#39;operated_database&#39;</span><br><span class="line">    -&gt; and referenced_table_name&#x3D;&#39;parent_table_name&#39;</span><br><span class="line">    -&gt; and delete_rule&#x3D;&#39;cascade&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>需要修改的仅<code>&#39; &#39;</code>内部分</p></blockquote><h4 id="10-3-4-replace-op"><a href="#10-3-4-replace-op" class="headerlink" title="10.3.4 replace op"></a>10.3.4 replace op</h4><blockquote><p>为mysql在sql上的拓展</p></blockquote><p>使用<code>replace</code>时会先看操作数据是否为<code>primary key | unique key</code>。如果不是，那么<code>replace</code>的操作等同于<code>insert</code></p><p>举个例子，先建个<code>cities</code>的新表来存储数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table cities(</span><br><span class="line">    -&gt; id int primary key auto_increment,</span><br><span class="line">    -&gt; name varchar(255),</span><br><span class="line">    -&gt; population int);</span><br><span class="line">    </span><br><span class="line">mysql&gt; insert into cities(name, population)</span><br><span class="line">    -&gt; values(&#39;new york&#39;, 15000),</span><br><span class="line">    -&gt; (&#39;los angela&#39;, 2800),</span><br><span class="line">    -&gt; (&#39;fiji&#39;, 1800);</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210226122508754.png" alt="image-20210226122508754" style="zoom:50%;" /><p>修改<code>id=2</code>的<code>population</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; replace cities(id, population)</span><br><span class="line">    -&gt; values(2, 10000);</span><br></pre></td></tr></table></figure><p>得到：</p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210226122557408.png" alt="image-20210226122557408" style="zoom:50%;" /><p><strong>conclusion：</strong> <code>replace</code>的处理方式是自己新建列然后覆盖原有列，因为<code>name</code>没有赋值，默认为<code>null</code></p><p>再举个栗子，使用<code>replace into</code>来插入数据:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; replace into cities</span><br><span class="line">    -&gt; set id&#x3D;4,</span><br><span class="line">    -&gt; name&#x3D;&#39;phoenix&#39;,</span><br><span class="line">    -&gt; population&#x3D;178690;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210226123409851.png" alt="image-20210226123409851" style="zoom:50%;" /><p>与<code>update</code>不同，如果在这里没有规定值，则会采取默认值填充</p><h5 id="Appendix：-replace-rows-by-selecting-other-table"><a href="#Appendix：-replace-rows-by-selecting-other-table" class="headerlink" title="Appendix： replace rows by selecting other table"></a><strong>Appendix：</strong> replace rows by selecting other table</h5><blockquote><p>引用其他表的数据来更新整个列</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; replace into table_name(column_name)</span><br><span class="line">-&gt; select chosen_column_name</span><br><span class="line">-&gt; from chosen_table</span><br><span class="line">-&gt; where 「condition」</span><br></pre></td></tr></table></figure><h3 id="10-4-prepared-usgae"><a href="#10-4-prepared-usgae" class="headerlink" title="10.4 prepared usgae"></a>10.4 prepared usgae</h3><p>这个是<code>mysql 4.1+</code>后更新的新的用法，用来规范语法格式，像是mysql中的有参函数。主要的过程为：<br>$$<br>prepare \rightarrow execute(circle)\rightarrow deallocate\ prepare<br>$$<br>以<code>classicmodels</code>中的<code>products</code>为例</p><ol><li>先定义prepare语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; prepare stm from</span><br><span class="line">    -&gt; &#39;select productcode, productname </span><br><span class="line">    -&gt; from products </span><br><span class="line">    -&gt; where productcode&#x3D;?&#39;;</span><br></pre></td></tr></table></figure><ol start="2"><li>命名where代表的变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set @pc&#x3D;&#39;S10_1678&#39;;</span><br></pre></td></tr></table></figure><ol start="3"><li>执行该函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; execute stm using @pc;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210226125523596.png" alt="image-20210226125523596" style="zoom:50%;" /><ol start="4"><li>释放函数所占空间</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; deallocate prepare stm;</span><br></pre></td></tr></table></figure><h2 id="11-Transaction"><a href="#11-Transaction" class="headerlink" title="11 Transaction"></a>11 Transaction</h2><blockquote><p>同时介绍<code>rollup</code>及<code>commit</code></p></blockquote><p><code>transaction</code>用来防止在一系列操作的过程中，有数据没有被传入表中。如果在这一连串操作中，有数据没有导入，则返回原始状态；如果正常进行，则对数据库进行全部操作。</p><h3 id="11-1-transaction-statement"><a href="#11-1-transaction-statement" class="headerlink" title="11.1 transaction statement"></a>11.1 transaction statement</h3><p><code>mysql</code>在<code>transaction</code>方面提供了以下操作：</p><ul><li>去运行transaction，使用<code>start transaction</code>，或者采用别名<code>begin/begin work</code>.</li><li>提交transaction操作并进行永久改变，采用<code>commit</code></li><li>召回<code>transaction</code>操作并取消原先操作，采用<code>roll back</code></li><li>限制数据库自动commit，设置<code>set autocommit</code></li></ul><p>默认条件下，一般认为会永久改变数据库，在如何修改自动提交的操作如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">% constraint auto_commit</span><br><span class="line">mysql&gt; set autocommit &#x3D; off;</span><br><span class="line">mysql&gt; set autocommit &#x3D; 0;</span><br><span class="line"></span><br><span class="line">% start auto_commit</span><br><span class="line">mysql&gt; set autocommit &#x3D; on;</span><br><span class="line">mysql&gt; set autocommit &#x3D; 1;</span><br></pre></td></tr></table></figure><p><strong>Example:</strong></p><blockquote><p><code>orders</code> &amp; <code>orderdetails</code> 表</p></blockquote><blockquote><p>为了能更好的使用transaction，我们必须将transaction的各个操作的逻辑顺序整理出来，决定在这个过程中使用什么数据</p></blockquote><p>假设现在在orders中新增一名顾客的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">% start transaction</span><br><span class="line">mysql&gt; start transaction;</span><br><span class="line"></span><br><span class="line">% get inserted ordernumber</span><br><span class="line">mysql&gt; select </span><br><span class="line">    -&gt; @ordernumber :&#x3D; max(ordernumber)+1</span><br><span class="line">    -&gt; from orders;</span><br><span class="line">    </span><br><span class="line">% insert manipulated data</span><br><span class="line">%% in orders</span><br><span class="line">mysql&gt; insert into orders(ordernumber, orderdate, requireddate, shippeddate, status, customernumber)</span><br><span class="line">    -&gt; values(@ordernumber, &#39;2021-02-27&#39;, &#39;2021-02-28&#39;, &#39;2021-03-01&#39;, &#39;In Process&#39;, 145);</span><br><span class="line">    </span><br><span class="line">%% in orderdetails</span><br><span class="line">mysql&gt; insert into orderdetails(ordernumber, productcode, quantityordered, priceeach, orderlinenumber)</span><br><span class="line">    -&gt; values(@ordernumber, &#39;S18_1749&#39;, 30, 100.1, 1),</span><br><span class="line">    -&gt; (@ordernumber, &#39;S18_2248&#39;, 50, 21.17, 2);</span><br><span class="line"></span><br><span class="line">% commit change</span><br><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure><p><strong>怎么去查看插入的新信息呢？</strong></p><p>在选择插入值的时候得到<code>@ordernumber = 10426</code>，在<code>select</code>中选择对应的列，如果希望引用其他表的数据，使用<code>join</code>的方式引入多表的表现数据</p><h3 id="11-2-ROLLBACK-op"><a href="#11-2-ROLLBACK-op" class="headerlink" title="11.2 ROLLBACK op"></a>11.2 ROLLBACK op</h3><blockquote><p>如果希望撤销之前的<code>transaction</code>操作，可以采用<code>roll back</code>的方式</p></blockquote><p>以<code>orders</code>为例</p><blockquote><p>这里需要用的删除的表是没有<code>cascade</code>关系的</p></blockquote><ul><li><strong>1st session</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; delete from orders;</span><br><span class="line">Query OK, 327 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li><strong>然而另开一个<code>session</code></strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select count(*) ordernumber</span><br><span class="line">-&gt; from orders;</span><br><span class="line"></span><br><span class="line">+-------------+</span><br><span class="line">| ordernumber |</span><br><span class="line">+-------------+</span><br><span class="line">|         327 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><p>因此在这些地方我们能够把<code>transaction</code>视为mysql当中开了一个虚拟空间，对原有数据进行了虚拟操作，当<code>commit</code>时该空间的操作生效，<code>roll up</code>时无事发生</p><p>为了保证数据完整，我们<code>rollback</code>全部操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; rollback;</span><br><span class="line">0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="11-3-locking-table"><a href="#11-3-locking-table" class="headerlink" title="11.3 locking table"></a>11.3 locking table</h3><p>采用<code>locking</code>的原因是为了避免，<code>当一个客户端获取数据时，有其他客户端来修改数据</code>⤫：</p><ul><li><code>locking</code>仅对个人，避免的事其他<code>session</code>影响数据</li><li><code>locking</code>间<code>client session</code>不能互相影响，即互相设锁</li></ul><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210227104205791.png" alt="image-20210227104205791" style="zoom:50%;" /><h4 id="11-3-1-general-structure"><a href="#11-3-1-general-structure" class="headerlink" title="11.3.1  general structure"></a>11.3.1  general structure</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; lock tables table1_name &#123;read | write&#125;,</span><br><span class="line">                   table2_name &#123;read | write&#125;,</span><br><span class="line">                   ...;</span><br></pre></td></tr></table></figure><p><code>locking</code>中存在两种模式：<code>read</code>和<code>write</code>，建立个新表<code>messages</code>进行讨论</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table messages(</span><br><span class="line">    -&gt; id int primary key auto_increment,</span><br><span class="line">    -&gt; message varchar(255) default null);</span><br></pre></td></tr></table></figure><p>设置初始值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into messages(message)</span><br><span class="line">    -&gt; values(&#39;the 1st example&#39;);</span><br></pre></td></tr></table></figure><h4 id="11-3-2-read-lock"><a href="#11-3-2-read-lock" class="headerlink" title="11.3.2 read lock"></a>11.3.2 read lock</h4><p><strong>Features:</strong></p><ul><li>当<code>read lock</code>所在的<code>session</code>正常或者异常终止时，会使所有的<code>lock</code>都自动解开</li><li>设置<code>read lock</code>的<code>session</code>也只能<code>read</code>，不能执行<code>write</code>的操作。此时所有的<code>sessions</code>的<code>write</code>操作都会放在<code>writing line</code>当中</li></ul><p><strong>如何解锁？</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; unlock tables;</span><br></pre></td></tr></table></figure><p><strong>以两个session的读写操作为例：</strong></p><blockquote><p>1st 表示第一个设置<code>read lock</code>的<code>session</code>， 2nd表示试图插入数据的<code>session</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-----1. show the demo sessions ports -----</span><br><span class="line">% 1st</span><br><span class="line">mysql&gt; select connection_id();</span><br><span class="line">2036;</span><br><span class="line"></span><br><span class="line">% 2nd</span><br><span class="line">mysql&gt; select connection_id();</span><br><span class="line">2038;</span><br><span class="line"></span><br><span class="line">-----2. set read lock in 1st session -----</span><br><span class="line">% 1st</span><br><span class="line">mysql&gt; lock tables messages read;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">% 2nd tries to insert into data</span><br><span class="line">mysql&gt; insert into messages(message)</span><br><span class="line">    -&gt; values(&#39;the read_1st example&#39;);</span><br></pre></td></tr></table></figure><p>在这个时候， <code>2nd session</code>处于<code>waiting</code>的状态，来<code>check</code>一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show processlist;</span><br></pre></td></tr></table></figure><p>![image-20210227113723897](/Users/zoriswang/Library/Application Support/typora-user-images/image-20210227113723897.png)</p><p>可以看到<code>id: 2038</code>处于<code>waiting</code>的状态</p><p>当解锁后：<code>mysql&gt; unlock tables;</code></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210227113851214.png" alt="image-20210227113851214" style="zoom:50%;" /><p>显示的时段是等待锁解开放入数据的时长，如果实在设置<code>read lock</code>的进程间设锁，则会出现这种情况：</p><p>![image-20210227114032231](/Users/zoriswang/Library/Application Support/typora-user-images/image-20210227114032231.png)</p><h4 id="11-3-3-write-lock"><a href="#11-3-3-write-lock" class="headerlink" title="11.3.3 write lock"></a>11.3.3 write lock</h4><p><strong>Features：</strong></p><ul><li>设置<code>write lock</code>的<code>session</code>是唯一可以对表进行读写操作的进程</li><li>其他<code>sessions</code>都不能够读取或者写数据直到<code>lock released</code></li></ul><p>当锁解开后，这些数据仍会被写入，这里就不展示了，过程跟read相似。</p><p><strong><code>read lock</code>和<code>write lock</code>的区别</strong></p><ul><li><strong><code>read lock</code>类似于<code>shared lock</code>，</strong>所有<code>session</code>都能够读取数据，对于设锁的<code>session</code>其不能写数据，对于其他<code>session</code>写入时会先在<code>waiting line</code>等待，直到<code>lock released</code>后，数据写入</li><li><strong><code>write lock</code>类似于<code>exclusive lock</code>，</strong>设锁的<code>session</code>可以进行读写操作，其他<code>session</code>没有读写操作的权限</li></ul><h2 id="12-Managing-MySQL-Databases-amp-Tables"><a href="#12-Managing-MySQL-Databases-amp-Tables" class="headerlink" title="12 Managing MySQL Databases &amp; Tables"></a>12 Managing MySQL Databases &amp; Tables</h2><h3 id="12-1-basic-ops-about-database"><a href="#12-1-basic-ops-about-database" class="headerlink" title="12.1 basic ops about database"></a>12.1 basic ops about database</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">% 显示该ip下有的数据库</span><br><span class="line"></span><br><span class="line">mysql&gt; use database_name;</span><br><span class="line">% 使用该数据库</span><br></pre></td></tr></table></figure><h3 id="12-2-Drop-database"><a href="#12-2-Drop-database" class="headerlink" title="12.2 Drop database"></a>12.2 Drop database</h3><p><code>Drop database</code>会永久删除数据库，谨慎操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  drop database 「if exists」 database_name;</span><br></pre></td></tr></table></figure><p>返回的为你删除了该数据库中的多少张表</p><ul><li>在mysql中，<code>schema</code>与<code>database</code>为同义词</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop schema 「if exists」 database_name;</span><br></pre></td></tr></table></figure><p>产生的效果是一样的</p><h3 id="12-3-basic-ops-about-table"><a href="#12-3-basic-ops-about-table" class="headerlink" title="12.3 basic ops about table"></a>12.3 basic ops about table</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table if not exists table_name(</span><br><span class="line">-&gt; column_name1, </span><br><span class="line">-&gt; column_name2,</span><br><span class="line">  -&gt; ...</span><br><span class="line">-&gt; table constraints</span><br><span class="line">-&gt; )engine&#x3D;storage_engine;</span><br></pre></td></tr></table></figure><ul><li><code>Table_name</code>不能与<code>database_name</code>相同， <code>if not exists</code>作为缺省项有时会带来很大帮助</li></ul><h3 id="12-4-columns’-definition"><a href="#12-4-columns’-definition" class="headerlink" title="12.4 columns’ definition"></a>12.4 columns’ definition</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">column_name data_type(length) [NOT NULL] [DEFAULT value] [AUTO_INCREMENT] column_constraint;</span><br></pre></td></tr></table></figure><p>在column_constraint 处，可以设置<code>unique</code>, <code>check</code>, <code>primary key</code>等联系词，其中<code>primary key</code>可以设置一列或多列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">primary key(col1, col2, ..., coln);</span><br></pre></td></tr></table></figure><h3 id="12-5-sequence"><a href="#12-5-sequence" class="headerlink" title="12.5 sequence"></a>12.5 sequence</h3><blockquote><p><code>Sequence</code>在mysql中在表中生成唯一有序的ID</p></blockquote><p><strong>实际应用：</strong> 在<code>CRM</code>中我们需要随机生成客户的ID, <code>HR</code>方面需要设置连续的雇员号码等</p><blockquote><p>为了能自动生成有序的序号，需要对对应列设置<code>auto_increment</code>，一般都为<code>primary key</code></p></blockquote><p>使用<code>auto_increment</code>的几个规则：</p><ul><li>每个表只能有一个<code>auto_increment</code>的列，通常数据类型为整数</li><li>这个<code>auto_increment</code>必须具有索引，这说明其必须约束为<code>primary key</code>或<code>unique key</code></li><li><code>auto_increment</code>一定<code>not null</code>，在设置相关数据类型时mysql自动修正为<code>not null</code></li></ul><p><strong>更便捷的使用</strong></p><ul><li><p>为了获得最后一行的序号，方便插入，使用函数<code>last_insert_id()</code>获得</p></li><li><p>当你插入的新对象的<code>new id</code>大于当前表的最后一行时，会使用<code>new id</code>，而之后的<code>sequence</code>依旧以原来的<code>id</code>为主，由此会产生原有的<code>id</code>与<code>new id</code>间的<code>gap</code></p></li><li><p>如果使用了<code>delete</code>来删除行，该<code>id</code>会不会再出现取决于使用的<code>storage engine</code>。如<code>MyISAM</code>,<code>InnoDB</code>不会使用</p></li></ul><p>对上述的知识做个全流程示范：</p><ol><li><strong>建立新表employees</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table if not exists employees(</span><br><span class="line">    -&gt; emp_no int auto_increment,</span><br><span class="line">    -&gt; first_name varchar(255) not null,</span><br><span class="line">    -&gt; last_name varchar(255) not null,</span><br><span class="line">    -&gt; primary key(emp_no)</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>插入数据</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into employees(first_name, last_name)</span><br><span class="line">    -&gt; values(&#39;1st&#39;, &#39;example&#39;),</span><br><span class="line">    -&gt; (&#39;2nd&#39;, &#39;example&#39;);</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210303162806780.png" alt="image-20210303162806780" style="zoom:50%;" /><ol start="3"><li><strong>删除第二个数据</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from employees</span><br><span class="line">    -&gt; where emp_no&#x3D;2;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>插入第三个数据，观察此时的<code>emp_no</code></strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into employees(first_name, last_name)</span><br><span class="line">    -&gt; values(&#39;3rd&#39;, &#39;example&#39;);</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210303163104385.png" alt="image-20210303163104385" style="zoom:50%;" /><p>因为系统默认的存储引擎为<code>InnoDB</code>, 在该存储引擎下，删除的<code>ID</code>不会二次出现</p><ol start="5"><li><strong>改变第三个数据的<code>emp_no</code>，插入第四个数据，观察<code>emp_no</code>为<code>11</code>还是<code>4</code></strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update employees</span><br><span class="line">    -&gt; set</span><br><span class="line">    -&gt; emp_no&#x3D;10,</span><br><span class="line">    -&gt; first_name&#x3D;&#39;4th&#39;</span><br><span class="line">    -&gt; where emp_no&#x3D;3;</span><br></pre></td></tr></table></figure><blockquote><p>注意这里<code>update</code>是表，之后才是<code>set</code>相关属性</p></blockquote><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210303163701243.png" alt="image-20210303163701243" style="zoom:50%;" /><p><strong>插入第4个数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into employees(first_name, last_name)</span><br><span class="line">    -&gt; values(&#39;4th_insert&#39;, &#39;example&#39;);</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210303163905919.png" alt="image-20210303163905919" style="zoom:50%;" /><p><strong>可以看到，此时插入的数据依旧是<code>emp_no</code>原来的<code>ID</code>自动<code>auto_increment</code>的结果</strong></p><h3 id="12-6-Alter-table"><a href="#12-6-Alter-table" class="headerlink" title="12.6 Alter table"></a>12.6 Alter table</h3><blockquote><p>这里主要介绍如何加列，改变列，重命名列，删除列及重命名表</p></blockquote><p><strong>先建立个示例表<code>vehicles</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table if not exists vehicles(</span><br><span class="line">    -&gt; vehicle_id int primary key,</span><br><span class="line">    -&gt; year int not null,</span><br><span class="line">    -&gt; make varchar(255));</span><br></pre></td></tr></table></figure><h4 id="lt-1-gt-add-a-single-column"><a href="#lt-1-gt-add-a-single-column" class="headerlink" title="&lt;1&gt; add a single column"></a>&lt;1&gt; add a single column</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name</span><br><span class="line">add new_column_name column_definition</span><br><span class="line">「first | after column_name」;</span><br></pre></td></tr></table></figure><ul><li>其中<code>first</code>指新增列插入表中作为首列</li></ul><p>插入新列<code>model varchar(255)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table employees</span><br><span class="line">-&gt; add model varchar(255) not null;</span><br></pre></td></tr></table></figure><p>查看表内结构：<code>descirbe employees</code></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210303170453040.png" alt="image-20210303170453040" style="zoom:50%;" /><h4 id="lt-2-gt-add-multi-columns-alter-add"><a href="#lt-2-gt-add-multi-columns-alter-add" class="headerlink" title="&lt;2&gt; add multi columns alter ... add"></a>&lt;2&gt; <strong>add multi columns <code>alter ... add</code></strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table vehicles</span><br><span class="line">    -&gt; add color varchar(50),</span><br><span class="line">    -&gt; add note varchar(255);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; describe vehicles;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210303200640664.png" alt="image-20210303200640664" style="zoom:50%;" /><h4 id="lt-3-gt-change-multi-columns-by-Modify"><a href="#lt-3-gt-change-multi-columns-by-Modify" class="headerlink" title="&lt;3&gt; change multi columns by Modify"></a>&lt;3&gt; <strong>change multi columns by <code>Modify</code></strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name</span><br><span class="line">modify column_name column_definition</span><br><span class="line">[first | after column_name],</span><br><span class="line">modify column_name column_definition</span><br><span class="line">[...];</span><br></pre></td></tr></table></figure><p><strong>举个栗子：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table vehicles</span><br><span class="line">    -&gt; modify color varchar(50) not null,</span><br><span class="line">    -&gt; modify note varchar(255) not null;</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210303200711742.png" alt="image-20210303200711742" style="zoom:50%;" /><ul><li>在<code>modify</code>中，我们能够重新定义列，修改对象的大小，数据类型等</li></ul><h4 id="lt-4-gt-change-columns"><a href="#lt-4-gt-change-columns" class="headerlink" title="&lt;4&gt; change columns"></a>&lt;4&gt; change columns</h4><p><strong>general structure：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter tabel table_name</span><br><span class="line">change column original_name new_name column_defnition</span><br><span class="line">[first | after column_name]</span><br></pre></td></tr></table></figure><p>举个栗子「修改<code>note</code>为<code>colornote</code>」:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table vehicles </span><br><span class="line">    -&gt; change column color colornote varchar(100)</span><br><span class="line">    -&gt; after make;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210303201805449.png" alt="image-20210303201805449" style="zoom:50%;" /><h4 id="lt-5-gt-drop-columns"><a href="#lt-5-gt-drop-columns" class="headerlink" title="&lt;5&gt; drop columns"></a>&lt;5&gt; drop columns</h4><p><strong>general structure:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table_name</span><br><span class="line">drop column_name;</span><br></pre></td></tr></table></figure><h4 id="lt-6-gt-rename-table"><a href="#lt-6-gt-rename-table" class="headerlink" title="&lt;6&gt; rename table"></a>&lt;6&gt; rename table</h4><p><strong>general structure:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table_name</span><br><span class="line">rename to new_table_name;</span><br></pre></td></tr></table></figure><p>举个栗子：</p><ul><li><strong>original tables</strong></li></ul><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210303202248835.png" alt="image-20210303202248835" style="zoom:50%;" /><ul><li><strong>rename process</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table vehicles</span><br><span class="line">rename to cars</span><br></pre></td></tr></table></figure><ul><li><strong>final result</strong></li></ul><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210303202458021.png" alt="image-20210303202458021" style="zoom:50%;" /><h3 id="12-7-renaming-table-using-rename-statement"><a href="#12-7-renaming-table-using-rename-statement" class="headerlink" title="12.7 renaming table using rename statement"></a>12.7 renaming table using rename statement</h3><p>为了能更便捷地<code>rename tables</code>,使用以下语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename table old_table_name to new_table_name;</span><br></pre></td></tr></table></figure><blockquote><p><font color=red><b>注意：</b></font> </p><ul><li>在<code>rename</code>前需要确保此时没有<code>transaction</code>及<code>lock tables</code></li><li>对于<code>temporary table</code>，<code>rename table</code>无定义行为，只能采用<code>alter table</code>的方法</li></ul></blockquote><p>如何新建<code>temporary table</code>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create temporary tabel [if exists] table_name();</span><br></pre></td></tr></table></figure><ul><li><strong>查找表中存在的列</strong></li></ul><blockquote><p>当表中有上百列时，查找会变得很困难，在之前最好先<code>check</code>一下</p></blockquote><p>关于列的信息存储于<code>information_schema</code>数据库中的<code>columns</code>表内，查找方式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select</span><br><span class="line">    -&gt; if(count(*)&#x3D;1, &#39;exist&#39;, &#39;not wxist&#39;) as result</span><br><span class="line">    -&gt; from information_schema.columns</span><br><span class="line">    -&gt; where table_schema&#x3D;&#39;classicmodels&#39;</span><br><span class="line">    -&gt; and table_name&#x3D;&#39;employees&#39;</span><br><span class="line">    -&gt; and column_name&#x3D;&#39;lastName&#39;;</span><br></pre></td></tr></table></figure><h3 id="12-8-drop-columns"><a href="#12-8-drop-columns" class="headerlink" title="12.8 drop columns"></a>12.8 drop columns</h3><p><strong>general structure</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table table_name</span><br><span class="line">-&gt; drop column_name1,</span><br><span class="line">-&gt; drop column_name2,</span><br><span class="line">-&gt; ...;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 删除列时，需要考虑该列是否涉及到其他列，对于大型数据库，删除关系列消耗会较大</p><p>举个删除非关系列和关系列的🌰</p><ol><li><strong>建立新表</strong></li></ol><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210304161640671.png" alt="image-20210304161640671" style="zoom:50%;" /><ol start="2"><li><strong>删除<code>content</code>列</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table posts</span><br><span class="line">    -&gt; drop content;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210304161832694.png" alt="image-20210304161832694" style="zoom:50%;" /><ul><li><strong>Drop a column is a foreign key</strong></li></ul><ol><li><strong>建立新表<code>categories</code></strong></li></ol><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210304163317792.png" alt="image-20210304163317792" style="zoom:50%;" /><ol start="2"><li><strong>往<code>posts</code>中加入新列<code>categories_id</code></strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table posts</span><br><span class="line">    -&gt; add categorie_id int not null;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>约束两列关系</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table posts</span><br><span class="line">    -&gt; add constraint fk_cat</span><br><span class="line">    -&gt; foreign key (categorie_id)</span><br><span class="line">    -&gt; references categories(id);</span><br></pre></td></tr></table></figure><ul><li><strong>注意：</strong> 这里加的<code>constraint</code>为<code>fk_cat</code>，<code>fk</code>表示<code>foreign_key</code></li><li><font color=red><b>foreign key后的约束列需要用括号括起来表示</b></font></li></ul><ol start="4"><li><strong>观察此时两表间的关系</strong></li></ol><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210304164309238.png" alt="image-20210304164309238" style="zoom:50%;" /><p>试图删除<code>categories_id</code>列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table posts</span><br><span class="line">    -&gt; drop categorie_id;</span><br></pre></td></tr></table></figure><p><strong>系统显示：</strong></p><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210304164737689.png" alt="image-20210304164737689" style="zoom:50%;" /><h3 id="12-9-drop-tables"><a href="#12-9-drop-tables" class="headerlink" title="12.9 drop tables"></a>12.9 drop tables</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop [temporary] table [if exists] table[, table, ...] ...</span><br><span class="line">[restrict | cascade]</span><br></pre></td></tr></table></figure><ul><li>mysql中，如果希望删除多表，使用<code>,</code>来分隔选择删除的表</li><li>加入<code>temporary</code>来删除<code>temporary table</code></li></ul><h4 id="12-9-1-drop-table-based-on-a-pattern"><a href="#12-9-1-drop-table-based-on-a-pattern" class="headerlink" title="12.9.1 drop table based on a pattern"></a>12.9.1 drop table based on a pattern</h4><p>假设你希望删除一推名为<code>testx</code>的表，但是mysql中没有提供</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop table like &#39;%pattern%&#39;</span><br></pre></td></tr></table></figure><p>但是可以采取相似的方式来处理重样式表格，假设建立<code>test1,..2,..3</code>表格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table test1(</span><br><span class="line">    -&gt; id int primary key auto_increment,</span><br><span class="line">    -&gt; name varchar(255) not null);</span><br><span class="line">    </span><br><span class="line">mysql&gt; create table test2 like test1;</span><br><span class="line">mysql&gt; create table test3 like test1;</span><br></pre></td></tr></table></figure><p><strong>现在需要删除全部<code>testx</code>的表格</strong></p><ol><li>先设置<code>schema</code>和<code>pattern</code>「在<code>mysql</code>中<code>schema</code>通常用于表示<code>database</code>」</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set @schema&#x3D;&#39;classicmodels&#39;;</span><br><span class="line">mysql&gt; set @pattern&#x3D;&#39;test%&#39;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> <code>set</code>后的变量需要用<code>&#39; &#39;</code>来包括</p></blockquote><ol start="2"><li>设置新变量来代替需要删除的表格</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat(&#39;drop table&#39;, group_concat(@schema,&#39;.&#39;,table_name),&#39;;&#39;)</span><br><span class="line">    -&gt; into @droplike</span><br><span class="line">    -&gt; from information_schema.tables</span><br><span class="line">    -&gt; where @schema&#x3D;database()</span><br><span class="line">    -&gt; and table_name like @pattern;</span><br></pre></td></tr></table></figure><blockquote><p>用<code>@droplike</code>来表示</p></blockquote><ol start="3"><li>显示<code>dynamic sql statement</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @droplike;</span><br></pre></td></tr></table></figure><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210304195915209.png" alt="image-20210304195915209" style="zoom:50%;" /><ol start="4"><li><strong>Execute dynamic sql</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">prepare stmt from @droplike;</span><br><span class="line">execute stmt;</span><br><span class="line">deallocate execute stmt;</span><br></pre></td></tr></table></figure><p>之后，如果有需要删除的共同缀落表，可以采用以上方式来消除。</p><p>如果经常执行相关操作，可以往<code>storage engine</code>上升级</p><h3 id="12-10-truncate-table"><a href="#12-10-truncate-table" class="headerlink" title="12.10 truncate table"></a>12.10 truncate table</h3><p>如果需要直接删除表，可以采用truncate的方式来删除表</p><p><strong>general structure</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; truncate table table_name</span><br></pre></td></tr></table></figure><ul><li>如果该表有<code>foreign key</code>的话，该<code>truncate statement</code>将会失效</li></ul><h2 id="13-Mysql-Datatype"><a href="#13-Mysql-Datatype" class="headerlink" title="13 Mysql Datatype"></a>13 Mysql Datatype</h2><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210304201708441.png" alt="image-20210304201708441" style="zoom:50%;" /><p>以上是几个容易出现的类型，接下来说几个特殊的类型</p><h3 id="13-1-bit-examples"><a href="#13-1-bit-examples" class="headerlink" title="13.1 bit examples"></a>13.1 bit examples</h3><blockquote><p>注意这个特性只存在于mysql 5.7+内</p></blockquote><p>当定义某个属性为<code>bit</code>型时，表示其为二进制的数，其最后呈现结果为十进制的数</p><p>举个栗子</p><ol><li><strong>新建立一个表<code>working_calendar</code></strong></li></ol><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210305142715804.png" alt="image-20210305142715804" style="zoom:50%;" /><ol start="2"><li><strong>插入数据</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO working_calendars(y,w,days)</span><br><span class="line">    -&gt; VALUES(2017,1,B&#39;1111100&#39;);</span><br></pre></td></tr></table></figure><p>此时的<code>days</code>在<code>select 时</code>呈现的将是整数形式， 即<code>days=124</code></p><p>当填充的二维进制位数少于其定义的类型时，<code>mysql</code>会自动补充<code>0</code></p><ol start="3"><li><strong>显示数据</strong></li></ol><p>直接选择原填充的少于<code>n</code>的数据时，假如填充的是<code>111100</code>，mysql在处理时自动补了<code>0</code>，但是显示时仍旧为<code>111100</code>，这个时候如果希望显示正确的<code>0111100</code>，则需要将语句改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select y, w, lapd(bin(days), 7, 0)</span><br><span class="line">from working_calendars</span><br></pre></td></tr></table></figure><p>这个时候显示的即是<code>0111100</code></p><h3 id="13-2-json-amp-enum"><a href="#13-2-json-amp-enum" class="headerlink" title="13.2 json &amp; enum"></a>13.2 json &amp; enum</h3><p>这两个数据类型因为我目前没用过，所以这里就不介绍了qwq</p><h2 id="14-Mysql-constraints"><a href="#14-Mysql-constraints" class="headerlink" title="14 Mysql constraints"></a>14 Mysql constraints</h2><h3 id="14-1-not-null-constraints"><a href="#14-1-not-null-constraints" class="headerlink" title="14.1 not null constraints"></a>14.1 not null constraints</h3><p>在定义表内属性类型时防<code>null</code>时，在数据类型后加<code>not null</code>即可，为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">column_name column_type not null;</span><br></pre></td></tr></table></figure><h4 id="lt-1-gt-add-not-null-to-existing-columns"><a href="#lt-1-gt-add-not-null-to-existing-columns" class="headerlink" title="&lt;1&gt; add not null to existing columns"></a>&lt;1&gt; add <code>not null</code> to existing columns</h4><p>一般修改<code>column</code>不为<code>null</code>，采取以下三个步骤</p><ol><li>检查当前的<code>columns</code>是否为<code>null</code></li><li>使用<code>change</code>修改<code>column</code>属性</li><li>使用<code>modify</code>修改<code>column</code>属性</li></ol><p><strong>修改方法1: 通过<code>update</code>中的<code>set</code>来修改为<code>null</code>的属性</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update table_name</span><br><span class="line">set  is_null_column_name&#x3D;想要修改的值</span><br><span class="line">where is_null_column_name&#x3D;null</span><br></pre></td></tr></table></figure><p><strong>修改方法2: 使用<code>modify</code>修改原有的属性</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name</span><br><span class="line">change old_column_name new_column_name column_definition </span><br></pre></td></tr></table></figure><h4 id="lt-2-gt-drop-a-not-null-constraint"><a href="#lt-2-gt-drop-a-not-null-constraint" class="headerlink" title="&lt;2&gt; drop a not null constraint"></a>&lt;2&gt; drop a not null constraint</h4><p>查看选定的<code>column</code>是否为空，还可以通过<code>describe table_name</code>来查看</p><p>在重新设定<code>column</code>属性时，目前来讲最方便的还是<code>modify</code>的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name</span><br><span class="line">change old_column_name new_column_name column_definition </span><br></pre></td></tr></table></figure><h3 id="14-2-primary-key"><a href="#14-2-primary-key" class="headerlink" title="14.2 primary key"></a>14.2 primary key</h3><h4 id="14-2-1-introduction-to-primary-key"><a href="#14-2-1-introduction-to-primary-key" class="headerlink" title="14.2.1 introduction to primary key"></a>14.2.1 introduction to primary key</h4><p><code>primary key</code>可以为一列或是多列，但需要遵从以下规则：</p><ol><li><code>primary key</code>内的值必须是唯一出现的</li><li><code>primary key</code>中不得出现<code>null</code>值</li></ol><p><strong>注意：</strong> 因为<code>mysql</code>处理<code>integer</code>类型会较快，所以对于<code>primary key</code>一般选用<code>int</code>, <code>bigint</code>类型。但是在使用前需要确保表示的值是处于<code>int</code>,<code>bigint</code>表示范围内的</p><h4 id="14-2-2-define-primary-key-by-alter-add"><a href="#14-2-2-define-primary-key-by-alter-add" class="headerlink" title="14.2.2 define primary key by alter ... add"></a>14.2.2 define primary key by <code>alter ... add</code></h4><p>如果后面希望添加其他列作为<code>primary key</code>，可以采用<code>add</code>的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name</span><br><span class="line">add primary key(column_list)</span><br></pre></td></tr></table></figure><h4 id="14-2-3-key-V-S-primary-key-V-S-unique-key"><a href="#14-2-3-key-V-S-primary-key-V-S-unique-key" class="headerlink" title="14.2.3 key V.S primary key V.S unique key"></a>14.2.3 key V.S primary key V.S unique key</h4><h5 id="lt-1-gt-key"><a href="#lt-1-gt-key" class="headerlink" title="&lt;1&gt; key"></a>&lt;1&gt; key</h5><p><code>Key</code> 与<code>index</code>类似，但不包含在<code>primary | unique key</code> 。当希望往一列或多列中加入索引时，可以加入<code>key</code></p><h5 id="lt-2-gt-unique-key"><a href="#lt-2-gt-unique-key" class="headerlink" title="&lt;2&gt; unique key"></a>&lt;2&gt; unique key</h5><p>与<code>primary key</code>不同的点：</p><ul><li>允许出现<code>null</code>的值</li><li>对于每个表可以设置多个<code>unique key</code>，但只有一个<code>primary key</code></li></ul><h3 id="14-3-foreign-key"><a href="#14-3-foreign-key" class="headerlink" title="14.3 foreign key"></a>14.3 foreign key</h3><h4 id="14-3-1-features"><a href="#14-3-1-features" class="headerlink" title="14.3.1 features"></a>14.3.1 features</h4><ol><li><p>在<code>foreign key</code>中的<strong>子列的父列</strong>在其所在的表一般为<code>primary key</code></p></li><li><p>一个表可以有多个<code>foreign keys</code>，并<code>references</code>的可以是不同表</p></li></ol><h4 id="14-3-2-foreign-examples"><a href="#14-3-2-foreign-examples" class="headerlink" title="14.3.2 foreign examples"></a>14.3.2 foreign examples</h4><p>在这之前，专门为<code>foreign key</code>建立一个数据库<code>fkdemo</code></p><h5 id="lt-1-gt-connect-two-columns-in-different-tables"><a href="#lt-1-gt-connect-two-columns-in-different-tables" class="headerlink" title="&lt;1&gt;  connect two columns in different tables"></a>&lt;1&gt;  connect two columns in different tables</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table categories(</span><br><span class="line">    -&gt; categorie_id int auto_increment primary key,</span><br><span class="line">    -&gt; categorie_name varchar(255) not null);</span><br><span class="line">    </span><br><span class="line">mysql&gt; create table products(</span><br><span class="line">    -&gt; product_id int auto_increment primary key,</span><br><span class="line">    -&gt; product_name varchar(255) not null,</span><br><span class="line">    -&gt; categorie_id int,</span><br><span class="line">    -&gt; constraint fk_categorie </span><br><span class="line">    -&gt; foreign key (categorie_id) references categories(categorie_id));</span><br></pre></td></tr></table></figure><p>其中，<code>products</code>中的<code>category_id</code>与<code>categories</code>中的<code>category_id</code>形成父子关系</p><p>在这里我们没有使用<code>on update</code>和<code>on delete</code>的语法，因此全部归属在<code>default</code>关系的<code>restrict</code>中，包含了<code>update</code>和<code>delete</code>约束关系</p><h5 id="lt-2-gt-insert-1st-example"><a href="#lt-2-gt-insert-1st-example" class="headerlink" title="&lt;2&gt; insert 1st example"></a>&lt;2&gt; insert 1st example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into categories(categorie_name)</span><br><span class="line">    -&gt; values(&#39;1st data&#39;), (&#39;2nd data&#39;);</span><br></pre></td></tr></table></figure><p>此时往<code>products</code>中插入此前没规定的<code>categorie_id</code>的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into products(product_name, categorie_id)</span><br><span class="line">    -&gt; values(&#39;the 2nd data&#39;, 2);</span><br></pre></td></tr></table></figure><p>显示插入成功，说明在<code>products</code>中已经有了<code>categorie_id=2</code>的行，这个行由<code>foreign key</code>的协助下产生</p><p><strong>但是如果加入的<code>categorie_id</code> 大于原有的id时，会返回错误</strong></p><h5 id="lt-3-gt-try-to-change-gretaer-foreign-value"><a href="#lt-3-gt-try-to-change-gretaer-foreign-value" class="headerlink" title="&lt;3&gt; try to change gretaer foreign value"></a>&lt;3&gt; try to change gretaer foreign value</h5><p>尝试去把<code>categorie_id=2 ---&gt; categorie_id=100</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update categories</span><br><span class="line">    -&gt; set categorie_id&#x3D;100</span><br><span class="line">    -&gt; where categorie_id&#x3D;2;</span><br><span class="line"></span><br><span class="line">ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (&#96;fkdemo&#96;.&#96;products&#96;, CONSTRAINT &#96;fk_categorie&#96; FOREIGN KEY (&#96;categorie_id&#96;) REFERENCES &#96;categories&#96; (&#96;categorie_id&#96;))</span><br></pre></td></tr></table></figure><p><strong>返回错误：</strong> 因为其联系到<code>products</code>中的<code>categorie_id=2</code>的行</p><h5 id="lt-4-gt-foreign-key-on-alter-table"><a href="#lt-4-gt-foreign-key-on-alter-table" class="headerlink" title="&lt;4&gt; foreign key on alter table"></a>&lt;4&gt; foreign key on alter table</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name</span><br><span class="line">add constraint fk_name foreign key(column_list) references table_name(column_list)</span><br></pre></td></tr></table></figure><h5 id="lt-5-gt-drop-foreign-key"><a href="#lt-5-gt-drop-foreign-key" class="headerlink" title="&lt;5&gt; drop foreign key"></a>&lt;5&gt; drop foreign key</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table orders</span><br><span class="line">drop constraint fk_name;</span><br></pre></td></tr></table></figure><h3 id="14-4-unique-key"><a href="#14-4-unique-key" class="headerlink" title="14.4 unique key"></a>14.4 unique key</h3><h5 id="14-4-1-set-unique-key-while-creating-table"><a href="#14-4-1-set-unique-key-while-creating-table" class="headerlink" title="14.4.1 set unique key while creating table"></a>14.4.1 set unique key while creating table</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table table_name(</span><br><span class="line">column_list1 column_definition,</span><br><span class="line">...,</span><br><span class="line">unique(column_listx)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="14-4-2-set-unique-constraint-on-alter-table"><a href="#14-4-2-set-unique-constraint-on-alter-table" class="headerlink" title="14.4.2 set unique constraint on alter table"></a>14.4.2 set unique constraint on alter table</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name</span><br><span class="line">set constraint uc_name unique (column_list1, column_list2,...)</span><br></pre></td></tr></table></figure><h5 id="14-4-3-drop-unique-constraint"><a href="#14-4-3-drop-unique-constraint" class="headerlink" title="14.4.3 drop unique constraint"></a>14.4.3 drop unique constraint</h5><blockquote><p>依旧使用<code>alter table</code>来完成</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table </span><br><span class="line">drop constraint unique uc_name;</span><br></pre></td></tr></table></figure><h3 id="14-5-check"><a href="#14-5-check" class="headerlink" title="14.5 check"></a>14.5 check</h3><h5 id="14-5-1-check-function"><a href="#14-5-1-check-function" class="headerlink" title="14.5.1 check function"></a>14.5.1 check function</h5><ul><li>用于限制一列的数据范围</li><li>如果对整个表定义了check约束，则一列的值能由同行的其他列的值来约束</li></ul><h5 id="14-5-2-check-example"><a href="#14-5-2-check-example" class="headerlink" title="14.5.2 check example"></a>14.5.2 check example</h5><h5 id="lt-1-gt-check-in-creating-table"><a href="#lt-1-gt-check-in-creating-table" class="headerlink" title="&lt;1&gt; check in creating table"></a>&lt;1&gt; check in creating table</h5><ol><li><strong>第一种方式–直接check</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table</span><br><span class="line">    -&gt; persons(</span><br><span class="line">    -&gt; id int primary key not null,</span><br><span class="line">    -&gt; lastname varchar(100),</span><br><span class="line">    -&gt; firstname varchar(100),</span><br><span class="line">    -&gt; age int,</span><br><span class="line">    -&gt; check (age&gt;&#x3D;18));</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>第二种方式–使用<code>constraint</code></strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table persons_again(</span><br><span class="line">    -&gt; id int primary key not null,</span><br><span class="line">    -&gt; city varchar(255),</span><br><span class="line">    -&gt; age int,</span><br><span class="line">    -&gt; constraint chk_city check (age&gt;&#x3D;18 and city&#x3D;&#39;dream_city&#39;));</span><br></pre></td></tr></table></figure><h5 id="lt-2-gt-check-in-alter-table-with-add"><a href="#lt-2-gt-check-in-alter-table-with-add" class="headerlink" title="&lt;2&gt; check in alter table with add"></a>&lt;2&gt; check in alter table with add</h5><p>两种方式一起写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table persons</span><br><span class="line">    -&gt; add check(age&gt;&#x3D;18);</span><br><span class="line">    </span><br><span class="line">mysql&gt; alter table persons_agdin</span><br><span class="line">-&gt; add constraint chk_city </span><br><span class="line">-&gt; check (age&gt;&#x3D;18 and city&#x3D;&#39;dream city&#39;);</span><br></pre></td></tr></table></figure><h5 id="lt-3-gt-drop-a-check-constraint"><a href="#lt-3-gt-drop-a-check-constraint" class="headerlink" title="&lt;3&gt; drop a check constraint"></a>&lt;3&gt; drop a check constraint</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name</span><br><span class="line">drop check ck_name;</span><br></pre></td></tr></table></figure><h2 id="15-MySQL-Character-Set-amp-Collation"><a href="#15-MySQL-Character-Set-amp-Collation" class="headerlink" title="15 MySQL Character Set &amp;Collation"></a>15 MySQL Character Set &amp;Collation</h2><blockquote><p>这一块我不是很理解，这个地方讲解的很详细，可以看一下</p></blockquote><p><a href="https://sites.google.com/site/wen139/xiang-guan-zi-yuan/mysql-zi-fu-ji-xiang-jie">mysql字符集详解</a></p><h2 id="16-MySQL-export-amp-import-data"><a href="#16-MySQL-export-amp-import-data" class="headerlink" title="16 MySQL export &amp; import data"></a>16 MySQL export &amp; import data</h2><h3 id="16-1-import-csv-file-into-mysql-table"><a href="#16-1-import-csv-file-into-mysql-table" class="headerlink" title="16.1 import csv file into mysql table"></a>16.1 import csv file into mysql table</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; load data infile &quot;your csv file path&quot; </span><br><span class="line">-&gt; into table [tablename] fields terminated by &#39;,&#39;</span><br></pre></td></tr></table></figure><ul><li>这里表示是用<code>,</code>作为分隔符；如果使用的是<code>\t</code>，则不用指明域分隔符</li><li>这里文件的路径需要为<strong>绝对路径</strong>，否则mysql会从数据库的默认目录下找</li><li>如果文件在客户端上，需要使用<code>load local data infile</code>；缺少<code>local</code>说明文件从服务端上读</li><li>文件绝对路径<strong>单双引号</strong>都可以</li></ul><h3 id="16-2-import-excel"><a href="#16-2-import-excel" class="headerlink" title="16.2 import excel"></a>16.2 import excel</h3><p>不需要制定分隔符，<strong>但是需要提前建立好与文件内各个段相同的数据表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; load data infile &quot;your file path&quot;</span><br><span class="line">-&gt; into table [tablename];</span><br></pre></td></tr></table></figure><h3 id="16-3-import-sql"><a href="#16-3-import-sql" class="headerlink" title="16.3 import sql"></a>16.3 import sql</h3><p>不需要提前建立数据表，直接导入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; source home&#x2F;abc&#x2F;abc.sql</span><br></pre></td></tr></table></figure><h2 id="17-natural-sorting"><a href="#17-natural-sorting" class="headerlink" title="17 natural sorting"></a>17 natural sorting</h2><p>这里我偷懒了，因为这一块我写了感觉我讲的不是很清楚，<code>stack overflow</code>上有过相关讨论，很详细，看这个就阔以了</p><p><a href="https://stackoverflow.com/questions/153633/natural-sort-in-mysql">natural sort in mysql</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1-MySQL&quot;&gt;&lt;a href=&quot;#1-MySQL&quot; class=&quot;headerlink&quot; title=&quot;1 MySQL&quot;&gt;&lt;/a&gt;1 MySQL&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;RDBMS 关系数据库管理系统之一&lt;/p&gt;
&lt;/</summary>
      
    
    
    
    <category term="数据库" scheme="https://warmchay.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://warmchay.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
